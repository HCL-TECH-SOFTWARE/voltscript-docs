{"classname":"DateTimeObject","comment":"","valuetype":"","filenamebase":"DateTimeObject_ObjectClass","fqnprefix":"ZuluVSE","qn":"DateTimeObject","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","classattribnewnotexposed":"UnexposedNew","projectid":"85258A080068C86D85258803005C5E81","version":3,"classid":"85258A080068C86D85258803005CE670","lsxclassid":3,"signature":"Public Class DateTimeObject","modifiers":"Public","classname":"DateTimeObject","parentclassname":"None","constructorsignature":"Function New() As DateTimeObject","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "methods":[{"label":"IsAfter","comment":"Checks whether a passed DateTimeObject is after this DateTimeObject.","valuetype":"Boolean","filenamebase":"IsAfter_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"IsAfter","codesample":"    %REM \n        This checks the DateTimeObject isAfter() method. In this case,\n        It should print something like &amp;quot;Now (2023-09-13T17:38:51Z) isAfter (2023-02-20T20:49:13Z): True&amp;quot;\n    %END REM\n    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser\n    Dim nowObj as DateTimeObject\n    Dim testISOStr as String, testEpoch as Long\n    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;\n    testEpoch = 1676926153\n    Set dtObj = dtParser.ParseISOString(testISOStr)\n    Set nowObj = dtParser.getNow()\n    &amp;apos; Print Test Results\n    Print &amp;quot;Now (&amp;quot; &amp;amp; nowObj.ToISODateTime &amp;amp; &amp;quot;) isAfter (&amp;quot; &amp;amp; dtObj.ToISODateTime &amp;amp; &amp;quot;): &amp;quot; &amp;amp; Cstr(nowObj.isAfter(dtObj))","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DateTime As DateTimeObject)","signature":"Function IsAfter(DateTime As DateTimeObject) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks whether a passed DateTimeObject is after this DateTimeObject.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks whether a passed DateTimeObject is after this DateTimeObject.","inlinecomment":" \t &apos; Checks whether a passed DateTimeObject is after this DateTimeObject.","parentclassname":"DateTimeObject","codesamplehtml":"    %REM &lt;br /&gt;        This checks the DateTimeObject isAfter() method. In this case,&lt;br /&gt;        It should print something like &amp;quot;Now (2023-09-13T17:38:51Z) isAfter (2023-02-20T20:49:13Z): True&amp;quot;&lt;br /&gt;    %END REM&lt;br /&gt;    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser&lt;br /&gt;    Dim nowObj as DateTimeObject&lt;br /&gt;    Dim testISOStr as String, testEpoch as Long&lt;br /&gt;    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;&lt;br /&gt;    testEpoch = 1676926153&lt;br /&gt;    Set dtObj = dtParser.ParseISOString(testISOStr)&lt;br /&gt;    Set nowObj = dtParser.getNow()&lt;br /&gt;    &amp;apos; Print Test Results&lt;br /&gt;    Print &amp;quot;Now (&amp;quot; &amp;amp; nowObj.ToISODateTime &amp;amp; &amp;quot;) isAfter (&amp;quot; &amp;amp; dtObj.ToISODateTime &amp;amp; &amp;quot;): &amp;quot; &amp;amp; Cstr(nowObj.isAfter(dtObj))", "signatureelements":["Function"], "arguments":[{"label":"DateTime","comment":"DateTimeObject to compare to this","valuetype":"DateTimeObject","filenamebase":"DateTime_ValuedElement","fqnprefix":"ZuluVSEDateTimeObjectIsAfter","qn":"DateTime","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;DateTimeObject to compare to this&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"DateTimeObject to compare to this","inlinecomment":" \t &apos; DateTimeObject to compare to this"}]},{"label":"IsBefore","comment":"Checks whether a passed DateTimeObject is before this DateTimeObject.","valuetype":"Boolean","filenamebase":"IsBefore_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"IsBefore","codesample":"    %REM \n        This checks the DateTimeObject isBefore() method. In this case,\n        It should print something like &amp;quot;DateTime (2023-02-20T20:49:13Z) isBefore (2023-09-13T17:38:51Z): True&amp;quot;\n    %END REM\n    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser\n    Dim nowObj as DateTimeObject\n    Dim testISOStr as String, testEpoch as Long\n    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;\n    testEpoch = 1676926153\n    Set dtObj = dtParser.ParseISOString(testISOStr)\n    Set nowObj = dtParser.getNow()\n    &amp;apos; Print Test Results\n    Print &amp;quot;DateTime (&amp;quot; &amp;amp; dtObj.ToISODateTime &amp;amp; &amp;quot;) isBefore (&amp;quot; &amp;amp; nowObj.ToISODateTime &amp;amp; &amp;quot;): &amp;quot; &amp;amp; Cstr(dtObj.isBefore(nowObj))","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DateTime As DateTimeObject)","signature":"Function IsBefore(DateTime As DateTimeObject) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks whether a passed DateTimeObject is before this DateTimeObject.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks whether a passed DateTimeObject is before this DateTimeObject.","inlinecomment":" \t &apos; Checks whether a passed DateTimeObject is before this DateTimeObject.","parentclassname":"DateTimeObject","codesamplehtml":"    %REM &lt;br /&gt;        This checks the DateTimeObject isBefore() method. In this case,&lt;br /&gt;        It should print something like &amp;quot;DateTime (2023-02-20T20:49:13Z) isBefore (2023-09-13T17:38:51Z): True&amp;quot;&lt;br /&gt;    %END REM&lt;br /&gt;    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser&lt;br /&gt;    Dim nowObj as DateTimeObject&lt;br /&gt;    Dim testISOStr as String, testEpoch as Long&lt;br /&gt;    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;&lt;br /&gt;    testEpoch = 1676926153&lt;br /&gt;    Set dtObj = dtParser.ParseISOString(testISOStr)&lt;br /&gt;    Set nowObj = dtParser.getNow()&lt;br /&gt;    &amp;apos; Print Test Results&lt;br /&gt;    Print &amp;quot;DateTime (&amp;quot; &amp;amp; dtObj.ToISODateTime &amp;amp; &amp;quot;) isBefore (&amp;quot; &amp;amp; nowObj.ToISODateTime &amp;amp; &amp;quot;): &amp;quot; &amp;amp; Cstr(dtObj.isBefore(nowObj))", "signatureelements":["Function"], "arguments":[{"label":"DateTime","comment":"DateTimeObject to compare to this","valuetype":"DateTimeObject","filenamebase":"DateTime_ValuedElement","fqnprefix":"ZuluVSEDateTimeObjectIsBefore","qn":"DateTime","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;DateTimeObject to compare to this&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"DateTimeObject to compare to this","inlinecomment":" \t &apos; DateTimeObject to compare to this"}]},{"label":"IsEqual","comment":"Checks whether a passed DateTimeObject is identical to this DateTimeObject.","valuetype":"Boolean","filenamebase":"IsEqual_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"IsEqual","codesample":"    %REM \n        This checks the DateTimeObject isEqual() method. In this case,\n        It should print something like &amp;quot;Test (2023-02-20T20:49:13Z) isEqual (2023-02-20T20:49:13Z): True&amp;quot;\n    %END REM\n    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser\n    Dim testObj as DateTimeObject\n    Dim testISOStr as String, testEpoch as Long\n    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;\n    testEpoch = 1676926153\n    Set dtObj = dtParser.ParseISOString(testISOStr)\n    Set testObj = dtParser.BuildDateTimeFromEpoch(testEpoch)\n    &amp;apos; Print Test Results\n    Print &amp;quot;Test (&amp;quot; &amp;amp; testObj.ToISODateTime &amp;amp; &amp;quot;) isEqual (&amp;quot; &amp;amp; dtObj.ToISODateTime &amp;amp; &amp;quot;): &amp;quot; &amp;amp; Cstr(testObj.isEqual(dtObj))","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DateTime As DateTimeObject)","signature":"Function IsEqual(DateTime As DateTimeObject) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks whether a passed DateTimeObject is identical to this DateTimeObject.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks whether a passed DateTimeObject is identical to this DateTimeObject.","inlinecomment":" \t &apos; Checks whether a passed DateTimeObject is identical to this DateTimeObject.","parentclassname":"DateTimeObject","codesamplehtml":"    %REM &lt;br /&gt;        This checks the DateTimeObject isEqual() method. In this case,&lt;br /&gt;        It should print something like &amp;quot;Test (2023-02-20T20:49:13Z) isEqual (2023-02-20T20:49:13Z): True&amp;quot;&lt;br /&gt;    %END REM&lt;br /&gt;    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser&lt;br /&gt;    Dim testObj as DateTimeObject&lt;br /&gt;    Dim testISOStr as String, testEpoch as Long&lt;br /&gt;    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;&lt;br /&gt;    testEpoch = 1676926153&lt;br /&gt;    Set dtObj = dtParser.ParseISOString(testISOStr)&lt;br /&gt;    Set testObj = dtParser.BuildDateTimeFromEpoch(testEpoch)&lt;br /&gt;    &amp;apos; Print Test Results&lt;br /&gt;    Print &amp;quot;Test (&amp;quot; &amp;amp; testObj.ToISODateTime &amp;amp; &amp;quot;) isEqual (&amp;quot; &amp;amp; dtObj.ToISODateTime &amp;amp; &amp;quot;): &amp;quot; &amp;amp; Cstr(testObj.isEqual(dtObj))", "signatureelements":["Function"], "arguments":[{"label":"DateTime","comment":"DateTimeObject to compare to this","valuetype":"DateTimeObject","filenamebase":"DateTime_ValuedElement","fqnprefix":"ZuluVSEDateTimeObjectIsEqual","qn":"DateTime","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;DateTimeObject to compare to this&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"DateTimeObject to compare to this","inlinecomment":" \t &apos; DateTimeObject to compare to this"}]},{"label":"New","comment":"","valuetype":"DateTimeObject","filenamebase":"New_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As DateTimeObject","modifiers":"","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"DateTimeObject","codesamplehtml":"", "signatureelements":["Function"]},{"label":"ToISODateTime","comment":"Returns this DateTimeObject as a string in ISO 8601 date-time format.","valuetype":"String","filenamebase":"ToISODateTime_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"ToISODateTime","codesample":"    %REM \n        This checks the DateTimeObject toISODateTime() method. In this case,\n        It should print something like &amp;quot;DateTimeObject.toISODateTime is 2023-02-20T20:49:13Z&amp;quot;\n    %END REM\n    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser\n    Dim testISOStr as String\n    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;\n    Set dtObj = dtParser.ParseISOString(testISOStr)\n    &amp;apos; Print Test Results\n    Print &amp;quot;DateTimeObject.toISODateTime is &amp;quot; &amp;amp; dtObj.toISODateTime","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function ToISODateTime() As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns this DateTimeObject as a string in ISO 8601 date-time format.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns this DateTimeObject as a string in ISO 8601 date-time format.","inlinecomment":" \t &apos; Returns this DateTimeObject as a string in ISO 8601 date-time format.","parentclassname":"DateTimeObject","codesamplehtml":"    %REM &lt;br /&gt;        This checks the DateTimeObject toISODateTime() method. In this case,&lt;br /&gt;        It should print something like &amp;quot;DateTimeObject.toISODateTime is 2023-02-20T20:49:13Z&amp;quot;&lt;br /&gt;    %END REM&lt;br /&gt;    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser&lt;br /&gt;    Dim testISOStr as String&lt;br /&gt;    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;&lt;br /&gt;    Set dtObj = dtParser.ParseISOString(testISOStr)&lt;br /&gt;    &amp;apos; Print Test Results&lt;br /&gt;    Print &amp;quot;DateTimeObject.toISODateTime is &amp;quot; &amp;amp; dtObj.toISODateTime", "signatureelements":["Function"]},{"label":"ToString","comment":"Returns this DateTimeObject as a string uses C/C++ formatting codes and locale.","valuetype":"String","filenamebase":"ToString_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"ToString","codesample":"    %REM \n        This checks the DateTimeObject toString() method. In this case,\n        It should print something like &amp;quot;DateTimeObject.toString(%B %d %Y %T %Z, C) is February 20 2023 20:49:13 UTC&amp;quot;\n    %END REM\n    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser\n    Dim testISOStr as String, testFmtPattern as String, testFmtLocale as String\n    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;\n    testFmtPattern = &amp;quot;%B %d %Y %T %Z&amp;quot;\n    testFmtLocale = &amp;quot;C&amp;quot;\n    Set dtObj = dtParser.ParseISOString(testISOStr)\n    &amp;apos; Print Test Results\n    Print &amp;quot;DateTimeObject.toString(&amp;quot; &amp;amp; testFmtPattern &amp;amp; &amp;quot;, &amp;quot; &amp;amp; testFmtLocale &amp;amp; &amp;quot;) is &amp;quot; &amp;amp; dtObj.toString(testFmtPattern, testFmtLocale)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Format As String, Locale As String)","signature":"Function ToString(Format As String, Locale As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns this DateTimeObject as a string uses C/C++ formatting codes and locale.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns this DateTimeObject as a string uses C/C++ formatting codes and locale.","inlinecomment":" \t &apos; Returns this DateTimeObject as a string uses C/C++ formatting codes and locale.","parentclassname":"DateTimeObject","codesamplehtml":"    %REM &lt;br /&gt;        This checks the DateTimeObject toString() method. In this case,&lt;br /&gt;        It should print something like &amp;quot;DateTimeObject.toString(%B %d %Y %T %Z, C) is February 20 2023 20:49:13 UTC&amp;quot;&lt;br /&gt;    %END REM&lt;br /&gt;    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser&lt;br /&gt;    Dim testISOStr as String, testFmtPattern as String, testFmtLocale as String&lt;br /&gt;    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;&lt;br /&gt;    testFmtPattern = &amp;quot;%B %d %Y %T %Z&amp;quot;&lt;br /&gt;    testFmtLocale = &amp;quot;C&amp;quot;&lt;br /&gt;    Set dtObj = dtParser.ParseISOString(testISOStr)&lt;br /&gt;    &amp;apos; Print Test Results&lt;br /&gt;    Print &amp;quot;DateTimeObject.toString(&amp;quot; &amp;amp; testFmtPattern &amp;amp; &amp;quot;, &amp;quot; &amp;amp; testFmtLocale &amp;amp; &amp;quot;) is &amp;quot; &amp;amp; dtObj.toString(testFmtPattern, testFmtLocale)", "signatureelements":["Function"], "arguments":[{"label":"Format","comment":"Formatter comprising C/C++ format codes, see https://en.cppreference.com/w/c/chrono/strftime","valuetype":"String","filenamebase":"Format_ValuedElement","fqnprefix":"ZuluVSEDateTimeObjectToString","qn":"Format","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Formatter comprising C/C++ format codes, see https://en.cppreference.com/w/c/chrono/strftime&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Formatter comprising C/C++ format codes, see https://en.cppreference.com/w/c/chrono/strftime","inlinecomment":" \t &apos; Formatter comprising C/C++ format codes, see https://en.cppreference.com/w/c/chrono/strftime"},{"label":"Locale","comment":"Locale to return, e.g. fr_FR.UTF8. See https://saimana.com/list-of-country-locale-code/","valuetype":"String","filenamebase":"Locale_ValuedElement","fqnprefix":"ZuluVSEDateTimeObjectToString","qn":"Locale","argumentindex":2,"optionalvalue":"LIT_STR(&quot;&quot;)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Locale to return, e.g. fr_FR.UTF8. See https://saimana.com/list-of-country-locale-code/&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Locale to return, e.g. fr_FR.UTF8. See https://saimana.com/list-of-country-locale-code/","inlinecomment":" \t &apos; Locale to return, e.g. fr_FR.UTF8. See https://saimana.com/list-of-country-locale-code/", "attributes":["CONST","OPTIONAL"]}]},{"label":"Day","comment":"Day of the month portion of DateTimeObject","valuetype":"Integer-Unsigned","filenamebase":"Day_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"Get.Day","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Day As Integer","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Day of the month portion of DateTimeObject&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Day of the month portion of DateTimeObject","inlinecomment":" \t &apos; Day of the month portion of DateTimeObject","parentclassname":"DateTimeObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"DefaultFormat","comment":"","valuetype":"String","filenamebase":"DefaultFormat_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"Get.DefaultFormat","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get DefaultFormat As String","modifiers":"Get","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"DateTimeObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"EpochTime","comment":"Milliseconds from Jan 1 1970 midnight UTC","valuetype":"Long-Unsigned","filenamebase":"EpochTime_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"Get.EpochTime","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get EpochTime As Long","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Milliseconds from Jan 1 1970 midnight UTC&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Milliseconds from Jan 1 1970 midnight UTC","inlinecomment":" \t &apos; Milliseconds from Jan 1 1970 midnight UTC","parentclassname":"DateTimeObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"EpochTimeMS","comment":"epoch time in milliseconds","valuetype":"Double","filenamebase":"EpochTimeMS_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"Get.EpochTimeMS","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get EpochTimeMS As Double","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;epoch time in milliseconds&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"epoch time in milliseconds","inlinecomment":" \t &apos; epoch time in milliseconds","parentclassname":"DateTimeObject","codesamplehtml":"", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Hours","comment":"Hour of the day portion of DateTimeObject","valuetype":"Integer-Unsigned","filenamebase":"Hours_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"Get.Hours","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Hours As Integer","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Hour of the day portion of DateTimeObject&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Hour of the day portion of DateTimeObject","inlinecomment":" \t &apos; Hour of the day portion of DateTimeObject","parentclassname":"DateTimeObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"Minutes","comment":"Minute of the day portion of DateTimeObject","valuetype":"Integer-Unsigned","filenamebase":"Minutes_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"Get.Minutes","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Minutes As Integer","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Minute of the day portion of DateTimeObject&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Minute of the day portion of DateTimeObject","inlinecomment":" \t &apos; Minute of the day portion of DateTimeObject","parentclassname":"DateTimeObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"Month","comment":"Month of the year portion of DateTimeObject","valuetype":"Integer-Unsigned","filenamebase":"Month_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"Get.Month","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Month As Integer","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Month of the year portion of DateTimeObject&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Month of the year portion of DateTimeObject","inlinecomment":" \t &apos; Month of the year portion of DateTimeObject","parentclassname":"DateTimeObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"Seconds","comment":"Seconds of the minute portion of DateTimeObject","valuetype":"Integer-Unsigned","filenamebase":"Seconds_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"Get.Seconds","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Seconds As Integer","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Seconds of the minute portion of DateTimeObject&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Seconds of the minute portion of DateTimeObject","inlinecomment":" \t &apos; Seconds of the minute portion of DateTimeObject","parentclassname":"DateTimeObject","codesamplehtml":"", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Year","comment":"Year portion of DateTimeObject","valuetype":"Integer-Unsigned","filenamebase":"Year_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"Get.Year","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Year As Integer","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Year portion of DateTimeObject&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Year portion of DateTimeObject","inlinecomment":" \t &apos; Year portion of DateTimeObject","parentclassname":"DateTimeObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]}]}
