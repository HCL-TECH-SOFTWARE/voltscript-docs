{"classname":"Map","comment":"Map class","valuetype":"","filenamebase":"Map_ObjectClass","fqnprefix":"VoltScriptCollections","qn":"Map","codesample":"%REM\nThe following code filters out values that are odd numbers\n%END REM\nClass EvenFilter as MapFilter\n    Function filter(kvPair as Pair) as Boolean\n        Dim value as Integer\n        value = kvPair.value\n        Return value Mod 2 = 0\n    End Function\nEnd Class\nDim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim ef as New EvenFilter\nDim map2 as Map\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nSet map2 = map.filter(ef)\nPrint map2.elementCount","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"FD17E29641C6117580258994003AF3B0","version":3,"classid":"A475383223E512AF802589940051489B","signature":"Public Class Map","modifiers":"Public","classname":"Map","parentclassname":"None","constructorsignature":"Public Sub New(contentType As String, keyComparator As Comparator, isSorted As Boolean)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Map class&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Map class","inlinecomment":" \t &apos; Map class","codesamplehtml":"%REM&lt;br /&gt;The following code filters out values that are odd numbers&lt;br /&gt;%END REM&lt;br /&gt;Class EvenFilter as MapFilter&lt;br /&gt;    Function filter(kvPair as Pair) as Boolean&lt;br /&gt;        Dim value as Integer&lt;br /&gt;        value = kvPair.value&lt;br /&gt;        Return value Mod 2 = 0&lt;br /&gt;    End Function&lt;br /&gt;End Class&lt;br /&gt;Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim ef as New EvenFilter&lt;br /&gt;Dim map2 as Map&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Set map2 = map.filter(ef)&lt;br /&gt;Print map2.elementCount", "methods":[{"label":"clone","comment":"Creates a clone of the Map.","valuetype":"Map","filenamebase":"clone_Method","fqnprefix":"VoltScriptCollections.Map","qn":"clone","codesample":"Dim map1 as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)\nDim map2 as Map\nCall map1.put(&amp;quot;Hello&amp;quot;,&amp;quot;World&amp;quot;)\nSet map2 = map1.clone()","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function clone() As Map","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a clone of the Map.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a clone of the Map.","inlinecomment":" \t &apos; Creates a clone of the Map.","parentclassname":"Map","codesamplehtml":"Dim map1 as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)&lt;br /&gt;Dim map2 as Map&lt;br /&gt;Call map1.put(&amp;quot;Hello&amp;quot;,&amp;quot;World&amp;quot;)&lt;br /&gt;Set map2 = map1.clone()", "signatureelements":["Public","Function"]},{"label":"collectKeys","comment":"Returns a clone of the keys in this Map.","valuetype":"Collection","filenamebase":"collectKeys_Method","fqnprefix":"VoltScriptCollections.Map","qn":"collectKeys","codesample":"%REM\nThe following code creates a Map of US state abbreviations and full names. If a list of only abbreviations is needed for another purpose, collectKeys() can be used to quickly get it.\n%END REM\nDim map as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)\nDim coll as Collection\nCall map.add(&amp;quot;CO&amp;quot;,&amp;quot;Colorado&amp;quot;)\nCall map.add(&amp;quot;CA&amp;quot;,&amp;quot;California&amp;quot;)\nSet coll = map.collectKeys()","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function collectKeys() As Collection","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns a clone of the keys in this Map.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns a clone of the keys in this Map.","inlinecomment":" \t &apos; Returns a clone of the keys in this Map.","parentclassname":"Map","codesamplehtml":"%REM&lt;br /&gt;The following code creates a Map of US state abbreviations and full names. If a list of only abbreviations is needed for another purpose, collectKeys() can be used to quickly get it.&lt;br /&gt;%END REM&lt;br /&gt;Dim map as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)&lt;br /&gt;Dim coll as Collection&lt;br /&gt;Call map.add(&amp;quot;CO&amp;quot;,&amp;quot;Colorado&amp;quot;)&lt;br /&gt;Call map.add(&amp;quot;CA&amp;quot;,&amp;quot;California&amp;quot;)&lt;br /&gt;Set coll = map.collectKeys()", "signatureelements":["Public","Function"]},{"label":"collectValues","comment":"Loads the values from this Map into the passed Collection.","valuetype":"Collection","filenamebase":"collectValues_Method","fqnprefix":"VoltScriptCollections.Map","qn":"collectValues","codesample":"%REM\nThe following code creates a Map of US state abbreviations and full names. If a list of just state names sorted alphabetically is needed for another purpose, collectValues() can be used to get it.\n%END REM\nDim map as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)\nDim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, True)\nCall map.add(&amp;quot;CO&amp;quot;,&amp;quot;Colorado&amp;quot;)\nCall map.add(&amp;quot;CA&amp;quot;,&amp;quot;California&amp;quot;)\nCall map.collectValues(coll)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(targetColl As Collection)","signature":"Public Function collectValues(targetColl As Collection) As Collection","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Loads the values from this Map into the passed Collection.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Loads the values from this Map into the passed Collection.","inlinecomment":" \t &apos; Loads the values from this Map into the passed Collection.","parentclassname":"Map","codesamplehtml":"%REM&lt;br /&gt;The following code creates a Map of US state abbreviations and full names. If a list of just state names sorted alphabetically is needed for another purpose, collectValues() can be used to get it.&lt;br /&gt;%END REM&lt;br /&gt;Dim map as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)&lt;br /&gt;Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, True)&lt;br /&gt;Call map.add(&amp;quot;CO&amp;quot;,&amp;quot;Colorado&amp;quot;)&lt;br /&gt;Call map.add(&amp;quot;CA&amp;quot;,&amp;quot;California&amp;quot;)&lt;br /&gt;Call map.collectValues(coll)", "signatureelements":["Public","Function"], "arguments":[{"label":"targetColl","comment":"Collection into which to add the values from this Map","valuetype":"Collection","filenamebase":"targetColl_ValuedElement","fqnprefix":"VoltScriptCollectionsMapcollectValues","qn":"targetColl","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Collection into which to add the values from this Map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Collection into which to add the values from this Map","inlinecomment":" \t &apos; Collection into which to add the values from this Map"}]},{"label":"contains","comment":"Checks whether the Map contains a specific value.","valuetype":"Boolean","filenamebase":"contains_Method","fqnprefix":"VoltScriptCollections.Map","qn":"contains","codesample":"Dim map as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)\nDim compar as MatchingDataTypeComparator\nCall map.add(&amp;quot;CO&amp;quot;,&amp;quot;Colorado&amp;quot;)\nCall map.add(&amp;quot;CA&amp;quot;,&amp;quot;California&amp;quot;)\nPrint map.contains(&amp;quot;California&amp;quot;)          &amp;apos; Prints True\nPrint map.contains(&amp;quot;CALIFORNIA&amp;quot;)   &amp;apos; Prints False","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(checkValue As Variant, valueComparator As Comparator)","signature":"Public Function contains(checkValue As Variant, valueComparator As Comparator) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks whether the Map contains a specific value.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks whether the Map contains a specific value.","inlinecomment":" \t &apos; Checks whether the Map contains a specific value.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)&lt;br /&gt;Dim compar as MatchingDataTypeComparator&lt;br /&gt;Call map.add(&amp;quot;CO&amp;quot;,&amp;quot;Colorado&amp;quot;)&lt;br /&gt;Call map.add(&amp;quot;CA&amp;quot;,&amp;quot;California&amp;quot;)&lt;br /&gt;Print map.contains(&amp;quot;California&amp;quot;)          &amp;apos; Prints True&lt;br /&gt;Print map.contains(&amp;quot;CALIFORNIA&amp;quot;)   &amp;apos; Prints False", "signatureelements":["Public","Function"], "arguments":[{"label":"checkValue","comment":"Value to check for","valuetype":"Variant","filenamebase":"checkValue_ValuedElement","fqnprefix":"VoltScriptCollectionsMapcontains","qn":"checkValue","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value to check for&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value to check for","inlinecomment":" \t &apos; Value to check for"},{"label":"valueComparator","comment":"Comparator to use to check vale","valuetype":"Comparator","filenamebase":"valueComparator_ValuedElement","fqnprefix":"VoltScriptCollectionsMapcontains","qn":"valueComparator","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Comparator to use to check vale&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Comparator to use to check vale","inlinecomment":" \t &apos; Comparator to use to check vale"}]},{"label":"containsKey","comment":"Checks whether the Map contains a specific key.","valuetype":"Boolean","filenamebase":"containsKey_Method","fqnprefix":"VoltScriptCollections.Map","qn":"containsKey","codesample":"%REM\nThe following code creates a Map of US state abbreviations and full names. If a list of only abbreviations is needed for another purpose, collectKeys() can be used to quickly get it.\n%END REM\nDim map as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)\nCall map.add(&amp;quot;CO&amp;quot;,&amp;quot;Colorado&amp;quot;)\nCall map.add(&amp;quot;CA&amp;quot;,&amp;quot;California&amp;quot;)\nPrint map.contains(&amp;quot;CO&amp;quot;)      &amp;apos; Prints True\nPrint map.contains(&amp;quot;WA&amp;quot;)      &amp;apos; Prints False","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(keyVal As Variant)","signature":"Public Function containsKey(keyVal As Variant) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks whether the Map contains a specific key.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks whether the Map contains a specific key.","inlinecomment":" \t &apos; Checks whether the Map contains a specific key.","parentclassname":"Map","codesamplehtml":"%REM&lt;br /&gt;The following code creates a Map of US state abbreviations and full names. If a list of only abbreviations is needed for another purpose, collectKeys() can be used to quickly get it.&lt;br /&gt;%END REM&lt;br /&gt;Dim map as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)&lt;br /&gt;Call map.add(&amp;quot;CO&amp;quot;,&amp;quot;Colorado&amp;quot;)&lt;br /&gt;Call map.add(&amp;quot;CA&amp;quot;,&amp;quot;California&amp;quot;)&lt;br /&gt;Print map.contains(&amp;quot;CO&amp;quot;)      &amp;apos; Prints True&lt;br /&gt;Print map.contains(&amp;quot;WA&amp;quot;)      &amp;apos; Prints False", "signatureelements":["Public","Function"], "arguments":[{"label":"keyVal","comment":"Value to check for","valuetype":"Variant","filenamebase":"keyVal_ValuedElement","fqnprefix":"VoltScriptCollectionsMapcontainsKey","qn":"keyVal","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value to check for&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value to check for","inlinecomment":" \t &apos; Value to check for"}]},{"label":"filter","comment":"Filters a Map using a mapFilter and returns a new &amp;quot;filtered&amp;quot; Map.","valuetype":"Map","filenamebase":"filter_Method","fqnprefix":"VoltScriptCollections.Map","qn":"filter","codesample":"%REM\nThe following code filters out values that are odd numbers\n%END REM\nClass EvenFilter as MapFilter\n    Function filter(kvPair as Pair) as Boolean\n        Dim value as Integer\n        value = kvPair.value\n        Return value Mod 2 = 0\n    End Function\nEnd Class\nDim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim ef as New EvenFilter\nDim map2 as Map\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nSet map2 = map.filter(ef)\nPrint map2.elementCount","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(filterObj As MapFilter)","signature":"Public Function filter(filterObj As MapFilter) As Map","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Filters a Map using a mapFilter and returns a new &amp;quot;filtered&amp;quot; Map.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Filters a Map using a mapFilter and returns a new &amp;quot;filtered&amp;quot; Map.","inlinecomment":" \t &apos; Filters a Map using a mapFilter and returns a new &amp;quot;filtered&amp;quot; Map.","parentclassname":"Map","codesamplehtml":"%REM&lt;br /&gt;The following code filters out values that are odd numbers&lt;br /&gt;%END REM&lt;br /&gt;Class EvenFilter as MapFilter&lt;br /&gt;    Function filter(kvPair as Pair) as Boolean&lt;br /&gt;        Dim value as Integer&lt;br /&gt;        value = kvPair.value&lt;br /&gt;        Return value Mod 2 = 0&lt;br /&gt;    End Function&lt;br /&gt;End Class&lt;br /&gt;Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim ef as New EvenFilter&lt;br /&gt;Dim map2 as Map&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Set map2 = map.filter(ef)&lt;br /&gt;Print map2.elementCount", "signatureelements":["Public","Function"], "arguments":[{"label":"filterObj","comment":"Map filter to check each key and value with","valuetype":"MapFilter","filenamebase":"filterObj_ValuedElement","fqnprefix":"VoltScriptCollectionsMapfilter","qn":"filterObj","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Map filter to check each key and value with&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Map filter to check each key and value with","inlinecomment":" \t &apos; Map filter to check each key and value with"}]},{"label":"getAndRemoveFirstPair","comment":"Gets and removes the first key/value Pair.","valuetype":"Pair","filenamebase":"getAndRemoveFirstPair_Method","fqnprefix":"VoltScriptCollections.Map","qn":"getAndRemoveFirstPair","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim pair as Pair\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nSet pair = map.getAndRemoveFirstPair()\nPrint pair.value   &amp;apos; Prints 1","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function getAndRemoveFirstPair() As Pair","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets and removes the first key/value Pair.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets and removes the first key/value Pair.","inlinecomment":" \t &apos; Gets and removes the first key/value Pair.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim pair as Pair&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Set pair = map.getAndRemoveFirstPair()&lt;br /&gt;Print pair.value   &amp;apos; Prints 1", "signatureelements":["Public","Function"]},{"label":"getAndRemoveLastPair","comment":"Gets and removes the last key/value Pair","valuetype":"Pair","filenamebase":"getAndRemoveLastPair_Method","fqnprefix":"VoltScriptCollections.Map","qn":"getAndRemoveLastPair","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim pair as Pair\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nSet pair = map.getAndRemoveLastPair()\nPrint pair.value   &amp;apos; Prints 4","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function getAndRemoveLastPair() As Pair","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets and removes the last key/value Pair&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets and removes the last key/value Pair","inlinecomment":" \t &apos; Gets and removes the last key/value Pair","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim pair as Pair&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Set pair = map.getAndRemoveLastPair()&lt;br /&gt;Print pair.value   &amp;apos; Prints 4", "signatureelements":["Public","Function"]},{"label":"getNthKeyRaw","comment":"Returns the key at a particular index","valuetype":"Variant","filenamebase":"getNthKeyRaw_Method","fqnprefix":"VoltScriptCollections.Map","qn":"getNthKeyRaw","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nPrint CStr(map.getNthKey(2))    &amp;apos; Prints &amp;quot;Elem3&amp;quot;","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(index As Long)","signature":"Public Function getNthKeyRaw(index As Long) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns the key at a particular index&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns the key at a particular index","inlinecomment":" \t &apos; Returns the key at a particular index","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Print CStr(map.getNthKey(2))    &amp;apos; Prints &amp;quot;Elem3&amp;quot;", "signatureelements":["Public","Function"], "arguments":[{"label":"index","comment":"Index of key to get, starting at 0","valuetype":"Long","filenamebase":"index_ValuedElement","fqnprefix":"VoltScriptCollectionsMapgetNthKeyRaw","qn":"index","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Index of key to get, starting at 0&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Index of key to get, starting at 0","inlinecomment":" \t &apos; Index of key to get, starting at 0"}]},{"label":"getNthPair","comment":"Returns the element at the relevant index as a key/value Pair","valuetype":"Pair","filenamebase":"getNthPair_Method","fqnprefix":"VoltScriptCollections.Map","qn":"getNthPair","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim pair as Pair\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nSet pair = map.getNthPair(2)\nPrint &amp;quot;Third pair is &amp;quot; &amp;amp; pair.key &amp;amp; &amp;quot;, &amp;quot; &amp;amp; pair.value","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(index As Long)","signature":"Public Function getNthPair(index As Long) As Pair","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns the element at the relevant index as a key/value Pair&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns the element at the relevant index as a key/value Pair","inlinecomment":" \t &apos; Returns the element at the relevant index as a key/value Pair","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim pair as Pair&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Set pair = map.getNthPair(2)&lt;br /&gt;Print &amp;quot;Third pair is &amp;quot; &amp;amp; pair.key &amp;amp; &amp;quot;, &amp;quot; &amp;amp; pair.value", "signatureelements":["Public","Function"], "arguments":[{"label":"index","comment":"Index at which to find the element","valuetype":"Long","filenamebase":"index_ValuedElement","fqnprefix":"VoltScriptCollectionsMapgetNthPair","qn":"index","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Index at which to find the element&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Index at which to find the element","inlinecomment":" \t &apos; Index at which to find the element"}]},{"label":"getNthValueRaw","comment":"Gets the value at a particular index. If no matching value is found, the return type will depend on the content defined. If the Map contains objects, the return value is Nothing. If the Map contains scalars, the return value is an empty variant.","valuetype":"Variant","filenamebase":"getNthValueRaw_Method","fqnprefix":"VoltScriptCollections.Map","qn":"getNthValueRaw","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim returnVal as Integer\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nreturnVal = CInt(map.getNthElementRaw(2))\nPrint &amp;quot;Value is &amp;quot; &amp;amp; returnVal","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(index As Long)","signature":"Public Function getNthValueRaw(index As Long) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the value at a particular index. If no matching value is found, the return type will depend on the content defined. If the Map contains objects, the return value is Nothing. If the Map contains scalars, the return value is an empty variant.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the value at a particular index. If no matching value is found, the return type will depend on the content defined. If the Map contains objects, the return value is Nothing. If the Map contains scalars, the return value is an empty variant.","inlinecomment":" \t &apos; Gets the value at a particular index. If no matching value is found, the return type will depend on the content defined. If the Map contains objects, the return value is Nothing. If the Map contains scalars, the return value is an empty variant.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim returnVal as Integer&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;returnVal = CInt(map.getNthElementRaw(2))&lt;br /&gt;Print &amp;quot;Value is &amp;quot; &amp;amp; returnVal", "signatureelements":["Public","Function"], "arguments":[{"label":"index","comment":"Index of the value to get, starting at 0","valuetype":"Long","filenamebase":"index_ValuedElement","fqnprefix":"VoltScriptCollectionsMapgetNthValueRaw","qn":"index","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Index of the value to get, starting at 0&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Index of the value to get, starting at 0","inlinecomment":" \t &apos; Index of the value to get, starting at 0"}]},{"label":"getValueRawByKey","comment":"Gets a value from the Map for the passed key. If the Map contains objects, the return type is Nothing.\nIf the Map contains scalars, the return type is an empty variant.","valuetype":"Variant","filenamebase":"getValueRawByKey_Method","fqnprefix":"VoltScriptCollections.Map","qn":"getValueRawByKey","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim returnVal as Variant\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nreturnVal = map.getValueRawByKey(&amp;quot;Elem3&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(keyVal As Variant)","signature":"Public Function getValueRawByKey(keyVal As Variant) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets a value from the Map for the passed key. If the Map contains objects, the return type is Nothing.&lt;br /&gt;If the Map contains scalars, the return type is an empty variant.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets a value from the Map for the passed key. If the Map contains objects, the return type is Nothing.&lt;br /&gt;If the Map contains scalars, the return type is an empty variant.","inlinecomment":" \t &apos; Gets a value from the Map for the passed key. If the Map contains objects, the return type is Nothing.\nIf the Map contains scalars, the return type is an empty variant.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim returnVal as Variant&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;returnVal = map.getValueRawByKey(&amp;quot;Elem3&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"keyVal","comment":"Key of value to get","valuetype":"Variant","filenamebase":"keyVal_ValuedElement","fqnprefix":"VoltScriptCollectionsMapgetValueRawByKey","qn":"keyVal","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Key of value to get&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Key of value to get","inlinecomment":" \t &apos; Key of value to get"}]},{"label":"put","comment":"Puta an element in the Map.","valuetype":"Long","filenamebase":"put_Method","fqnprefix":"VoltScriptCollections.Map","qn":"put","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(key As Variant, value As Variant)","signature":"Public Function put(key As Variant, value As Variant) As Long","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Puta an element in the Map.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Puta an element in the Map.","inlinecomment":" \t &apos; Puta an element in the Map.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)", "signatureelements":["Public","Function"], "arguments":[{"label":"key","comment":"Scalar value to use as the key","valuetype":"Variant","filenamebase":"key_ValuedElement","fqnprefix":"VoltScriptCollectionsMapput","qn":"key","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Scalar value to use as the key&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Scalar value to use as the key","inlinecomment":" \t &apos; Scalar value to use as the key"},{"label":"value","comment":"Value to put into the Map","valuetype":"Variant","filenamebase":"value_ValuedElement","fqnprefix":"VoltScriptCollectionsMapput","qn":"value","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value to put into the Map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value to put into the Map","inlinecomment":" \t &apos; Value to put into the Map"}]},{"label":"putAll","comment":"Puts all entries from a Map into this map","valuetype":"Map","filenamebase":"putAll_Method","fqnprefix":"VoltScriptCollections.Map","qn":"putAll","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim map2 as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map2.putAll(map)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Map)","signature":"Public Function putAll(source As Map) As Map","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Puts all entries from a Map into this map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Puts all entries from a Map into this map","inlinecomment":" \t &apos; Puts all entries from a Map into this map","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim map2 as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map2.putAll(map)", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Map to copy into this Map","valuetype":"Map","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptCollectionsMapputAll","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Map to copy into this Map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Map to copy into this Map","inlinecomment":" \t &apos; Map to copy into this Map"}]},{"label":"putPair","comment":"Puts a Pair into the Map, using key as the key and value as the Value.","valuetype":"Long","filenamebase":"putPair_Method","fqnprefix":"VoltScriptCollections.Map","qn":"putPair","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim pair as New Pair(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.putPair(pair)","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(content As Pair)","signature":"Public Function putPair(content As Pair) As Long","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Puts a Pair into the Map, using key as the key and value as the Value.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Puts a Pair into the Map, using key as the key and value as the Value.","inlinecomment":" \t &apos; Puts a Pair into the Map, using key as the key and value as the Value.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim pair as New Pair(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.putPair(pair)", "signatureelements":["Public","Function"], "arguments":[{"label":"content","comment":"Pair to insert","valuetype":"Pair","filenamebase":"content_ValuedElement","fqnprefix":"VoltScriptCollectionsMapputPair","qn":"content","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Pair to insert&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Pair to insert","inlinecomment":" \t &apos; Pair to insert"}]},{"label":"removeByKey","comment":"Removes an element from the Map based on its key.","valuetype":"Boolean","filenamebase":"removeByKey_Method","fqnprefix":"VoltScriptCollections.Map","qn":"removeByKey","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nSet map2 = map.removeByKey(&amp;quot;Elem1&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(keyVal As Variant)","signature":"Public Function removeByKey(keyVal As Variant) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Removes an element from the Map based on its key.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Removes an element from the Map based on its key.","inlinecomment":" \t &apos; Removes an element from the Map based on its key.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Set map2 = map.removeByKey(&amp;quot;Elem1&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"keyVal","comment":"Key of element to remove","valuetype":"Variant","filenamebase":"keyVal_ValuedElement","fqnprefix":"VoltScriptCollectionsMapremoveByKey","qn":"keyVal","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Key of element to remove&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Key of element to remove","inlinecomment":" \t &apos; Key of element to remove"}]},{"label":"removeByValue","comment":"Removes a value or values from the Map","valuetype":"Boolean","filenamebase":"removeByValue_Method","fqnprefix":"VoltScriptCollections.Map","qn":"removeByValue","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim comparator as MatchingDataTypeComparator\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 2)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nCall map.put(&amp;quot;Elem3&amp;quot;, 2)\nCall map.removeByValue(2, False, comparator)\nPrint map.elementCount       &amp;apos; Prints 4\nCall map.removeByValue(2, True, comparator)\nPrint map.elementCount       &amp;apos; Prints 2","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(value As Variant, allMatches As Boolean, valueComparator As Comparator)","signature":"Public Function removeByValue(value As Variant, allMatches As Boolean, valueComparator As Comparator) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Removes a value or values from the Map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Removes a value or values from the Map","inlinecomment":" \t &apos; Removes a value or values from the Map","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim comparator as MatchingDataTypeComparator&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 2)&lt;br /&gt;Call map.removeByValue(2, False, comparator)&lt;br /&gt;Print map.elementCount       &amp;apos; Prints 4&lt;br /&gt;Call map.removeByValue(2, True, comparator)&lt;br /&gt;Print map.elementCount       &amp;apos; Prints 2", "signatureelements":["Public","Function"], "arguments":[{"label":"value","comment":"Value to remove","valuetype":"Variant","filenamebase":"value_ValuedElement","fqnprefix":"VoltScriptCollectionsMapremoveByValue","qn":"value","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value to remove&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value to remove","inlinecomment":" \t &apos; Value to remove"},{"label":"allMatches","comment":"Whether to remove all matches or just the first match","valuetype":"Boolean","filenamebase":"allMatches_ValuedElement","fqnprefix":"VoltScriptCollectionsMapremoveByValue","qn":"allMatches","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether to remove all matches or just the first match&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether to remove all matches or just the first match","inlinecomment":" \t &apos; Whether to remove all matches or just the first match"},{"label":"valueComparator","comment":"Comparator to use to check value","valuetype":"Comparator","filenamebase":"valueComparator_ValuedElement","fqnprefix":"VoltScriptCollectionsMapremoveByValue","qn":"valueComparator","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Comparator to use to check value&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Comparator to use to check value","inlinecomment":" \t &apos; Comparator to use to check value"}]},{"label":"toJson","comment":"Converts the Map to a JsonObject. If the values are objects, the code will try to call a toJson method on the object, otherwise skip them.","valuetype":"JsonObject","filenamebase":"toJson_Method","fqnprefix":"VoltScriptCollections.Map","qn":"toJson","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim jsonObj as jsonObject\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nSet jsonObj = map.toJson()\nPrint jsonObj.toString(false)       &amp;apos; Prints {&amp;quot;Elem1&amp;quot;:1,&amp;quot;Elem2&amp;quot;:2,&amp;quot;Elem3&amp;quot;:3,&amp;quot;Elem4&amp;quot;:4}","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function toJson() As JsonObject","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Converts the Map to a JsonObject. If the values are objects, the code will try to call a toJson method on the object, otherwise skip them.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Converts the Map to a JsonObject. If the values are objects, the code will try to call a toJson method on the object, otherwise skip them.","inlinecomment":" \t &apos; Converts the Map to a JsonObject. If the values are objects, the code will try to call a toJson method on the object, otherwise skip them.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim jsonObj as jsonObject&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Set jsonObj = map.toJson()&lt;br /&gt;Print jsonObj.toString(false)       &amp;apos; Prints {&amp;quot;Elem1&amp;quot;:1,&amp;quot;Elem2&amp;quot;:2,&amp;quot;Elem3&amp;quot;:3,&amp;quot;Elem4&amp;quot;:4}", "signatureelements":["Public","Function"]},{"label":"comparator","comment":"Comparator to compare keys with.","valuetype":"Comparator","filenamebase":"comparator_Method","fqnprefix":"VoltScriptCollections.Map","qn":"Get.comparator","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get comparator As Comparator","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Comparator to compare keys with.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Comparator to compare keys with.","inlinecomment":" \t &apos; Comparator to compare keys with.","parentclassname":"Map","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"contentType","comment":"Content-Type of values within the map","valuetype":"String","filenamebase":"contentType_Method","fqnprefix":"VoltScriptCollections.Map","qn":"Get.contentType","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get contentType As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Content-Type of values within the map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Content-Type of values within the map","inlinecomment":" \t &apos; Content-Type of values within the map","parentclassname":"Map","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"elementCount","comment":"Number of elements in the map","valuetype":"Long","filenamebase":"elementCount_Method","fqnprefix":"VoltScriptCollections.Map","qn":"Get.elementCount","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get elementCount As Long","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Number of elements in the map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Number of elements in the map","inlinecomment":" \t &apos; Number of elements in the map","parentclassname":"Map","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"hasContent","comment":"Flag indicating if the Map has elements","valuetype":"Boolean","filenamebase":"hasContent_Method","fqnprefix":"VoltScriptCollections.Map","qn":"Get.hasContent","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get hasContent As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the Map has elements&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the Map has elements","inlinecomment":" \t &apos; Flag indicating if the Map has elements","parentclassname":"Map","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"isLocked","comment":"Flag indicating if the Map is locked","valuetype":"Boolean","filenamebase":"isLocked_Method","fqnprefix":"VoltScriptCollections.Map","qn":"Get.isLocked","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isLocked As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the Map is locked&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the Map is locked","inlinecomment":" \t &apos; Flag indicating if the Map is locked","parentclassname":"Map","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"isSorted","comment":"Flag indicating if the Map&amp;apos;s keys are sorted","valuetype":"Boolean","filenamebase":"isSorted_Method","fqnprefix":"VoltScriptCollections.Map","qn":"Get.isSorted","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isSorted As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the Map&amp;apos;s keys are sorted&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the Map&amp;apos;s keys are sorted","inlinecomment":" \t &apos; Flag indicating if the Map&amp;apos;s keys are sorted","parentclassname":"Map","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"suppressErrors","comment":"Suppress errors on adding or inserting elements. Errors wll still be thrown if the Map is locked\nor attempting to putting an element at an index into a sorted Map.\nInstead of throwing an error, e.g. for wrong content type, the method will just return false","valuetype":"Boolean","filenamebase":"suppressErrors_Method","fqnprefix":"VoltScriptCollections.Map","qn":"Get.suppressErrors","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get suppressErrors As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Suppress errors on adding or inserting elements. Errors wll still be thrown if the Map is locked&lt;br /&gt;or attempting to putting an element at an index into a sorted Map.&lt;br /&gt;Instead of throwing an error, e.g. for wrong content type, the method will just return false&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Suppress errors on adding or inserting elements. Errors wll still be thrown if the Map is locked&lt;br /&gt;or attempting to putting an element at an index into a sorted Map.&lt;br /&gt;Instead of throwing an error, e.g. for wrong content type, the method will just return false","inlinecomment":" \t &apos; Suppress errors on adding or inserting elements. Errors wll still be thrown if the Map is locked\nor attempting to putting an element at an index into a sorted Map.\nInstead of throwing an error, e.g. for wrong content type, the method will just return false","parentclassname":"Map","codesamplehtml":"", "signatureelements":["Public","Property","Get"]},{"label":"suppressErrors","comment":"Suppress errors on adding or inserting elements. Errors wll still be thrown if the Map is locked\nor attempting to putting an element at an index into a sorted Map.\nInstead of throwing an error, e.g. for wrong content type, the method will just return false","valuetype":"Boolean","filenamebase":"suppressErrors_Method","fqnprefix":"VoltScriptCollections.Map","qn":"Set.suppressErrors","codesample":"","signaturecode":2308,"instancecode":256,"argumentsuffix":"","signature":"Public Property Set suppressErrors As Boolean","modifiers":"Public Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Suppress errors on adding or inserting elements. Errors wll still be thrown if the Map is locked&lt;br /&gt;or attempting to putting an element at an index into a sorted Map.&lt;br /&gt;Instead of throwing an error, e.g. for wrong content type, the method will just return false&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Suppress errors on adding or inserting elements. Errors wll still be thrown if the Map is locked&lt;br /&gt;or attempting to putting an element at an index into a sorted Map.&lt;br /&gt;Instead of throwing an error, e.g. for wrong content type, the method will just return false","inlinecomment":" \t &apos; Suppress errors on adding or inserting elements. Errors wll still be thrown if the Map is locked\nor attempting to putting an element at an index into a sorted Map.\nInstead of throwing an error, e.g. for wrong content type, the method will just return false","parentclassname":"Map","codesamplehtml":"", "signatureelements":["Public","Property","Set"]},{"label":"clear","comment":"Removes all keys and values from the Map and resets whether the keyset is reversed.","valuetype":"","filenamebase":"clear_Method","fqnprefix":"VoltScriptCollections.Map","qn":"clear","codesample":"Dim map as New Map(&amp;quot;STRING&amp;quot;,Nothing,False)\nCall map.put(&amp;quot;Hello&amp;quot;,&amp;quot;World&amp;quot;)\nPrint map.hasContent    &amp;apos; Prints True\nCall map.clear()\nPrint map.hasContent    &amp;apos; Prints False","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub clear()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Removes all keys and values from the Map and resets whether the keyset is reversed.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Removes all keys and values from the Map and resets whether the keyset is reversed.","inlinecomment":" \t &apos; Removes all keys and values from the Map and resets whether the keyset is reversed.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;STRING&amp;quot;,Nothing,False)&lt;br /&gt;Call map.put(&amp;quot;Hello&amp;quot;,&amp;quot;World&amp;quot;)&lt;br /&gt;Print map.hasContent    &amp;apos; Prints True&lt;br /&gt;Call map.clear()&lt;br /&gt;Print map.hasContent    &amp;apos; Prints False", "signatureelements":["Public","Sub"]},{"label":"fromJson","comment":"Loads a JsonObject that contains an object of scalars into the Map","valuetype":"","filenamebase":"fromJson_Method","fqnprefix":"VoltScriptCollections.Map","qn":"fromJson","codesample":"Dim map as New Map(&amp;quot;SCALAR&amp;quot;, Nothing, False)\nDim parser as New JsonParser()\nCall parser.loadFromJson(|{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42}|)\nCall map.fromJson(parser.getRootObject())","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(jsonObj As JsonObject)","signature":"Public Sub fromJson(jsonObj As JsonObject)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Loads a JsonObject that contains an object of scalars into the Map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Loads a JsonObject that contains an object of scalars into the Map","inlinecomment":" \t &apos; Loads a JsonObject that contains an object of scalars into the Map","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;SCALAR&amp;quot;, Nothing, False)&lt;br /&gt;Dim parser as New JsonParser()&lt;br /&gt;Call parser.loadFromJson(|{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42}|)&lt;br /&gt;Call map.fromJson(parser.getRootObject())", "signatureelements":["Public","Sub"], "arguments":[{"label":"jsonObj","comment":"JsonObject to put in the map","valuetype":"JsonObject","filenamebase":"jsonObj_ValuedElement","fqnprefix":"VoltScriptCollectionsMapfromJson","qn":"jsonObj","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JsonObject to put in the map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JsonObject to put in the map","inlinecomment":" \t &apos; JsonObject to put in the map"}]},{"label":"lock","comment":"Locks the map, so any put, remove, replace or reverse fiunctions trigger errors. Useful when passing a Map to other functions.","valuetype":"","filenamebase":"lock_Method","fqnprefix":"VoltScriptCollections.Map","qn":"lock","codesample":"%REM\nThe following code throws error 403, &amp;quot;Map is locked&amp;quot; on the final line\n%END REM\nDim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.lock()\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub lock()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Locks the map, so any put, remove, replace or reverse fiunctions trigger errors. Useful when passing a Map to other functions.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Locks the map, so any put, remove, replace or reverse fiunctions trigger errors. Useful when passing a Map to other functions.","inlinecomment":" \t &apos; Locks the map, so any put, remove, replace or reverse fiunctions trigger errors. Useful when passing a Map to other functions.","parentclassname":"Map","codesamplehtml":"%REM&lt;br /&gt;The following code throws error 403, &amp;quot;Map is locked&amp;quot; on the final line&lt;br /&gt;%END REM&lt;br /&gt;Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.lock()&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)", "signatureelements":["Public","Sub"]},{"label":"New","comment":"Constructor","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptCollections.Map","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(contentType As String, keyComparator As Comparator, isSorted As Boolean)","signature":"Public Sub New(contentType As String, keyComparator As Comparator, isSorted As Boolean)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor","inlinecomment":" \t &apos; Constructor","parentclassname":"Map","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"contentType","comment":"Defines the Content Type of the values in the Map","valuetype":"String","filenamebase":"contentType_ValuedElement","fqnprefix":"VoltScriptCollectionsMapNew","qn":"contentType","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Defines the Content Type of the values in the Map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Defines the Content Type of the values in the Map","inlinecomment":" \t &apos; Defines the Content Type of the values in the Map"},{"label":"keyComparator","comment":"Comparator to determine order of keys","valuetype":"Comparator","filenamebase":"keyComparator_ValuedElement","fqnprefix":"VoltScriptCollectionsMapNew","qn":"keyComparator","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Comparator to determine order of keys&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Comparator to determine order of keys","inlinecomment":" \t &apos; Comparator to determine order of keys"},{"label":"isSorted","comment":"Flag indicating if the keys within the Map shall be sorted","valuetype":"Boolean","filenamebase":"isSorted_ValuedElement","fqnprefix":"VoltScriptCollectionsMapNew","qn":"isSorted","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the keys within the Map shall be sorted&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the keys within the Map shall be sorted","inlinecomment":" \t &apos; Flag indicating if the keys within the Map shall be sorted"}]},{"label":"reverse","comment":"Reverses the keySet colection of a Map.","valuetype":"","filenamebase":"reverse_Method","fqnprefix":"VoltScriptCollections.Map","qn":"reverse","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nCall map.reverse()\nPrint map.getNthKeyRaw(0)     &amp;apos; Prints &amp;quot;Elem4&amp;quot;","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub reverse()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Reverses the keySet colection of a Map.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Reverses the keySet colection of a Map.","inlinecomment":" \t &apos; Reverses the keySet colection of a Map.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Call map.reverse()&lt;br /&gt;Print map.getNthKeyRaw(0)     &amp;apos; Prints &amp;quot;Elem4&amp;quot;", "signatureelements":["Public","Sub"]},{"label":"transform","comment":"Transforms members of this Map usig a MapTransformer and adds them to the new Map passed.","valuetype":"","filenamebase":"transform_Method","fqnprefix":"VoltScriptCollections.Map","qn":"transform","codesample":"%REM\nThe following code swaps key and value over\n%END REM\nClass SwapTransformer as MapTransformer\n    Function transform(kvPair as Pair) as Pair\n        Return new pair(kvPair.value, kvPair.key)\n    End Function\nEnd Class\nDim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim map2 as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)\nDim transformer as New SwapTransformer()\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nCall map.transform(transformer, map2)\nPrint CStr(map2.getNthKeyRaw(0))      &amp;apos; Prints 1","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(transformer As MapTransformer, newMap As Map)","signature":"Public Sub transform(transformer As MapTransformer, newMap As Map)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Transforms members of this Map usig a MapTransformer and adds them to the new Map passed.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Transforms members of this Map usig a MapTransformer and adds them to the new Map passed.","inlinecomment":" \t &apos; Transforms members of this Map usig a MapTransformer and adds them to the new Map passed.","parentclassname":"Map","codesamplehtml":"%REM&lt;br /&gt;The following code swaps key and value over&lt;br /&gt;%END REM&lt;br /&gt;Class SwapTransformer as MapTransformer&lt;br /&gt;    Function transform(kvPair as Pair) as Pair&lt;br /&gt;        Return new pair(kvPair.value, kvPair.key)&lt;br /&gt;    End Function&lt;br /&gt;End Class&lt;br /&gt;Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim map2 as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)&lt;br /&gt;Dim transformer as New SwapTransformer()&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Call map.transform(transformer, map2)&lt;br /&gt;Print CStr(map2.getNthKeyRaw(0))      &amp;apos; Prints 1", "signatureelements":["Public","Sub"], "arguments":[{"label":"transformer","comment":"MapTrasformer to transform members","valuetype":"MapTransformer","filenamebase":"transformer_ValuedElement","fqnprefix":"VoltScriptCollectionsMaptransform","qn":"transformer","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;MapTrasformer to transform members&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"MapTrasformer to transform members","inlinecomment":" \t &apos; MapTrasformer to transform members"},{"label":"newMap","comment":"Map to load transformed members into","valuetype":"Map","filenamebase":"newMap_ValuedElement","fqnprefix":"VoltScriptCollectionsMaptransform","qn":"newMap","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Map to load transformed members into&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Map to load transformed members into","inlinecomment":" \t &apos; Map to load transformed members into"}]},{"label":"unlock","comment":"Unlocks the Map, so put, remove, replace and reverse functions can be used again","valuetype":"","filenamebase":"unlock_Method","fqnprefix":"VoltScriptCollections.Map","qn":"unlock","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.lock()\nTry\n    Call map.put(&amp;quot;Elem4&amp;quot;, 4)\nCatch\n    If Err = 403 Then Print &amp;quot;Map was locked&amp;quot;\nEnd Try\nCall map.unlock()\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)    &amp;apos; Successful","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub unlock()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Unlocks the Map, so put, remove, replace and reverse functions can be used again&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Unlocks the Map, so put, remove, replace and reverse functions can be used again","inlinecomment":" \t &apos; Unlocks the Map, so put, remove, replace and reverse functions can be used again","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.lock()&lt;br /&gt;Try&lt;br /&gt;    Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Catch&lt;br /&gt;    If Err = 403 Then Print &amp;quot;Map was locked&amp;quot;&lt;br /&gt;End Try&lt;br /&gt;Call map.unlock()&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)    &amp;apos; Successful", "signatureelements":["Public","Sub"]}]}
