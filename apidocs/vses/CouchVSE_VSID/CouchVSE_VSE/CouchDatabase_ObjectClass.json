{"classname":"CouchDatabase","comment":"Represents a CouchDB Database \n \nCreation - Use the CouchServer.CreateDb() method \nRetrieval - Use the CouchServer.GetDb() method \nDeletion - Use the CouchServer.DeleteDb() method","valuetype":"","filenamebase":"CouchDatabase_ObjectClass","fqnprefix":"CouchVSE","qn":"CouchDatabase","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","classattribnewnotexposed":"UnexposedNew","projectid":"85258A0A005BFF7B85258714004ECA02","version":3,"classid":"85258A0A005BFF7B8525871500367271","lsxclassid":3,"signature":"Public Class CouchDatabase","modifiers":"Public","classname":"CouchDatabase","parentclassname":"None","constructorsignature":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Represents a CouchDB Database &lt;br /&gt; &lt;br /&gt;Creation - Use the CouchServer.CreateDb() method &lt;br /&gt;Retrieval - Use the CouchServer.GetDb() method &lt;br /&gt;Deletion - Use the CouchServer.DeleteDb() method&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Represents a CouchDB Database &lt;br /&gt; &lt;br /&gt;Creation - Use the CouchServer.CreateDb() method &lt;br /&gt;Retrieval - Use the CouchServer.GetDb() method &lt;br /&gt;Deletion - Use the CouchServer.DeleteDb() method","inlinecomment":" \t &apos; Represents a CouchDB Database \n \nCreation - Use the CouchServer.CreateDb() method \nRetrieval - Use the CouchServer.GetDb() method \nDeletion - Use the CouchServer.DeleteDb() method","codesamplehtml":"", "methods":[{"label":"CreateAgent","comment":"Creates a CouchAgent in the specified CouchDatabase","valuetype":"CouchAgent","filenamebase":"CreateAgent_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"CreateAgent","codesample":"Function getCouchDbAgent(source As CouchDatabase, agentname As String, spawnnew As Boolean) As CouchAgent\n \n    Try \n        If source.isAgent(agentname) Then \n            Return source.getAgent(agentname) \n        ElseIf spawnnew Then \n            Return source.createAgent(agentname)\n        End If     \n    Catch \n        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() \n        Print |spawnnew: | &amp;amp; spawnnew \n        Print |agentname: | &amp;amp; agentname \n        Print |source: | &amp;amp; source.Name \n    End Try \n \nEnd Function","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String)","signature":"Function CreateAgent(Name As String) As CouchAgent","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a CouchAgent in the specified CouchDatabase&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a CouchAgent in the specified CouchDatabase","inlinecomment":" \t &apos; Creates a CouchAgent in the specified CouchDatabase","parentclassname":"CouchDatabase","codesamplehtml":"Function getCouchDbAgent(source As CouchDatabase, agentname As String, spawnnew As Boolean) As CouchAgent&lt;br /&gt; &lt;br /&gt;    Try &lt;br /&gt;        If source.isAgent(agentname) Then &lt;br /&gt;            Return source.getAgent(agentname) &lt;br /&gt;        ElseIf spawnnew Then &lt;br /&gt;            Return source.createAgent(agentname)&lt;br /&gt;        End If     &lt;br /&gt;    Catch &lt;br /&gt;        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() &lt;br /&gt;        Print |spawnnew: | &amp;amp; spawnnew &lt;br /&gt;        Print |agentname: | &amp;amp; agentname &lt;br /&gt;        Print |source: | &amp;amp; source.Name &lt;br /&gt;    End Try &lt;br /&gt; &lt;br /&gt;End Function", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"Name of the CouchAgent to be created","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchDatabaseCreateAgent","qn":"Name","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the CouchAgent to be created&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the CouchAgent to be created","inlinecomment":" \t &apos; Name of the CouchAgent to be created"}]},{"label":"CreateDocument","comment":"Creates a new CouchDocument","valuetype":"CouchDocument","filenamebase":"CreateDocument_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"CreateDocument","codesample":"&amp;apos; Sample code assumes previously created server as CouchServer and database as CouchDatabase objects\n  \n    Dim document As CouchDocument \n    Dim id As String \n    Dim json As String \n \n    id = server.getUUID() \n    json = |{\n            &amp;quot;recipe&amp;quot;: {\n                &amp;quot;name&amp;quot;: &amp;quot;Watermelon Salad&amp;quot;,\n                &amp;quot;PrepTime&amp;quot;: 15,\n                &amp;quot;CookTime&amp;quot;: 5,\n                &amp;quot;Servings&amp;quot;: 4,\n                &amp;quot;Difficulty&amp;quot;: &amp;quot;&amp;quot;,\n                &amp;quot;Ingredients&amp;quot;: [\n                    &amp;quot;6 cups cubed watermelon&amp;quot;,\n                    &amp;quot;2 tbsp. olive oil&amp;quot;,\n                    &amp;quot;1 tbsp. lime juice&amp;quot;,\n                    &amp;quot;1/3 cup chopped feta cheese&amp;quot;,\n                    &amp;quot;1/3 cup basil leaves&amp;quot;\n                ],\n                &amp;quot;Directions&amp;quot;: [\n                    &amp;quot;Cube 6 cups of watermelon&amp;quot;,\n                    &amp;quot;Stir in olive oil and lime juice&amp;quot;,\n                    &amp;quot;Chop, and stir in feta cheese&amp;quot;,\n                    &amp;quot;Garnish with fresh basil&amp;quot;\n                ]\n            }\n        }|\n     \n    Set document = database.createDocument(id, json) \n    Print |Created Document|\n    Print |document.ID: | &amp;amp; document.ID\n    Print |document.isModified: | &amp;amp; document.isModified\n    Print |document.isSaved: | &amp;amp; document.isSaved\n    Print |document.JSONValue: | &amp;amp; document.JSONValue\n    Print |document.Revision: | &amp;amp; document.Revision\n    Print |document.URL: | &amp;amp; document.URL","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(ID As String, JsonValues As String)","signature":"Function CreateDocument(ID As String, JsonValues As String) As CouchDocument","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a new CouchDocument&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a new CouchDocument","inlinecomment":" \t &apos; Creates a new CouchDocument","parentclassname":"CouchDatabase","codesamplehtml":"&amp;apos; Sample code assumes previously created server as CouchServer and database as CouchDatabase objects&lt;br /&gt;  &lt;br /&gt;    Dim document As CouchDocument &lt;br /&gt;    Dim id As String &lt;br /&gt;    Dim json As String &lt;br /&gt; &lt;br /&gt;    id = server.getUUID() &lt;br /&gt;    json = |{&lt;br /&gt;            &amp;quot;recipe&amp;quot;: {&lt;br /&gt;                &amp;quot;name&amp;quot;: &amp;quot;Watermelon Salad&amp;quot;,&lt;br /&gt;                &amp;quot;PrepTime&amp;quot;: 15,&lt;br /&gt;                &amp;quot;CookTime&amp;quot;: 5,&lt;br /&gt;                &amp;quot;Servings&amp;quot;: 4,&lt;br /&gt;                &amp;quot;Difficulty&amp;quot;: &amp;quot;&amp;quot;,&lt;br /&gt;                &amp;quot;Ingredients&amp;quot;: [&lt;br /&gt;                    &amp;quot;6 cups cubed watermelon&amp;quot;,&lt;br /&gt;                    &amp;quot;2 tbsp. olive oil&amp;quot;,&lt;br /&gt;                    &amp;quot;1 tbsp. lime juice&amp;quot;,&lt;br /&gt;                    &amp;quot;1/3 cup chopped feta cheese&amp;quot;,&lt;br /&gt;                    &amp;quot;1/3 cup basil leaves&amp;quot;&lt;br /&gt;                ],&lt;br /&gt;                &amp;quot;Directions&amp;quot;: [&lt;br /&gt;                    &amp;quot;Cube 6 cups of watermelon&amp;quot;,&lt;br /&gt;                    &amp;quot;Stir in olive oil and lime juice&amp;quot;,&lt;br /&gt;                    &amp;quot;Chop, and stir in feta cheese&amp;quot;,&lt;br /&gt;                    &amp;quot;Garnish with fresh basil&amp;quot;&lt;br /&gt;                ]&lt;br /&gt;            }&lt;br /&gt;        }|&lt;br /&gt;     &lt;br /&gt;    Set document = database.createDocument(id, json) &lt;br /&gt;    Print |Created Document|&lt;br /&gt;    Print |document.ID: | &amp;amp; document.ID&lt;br /&gt;    Print |document.isModified: | &amp;amp; document.isModified&lt;br /&gt;    Print |document.isSaved: | &amp;amp; document.isSaved&lt;br /&gt;    Print |document.JSONValue: | &amp;amp; document.JSONValue&lt;br /&gt;    Print |document.Revision: | &amp;amp; document.Revision&lt;br /&gt;    Print |document.URL: | &amp;amp; document.URL", "signatureelements":["Function"], "arguments":[{"label":"ID","comment":"","valuetype":"String","filenamebase":"ID_ValuedElement","fqnprefix":"CouchVSECouchDatabaseCreateDocument","qn":"ID","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":"", "attributes":["BY_VAL"]},{"label":"JsonValues","comment":"","valuetype":"String","filenamebase":"JsonValues_ValuedElement","fqnprefix":"CouchVSECouchDatabaseCreateDocument","qn":"JsonValues","argumentindex":2,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"CreateView","comment":"Creates a CouchView within the CouchDatabase","valuetype":"CouchView","filenamebase":"CreateView_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"CreateView","codesample":"&amp;apos; Sample code assumes previously created database as CouchDatabase, valid id variable, and valid spawnnew flag objects\n   \nFunction getCouchDbView(database As CouchDatabase, id As String, spawnnew As Boolean) As CouchView\n \n    Try \n        If database.isView(id) Then \n            Return database.getViewByID(id) \n        ElseIf spawnnew Then \n            Return database.createView(id)\n        End If     \n    Catch \n        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() \n        Print |spawnnew: | &amp;amp; spawnnew \n        Print |id: | &amp;amp; id \n        Print |database: | &amp;amp; database.Name \n    End Try \n \nEnd Function","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String)","signature":"Function CreateView(Name As String) As CouchView","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a CouchView within the CouchDatabase&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a CouchView within the CouchDatabase","inlinecomment":" \t &apos; Creates a CouchView within the CouchDatabase","parentclassname":"CouchDatabase","codesamplehtml":"&amp;apos; Sample code assumes previously created database as CouchDatabase, valid id variable, and valid spawnnew flag objects&lt;br /&gt;   &lt;br /&gt;Function getCouchDbView(database As CouchDatabase, id As String, spawnnew As Boolean) As CouchView&lt;br /&gt; &lt;br /&gt;    Try &lt;br /&gt;        If database.isView(id) Then &lt;br /&gt;            Return database.getViewByID(id) &lt;br /&gt;        ElseIf spawnnew Then &lt;br /&gt;            Return database.createView(id)&lt;br /&gt;        End If     &lt;br /&gt;    Catch &lt;br /&gt;        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() &lt;br /&gt;        Print |spawnnew: | &amp;amp; spawnnew &lt;br /&gt;        Print |id: | &amp;amp; id &lt;br /&gt;        Print |database: | &amp;amp; database.Name &lt;br /&gt;    End Try &lt;br /&gt; &lt;br /&gt;End Function", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchDatabaseCreateView","qn":"Name","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"DeleteAgent","comment":"Deletes the secified CouchAgent from the CouchDatabase","valuetype":"Boolean","filenamebase":"DeleteAgent_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"DeleteAgent","codesample":"Call database.deleteAgent(&amp;quot;agent name&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String)","signature":"Function DeleteAgent(Name As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Deletes the secified CouchAgent from the CouchDatabase&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Deletes the secified CouchAgent from the CouchDatabase","inlinecomment":" \t &apos; Deletes the secified CouchAgent from the CouchDatabase","parentclassname":"CouchDatabase","codesamplehtml":"Call database.deleteAgent(&amp;quot;agent name&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchDatabaseDeleteAgent","qn":"Name","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"DeleteDocument","comment":"Deletes a document from the CouchDatabase","valuetype":"Boolean","filenamebase":"DeleteDocument_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"DeleteDocument","codesample":"Function deleteCouchDbDocument(database As CouchDatabase, document As CouchDocument, preservestub As Boolean) As Boolean \n    Try \n        Return database.DeleteDocument(document, preservestub) \n    Catch \n        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() \n        Print |preservestub: | &amp;amp; preservestub \n        Print |document id: | &amp;amp; document.ID\n        Print |database: | &amp;amp; database.Name \n    End Try \nEnd Function","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Document As CouchDocument, Preserve As Boolean)","signature":"Function DeleteDocument(Document As CouchDocument, Preserve As Boolean) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Deletes a document from the CouchDatabase&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Deletes a document from the CouchDatabase","inlinecomment":" \t &apos; Deletes a document from the CouchDatabase","parentclassname":"CouchDatabase","codesamplehtml":"Function deleteCouchDbDocument(database As CouchDatabase, document As CouchDocument, preservestub As Boolean) As Boolean &lt;br /&gt;    Try &lt;br /&gt;        Return database.DeleteDocument(document, preservestub) &lt;br /&gt;    Catch &lt;br /&gt;        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() &lt;br /&gt;        Print |preservestub: | &amp;amp; preservestub &lt;br /&gt;        Print |document id: | &amp;amp; document.ID&lt;br /&gt;        Print |database: | &amp;amp; database.Name &lt;br /&gt;    End Try &lt;br /&gt;End Function", "signatureelements":["Function"], "arguments":[{"label":"Document","comment":"Docment to be deleted","valuetype":"CouchDocument","filenamebase":"Document_ValuedElement","fqnprefix":"CouchVSECouchDatabaseDeleteDocument","qn":"Document","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Docment to be deleted&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Docment to be deleted","inlinecomment":" \t &apos; Docment to be deleted"},{"label":"Preserve","comment":"Flag indicating if a deletion stub should be preserved ","valuetype":"Boolean","filenamebase":"Preserve_ValuedElement","fqnprefix":"CouchVSECouchDatabaseDeleteDocument","qn":"Preserve","argumentindex":2,"optionalvalue":"LSXFalse","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if a deletion stub should be preserved &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if a deletion stub should be preserved ","inlinecomment":" \t &apos; Flag indicating if a deletion stub should be preserved ", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"DeleteDocumentByID","comment":"Deletes the specified CouchDocument from the CouchDatabase","valuetype":"Boolean","filenamebase":"DeleteDocumentByID_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"DeleteDocumentByID","codesample":"Call database.deleteDocumentByID(&amp;quot;76796ba0df26f8c2e539cf39d302236f&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DocID As String, Preserve As Boolean)","signature":"Function DeleteDocumentByID(DocID As String, Preserve As Boolean) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Deletes the specified CouchDocument from the CouchDatabase&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Deletes the specified CouchDocument from the CouchDatabase","inlinecomment":" \t &apos; Deletes the specified CouchDocument from the CouchDatabase","parentclassname":"CouchDatabase","codesamplehtml":"Call database.deleteDocumentByID(&amp;quot;76796ba0df26f8c2e539cf39d302236f&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"DocID","comment":"ID of the CouchDocument to be deleted ","valuetype":"String","filenamebase":"DocID_ValuedElement","fqnprefix":"CouchVSECouchDatabaseDeleteDocumentByID","qn":"DocID","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;ID of the CouchDocument to be deleted &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"ID of the CouchDocument to be deleted ","inlinecomment":" \t &apos; ID of the CouchDocument to be deleted "},{"label":"Preserve","comment":"Flag indicating if the CouchDocument&amp;apos;s data should be preserved even though the document is marked as _deleted.","valuetype":"Boolean","filenamebase":"Preserve_ValuedElement","fqnprefix":"CouchVSECouchDatabaseDeleteDocumentByID","qn":"Preserve","argumentindex":2,"optionalvalue":"LSXFalse","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the CouchDocument&amp;apos;s data should be preserved even though the document is marked as _deleted.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the CouchDocument&amp;apos;s data should be preserved even though the document is marked as _deleted.","inlinecomment":" \t &apos; Flag indicating if the CouchDocument&amp;apos;s data should be preserved even though the document is marked as _deleted.", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"DeleteView","comment":"","valuetype":"Boolean","filenamebase":"DeleteView_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"DeleteView","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String)","signature":"Function DeleteView(Name As String) As Boolean","modifiers":"","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"CouchDatabase","codesamplehtml":"", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchDatabaseDeleteView","qn":"Name","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"GetAgent","comment":"Retrieves the specified CouchAgent from the CouchDatabase","valuetype":"CouchAgent","filenamebase":"GetAgent_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"GetAgent","codesample":"Function getCouchDbAgent(source As CouchDatabase, agentname As String, spawnnew As Boolean) As CouchAgent\n \n    Try \n        If source.isAgent(agentname) Then \n            Return source.getAgent(agentname) \n        ElseIf spawnnew Then \n            Return source.createAgent(agentname)\n        End If     \n    Catch \n        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() \n        Print |spawnnew: | &amp;amp; spawnnew \n        Print |agentname: | &amp;amp; agentname \n        Print |source: | &amp;amp; source.Name \n    End Try \n \nEnd Function","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String)","signature":"Function GetAgent(Name As String) As CouchAgent","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Retrieves the specified CouchAgent from the CouchDatabase&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Retrieves the specified CouchAgent from the CouchDatabase","inlinecomment":" \t &apos; Retrieves the specified CouchAgent from the CouchDatabase","parentclassname":"CouchDatabase","codesamplehtml":"Function getCouchDbAgent(source As CouchDatabase, agentname As String, spawnnew As Boolean) As CouchAgent&lt;br /&gt; &lt;br /&gt;    Try &lt;br /&gt;        If source.isAgent(agentname) Then &lt;br /&gt;            Return source.getAgent(agentname) &lt;br /&gt;        ElseIf spawnnew Then &lt;br /&gt;            Return source.createAgent(agentname)&lt;br /&gt;        End If     &lt;br /&gt;    Catch &lt;br /&gt;        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() &lt;br /&gt;        Print |spawnnew: | &amp;amp; spawnnew &lt;br /&gt;        Print |agentname: | &amp;amp; agentname &lt;br /&gt;        Print |source: | &amp;amp; source.Name &lt;br /&gt;    End Try &lt;br /&gt; &lt;br /&gt;End Function", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"Name of the CouchAgent to retrieve","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchDatabaseGetAgent","qn":"Name","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the CouchAgent to retrieve&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the CouchAgent to retrieve","inlinecomment":" \t &apos; Name of the CouchAgent to retrieve"}]},{"label":"GetDeletedIDs","comment":"Gets the IDs of all deleted elements within the CouchDatabase ","valuetype":"String","filenamebase":"GetDeletedIDs_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"GetDeletedIDs","codesample":"&amp;apos; Sample code assumes previously created database as CouchDatabase object. \n  \nDim elements As Variant \nDim i As Integer\n \nPrint |Getting DeletedIDs from | &amp;amp; database.Name \nelements = database.getDeletedIDs()  \n \ni = Ubound(elements) - Lbound(elements)\nIf (Len(FullTrim(elements(i))) &amp;gt; 0) Then i++\nPrint |There are | &amp;amp; i &amp;amp; | Deleted IDs: |, join(elements, |, |) ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(RememberLast As Boolean)","signature":"Function GetDeletedIDs(RememberLast As Boolean) As String Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the IDs of all deleted elements within the CouchDatabase &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the IDs of all deleted elements within the CouchDatabase ","inlinecomment":" \t &apos; Gets the IDs of all deleted elements within the CouchDatabase ","parentclassname":"CouchDatabase","codesamplehtml":"&amp;apos; Sample code assumes previously created database as CouchDatabase object. &lt;br /&gt;  &lt;br /&gt;Dim elements As Variant &lt;br /&gt;Dim i As Integer&lt;br /&gt; &lt;br /&gt;Print |Getting DeletedIDs from | &amp;amp; database.Name &lt;br /&gt;elements = database.getDeletedIDs()  &lt;br /&gt; &lt;br /&gt;i = Ubound(elements) - Lbound(elements)&lt;br /&gt;If (Len(FullTrim(elements(i))) &amp;gt; 0) Then i++&lt;br /&gt;Print |There are | &amp;amp; i &amp;amp; | Deleted IDs: |, join(elements, |, |) ", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"RememberLast","comment":"","valuetype":"Boolean","filenamebase":"RememberLast_ValuedElement","fqnprefix":"CouchVSECouchDatabaseGetDeletedIDs","qn":"RememberLast","argumentindex":1,"optionalvalue":"LSXFalse","commentblock":"","commenthtml":"","inlinecomment":"", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"GetDocumentByID","comment":"Gets a specified CouchDocument from the CouchDatabase.  ","valuetype":"CouchDocument","filenamebase":"GetDocumentByID_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"GetDocumentByID","codesample":"&amp;apos; Sample code assumes previously created database as CouchDatabase object and a KNOWN GOOD document. \n \nDim document As CouchDocument \n \nSet document = database.getDocumentByID(id) \nPrint |document.JSONValue | &amp;amp; document.JSONValue  ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(ID As String, IncludeDeleted As Boolean)","signature":"Function GetDocumentByID(ID As String, IncludeDeleted As Boolean) As CouchDocument","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets a specified CouchDocument from the CouchDatabase.  &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets a specified CouchDocument from the CouchDatabase.  ","inlinecomment":" \t &apos; Gets a specified CouchDocument from the CouchDatabase.  ","parentclassname":"CouchDatabase","codesamplehtml":"&amp;apos; Sample code assumes previously created database as CouchDatabase object and a KNOWN GOOD document. &lt;br /&gt; &lt;br /&gt;Dim document As CouchDocument &lt;br /&gt; &lt;br /&gt;Set document = database.getDocumentByID(id) &lt;br /&gt;Print |document.JSONValue | &amp;amp; document.JSONValue  ", "signatureelements":["Function"], "arguments":[{"label":"ID","comment":"","valuetype":"String","filenamebase":"ID_ValuedElement","fqnprefix":"CouchVSECouchDatabaseGetDocumentByID","qn":"ID","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""},{"label":"IncludeDeleted","comment":"","valuetype":"Boolean","filenamebase":"IncludeDeleted_ValuedElement","fqnprefix":"CouchVSECouchDatabaseGetDocumentByID","qn":"IncludeDeleted","argumentindex":2,"optionalvalue":"LSXFalse","commentblock":"","commenthtml":"","inlinecomment":"", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"GetViewByID","comment":"Gets a specified CouchView from the CouchDatabase.  ","valuetype":"CouchView","filenamebase":"GetViewByID_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"GetViewByID","codesample":"&amp;apos; Sample code assumes previously created database as CouchDatabase object and a KNOWN GOOD document. \n \nDim view As CouchView \n \nSet view = database.getViewByID(id) \nPrint |view.JSONValue | &amp;amp; view.JSONValue ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(ViewID As String)","signature":"Function GetViewByID(ViewID As String) As CouchView","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets a specified CouchView from the CouchDatabase.  &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets a specified CouchView from the CouchDatabase.  ","inlinecomment":" \t &apos; Gets a specified CouchView from the CouchDatabase.  ","parentclassname":"CouchDatabase","codesamplehtml":"&amp;apos; Sample code assumes previously created database as CouchDatabase object and a KNOWN GOOD document. &lt;br /&gt; &lt;br /&gt;Dim view As CouchView &lt;br /&gt; &lt;br /&gt;Set view = database.getViewByID(id) &lt;br /&gt;Print |view.JSONValue | &amp;amp; view.JSONValue ", "signatureelements":["Function"], "arguments":[{"label":"ViewID","comment":"","valuetype":"String","filenamebase":"ViewID_ValuedElement","fqnprefix":"CouchVSECouchDatabaseGetViewByID","qn":"ViewID","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"IsAgent","comment":"Indicates if a CouchAgent matching the specified name exists in the Couch Database","valuetype":"Boolean","filenamebase":"IsAgent_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"IsAgent","codesample":"Function getCouchDbAgent(source As CouchDatabase, agentname As String, spawnnew As Boolean) As CouchAgent\n \n    Try \n        If source.isAgent(agentname) Then \n            Return source.getAgent(agentname) \n        ElseIf spawnnew Then \n            Return source.createAgent(agentname)\n        End If     \n    Catch \n        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() \n        Print |spawnnew: | &amp;amp; spawnnew \n        Print |agentname: | &amp;amp; agentname \n        Print |source: | &amp;amp; source.Name \n    End Try \n \nEnd Function","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String)","signature":"Function IsAgent(Name As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Indicates if a CouchAgent matching the specified name exists in the Couch Database&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Indicates if a CouchAgent matching the specified name exists in the Couch Database","inlinecomment":" \t &apos; Indicates if a CouchAgent matching the specified name exists in the Couch Database","parentclassname":"CouchDatabase","codesamplehtml":"Function getCouchDbAgent(source As CouchDatabase, agentname As String, spawnnew As Boolean) As CouchAgent&lt;br /&gt; &lt;br /&gt;    Try &lt;br /&gt;        If source.isAgent(agentname) Then &lt;br /&gt;            Return source.getAgent(agentname) &lt;br /&gt;        ElseIf spawnnew Then &lt;br /&gt;            Return source.createAgent(agentname)&lt;br /&gt;        End If     &lt;br /&gt;    Catch &lt;br /&gt;        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() &lt;br /&gt;        Print |spawnnew: | &amp;amp; spawnnew &lt;br /&gt;        Print |agentname: | &amp;amp; agentname &lt;br /&gt;        Print |source: | &amp;amp; source.Name &lt;br /&gt;    End Try &lt;br /&gt; &lt;br /&gt;End Function", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"Name of the CouchAgent for which to check existence. ","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchDatabaseIsAgent","qn":"Name","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the CouchAgent for which to check existence. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the CouchAgent for which to check existence. ","inlinecomment":" \t &apos; Name of the CouchAgent for which to check existence. "}]},{"label":"IsDocument","comment":"Indicates if a CouchAgent matching the specified name exists in the CouchDatabase","valuetype":"Boolean","filenamebase":"IsDocument_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"IsDocument","codesample":"&amp;apos; Sample code assumes previously created database as CouchDatabase object, valid id variable, and valid spawnnew flag\n  \nFunction getCouchDbDocument(database As CouchDatabase, id As String, spawnnew As Boolean) As CouchDocument\n \n    Try \n        If database.isDocument(id) Then \n            Return database.getDocumentById(id)\n        ElseIf spawnnew Then \n            Return database.createDocument(id)\n        End If     \n    Catch \n        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() \n        Print |spawnnew: | &amp;amp; spawnnew \n        Print |id: | &amp;amp; id \n        Print |database: | &amp;amp; database.Name \n    End Try \n \nEnd Function","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DocID As String)","signature":"Function IsDocument(DocID As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Indicates if a CouchAgent matching the specified name exists in the CouchDatabase&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Indicates if a CouchAgent matching the specified name exists in the CouchDatabase","inlinecomment":" \t &apos; Indicates if a CouchAgent matching the specified name exists in the CouchDatabase","parentclassname":"CouchDatabase","codesamplehtml":"&amp;apos; Sample code assumes previously created database as CouchDatabase object, valid id variable, and valid spawnnew flag&lt;br /&gt;  &lt;br /&gt;Function getCouchDbDocument(database As CouchDatabase, id As String, spawnnew As Boolean) As CouchDocument&lt;br /&gt; &lt;br /&gt;    Try &lt;br /&gt;        If database.isDocument(id) Then &lt;br /&gt;            Return database.getDocumentById(id)&lt;br /&gt;        ElseIf spawnnew Then &lt;br /&gt;            Return database.createDocument(id)&lt;br /&gt;        End If     &lt;br /&gt;    Catch &lt;br /&gt;        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() &lt;br /&gt;        Print |spawnnew: | &amp;amp; spawnnew &lt;br /&gt;        Print |id: | &amp;amp; id &lt;br /&gt;        Print |database: | &amp;amp; database.Name &lt;br /&gt;    End Try &lt;br /&gt; &lt;br /&gt;End Function", "signatureelements":["Function"], "arguments":[{"label":"DocID","comment":"","valuetype":"String","filenamebase":"DocID_ValuedElement","fqnprefix":"CouchVSECouchDatabaseIsDocument","qn":"DocID","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"IsView","comment":"Indicates if a CouchView matching the name exists in the CouchDatabase","valuetype":"Boolean","filenamebase":"IsView_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"IsView","codesample":"&amp;apos; Sample code assumes previously created database as CouchDatabase object \n  \nDim view As CouchView \nDim viewname As String \n  \nviewname = |My View| \n  \nIf database.isView(viewname) Then \n\tPrint |Found View: | &amp;amp; viewname \n\tSet view = database.getViewByID(viewname) \n\tPrint |view.JSONValue: | &amp;amp; view.JSONValue  \nElse \n\tPrint |Could not find view: | &amp;amp; viewname \nEnd If ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String)","signature":"Function IsView(Name As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Indicates if a CouchView matching the name exists in the CouchDatabase&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Indicates if a CouchView matching the name exists in the CouchDatabase","inlinecomment":" \t &apos; Indicates if a CouchView matching the name exists in the CouchDatabase","parentclassname":"CouchDatabase","codesamplehtml":"&amp;apos; Sample code assumes previously created database as CouchDatabase object &lt;br /&gt;  &lt;br /&gt;Dim view As CouchView &lt;br /&gt;Dim viewname As String &lt;br /&gt;  &lt;br /&gt;viewname = |My View| &lt;br /&gt;  &lt;br /&gt;If database.isView(viewname) Then &lt;br /&gt;\tPrint |Found View: | &amp;amp; viewname &lt;br /&gt;\tSet view = database.getViewByID(viewname) &lt;br /&gt;\tPrint |view.JSONValue: | &amp;amp; view.JSONValue  &lt;br /&gt;Else &lt;br /&gt;\tPrint |Could not find view: | &amp;amp; viewname &lt;br /&gt;End If ", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchDatabaseIsView","qn":"Name","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"ACL","comment":"NOT IMPLEMENTED","valuetype":"CouchACL","filenamebase":"ACL_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"Get.ACL","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ACL As CouchACL","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED","inlinecomment":" \t &apos; NOT IMPLEMENTED","parentclassname":"CouchDatabase","codesamplehtml":"", "signatureelements":["Property","Get"]},{"label":"DocumentIDs","comment":"String Array containig the Ids for all Documents within a Couch Database","valuetype":"String","filenamebase":"DocumentIDs_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"Get.DocumentIDs","codesample":"Sub PrintCouchDbDocumentIDs(source As CouchDatabase) \n    Dim elements As Variant \n    Dim i As Integer\n \n    elements = source.DocumentIDs \n    i = Ubound(elements) - Lbound(elements)\n    If (Len(FullTrim(elements(i))) &amp;gt; 0) Then i++\n    Print &amp;quot;There are &amp;quot; &amp;amp; i &amp;amp; &amp;quot; Documents: &amp;quot;, join(elements, |, |)\nEnd Sub ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get DocumentIDs As String Array","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String Array containig the Ids for all Documents within a Couch Database&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String Array containig the Ids for all Documents within a Couch Database","inlinecomment":" \t &apos; String Array containig the Ids for all Documents within a Couch Database","parentclassname":"CouchDatabase","codesamplehtml":"Sub PrintCouchDbDocumentIDs(source As CouchDatabase) &lt;br /&gt;    Dim elements As Variant &lt;br /&gt;    Dim i As Integer&lt;br /&gt; &lt;br /&gt;    elements = source.DocumentIDs &lt;br /&gt;    i = Ubound(elements) - Lbound(elements)&lt;br /&gt;    If (Len(FullTrim(elements(i))) &amp;gt; 0) Then i++&lt;br /&gt;    Print &amp;quot;There are &amp;quot; &amp;amp; i &amp;amp; &amp;quot; Documents: &amp;quot;, join(elements, |, |)&lt;br /&gt;End Sub ", "attributes":["READ_ONLY","Array"], "signatureelements":["Property","Get"]},{"label":"Name","comment":"Name of a Couch Database ","valuetype":"String","filenamebase":"Name_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"Get.Name","codesample":"Sub PrintCouchDbName(source as CouchDatabase) \n    Print |Database Name: | &amp;amp; source.Name \nEnd Sub","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Name As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of a Couch Database &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of a Couch Database ","inlinecomment":" \t &apos; Name of a Couch Database ","parentclassname":"CouchDatabase","codesamplehtml":"Sub PrintCouchDbName(source as CouchDatabase) &lt;br /&gt;    Print |Database Name: | &amp;amp; source.Name &lt;br /&gt;End Sub", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Node","comment":"Node within which the CouchDB Resides","valuetype":"String","filenamebase":"Node_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"Get.Node","codesample":"Sub PrintCouchDbNode(source as CouchDatabase) \n    Print |Database Node: | &amp;amp; source.Node \nEnd Sub ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Node As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Node within which the CouchDB Resides&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Node within which the CouchDB Resides","inlinecomment":" \t &apos; Node within which the CouchDB Resides","parentclassname":"CouchDatabase","codesamplehtml":"Sub PrintCouchDbNode(source as CouchDatabase) &lt;br /&gt;    Print |Database Node: | &amp;amp; source.Node &lt;br /&gt;End Sub ", "attributes":["READ_ONLY","GET_CONST","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"UpdateFunctions","comment":"","valuetype":"String","filenamebase":"UpdateFunctions_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"Get.UpdateFunctions","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get UpdateFunctions As String Array","modifiers":"Get","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"CouchDatabase","codesamplehtml":"", "attributes":["Array"], "signatureelements":["Property","Get"]},{"label":"ViewIDs","comment":"String Array containig the Ids for all Views within a Couch Database","valuetype":"String","filenamebase":"ViewIDs_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"Get.ViewIDs","codesample":"Sub PrintCouchDbViewIDs(source As CouchDatabase) \n    Dim elements As Variant \n    Dim i As Integer\n \n    elements = source.ViewIDs \n    i = Ubound(elements) - Lbound(elements)\n    If (Len(FullTrim(elements(i))) &amp;gt; 0) Then i++\n    Print &amp;quot;There are &amp;quot; &amp;amp; i &amp;amp; &amp;quot; Views: &amp;quot;, join(elements, |, |)\nEnd Sub ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ViewIDs As String Array","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String Array containig the Ids for all Views within a Couch Database&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String Array containig the Ids for all Views within a Couch Database","inlinecomment":" \t &apos; String Array containig the Ids for all Views within a Couch Database","parentclassname":"CouchDatabase","codesamplehtml":"Sub PrintCouchDbViewIDs(source As CouchDatabase) &lt;br /&gt;    Dim elements As Variant &lt;br /&gt;    Dim i As Integer&lt;br /&gt; &lt;br /&gt;    elements = source.ViewIDs &lt;br /&gt;    i = Ubound(elements) - Lbound(elements)&lt;br /&gt;    If (Len(FullTrim(elements(i))) &amp;gt; 0) Then i++&lt;br /&gt;    Print &amp;quot;There are &amp;quot; &amp;amp; i &amp;amp; &amp;quot; Views: &amp;quot;, join(elements, |, |)&lt;br /&gt;End Sub ", "attributes":["READ_ONLY","SET_CONST","Array"], "signatureelements":["Property","Get"]},{"label":"ACL","comment":"NOT IMPLEMENTED","valuetype":"CouchACL","filenamebase":"ACL_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"Set.ACL","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set ACL As CouchACL","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED","inlinecomment":" \t &apos; NOT IMPLEMENTED","parentclassname":"CouchDatabase","codesamplehtml":"", "signatureelements":["Property","Set"]},{"label":"UpdateFunctions","comment":"","valuetype":"String","filenamebase":"UpdateFunctions_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"Set.UpdateFunctions","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set UpdateFunctions As String Array","modifiers":"Set","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"CouchDatabase","codesamplehtml":"", "attributes":["Array"], "signatureelements":["Property","Set"]}]}
