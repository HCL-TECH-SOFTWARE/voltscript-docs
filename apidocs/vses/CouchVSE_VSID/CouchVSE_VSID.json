{"VSIDname":"CouchVSE","comment":"","valuetype":"","filenamebase":"CouchVSE_VSID","fqnprefix":"","qn":"CouchVSE","codesample":"","signaturecode":131072,"instancecode":131072,"signature":"VSID CouchVSE","modifiers":"","vsidname":"CouchVSE","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "lsxs":[{"lsxname":"CouchVSE","comment":"Connector for CouchDB","valuetype":"","filenamebase":"CouchVSE_VSE","fqnprefix":"CouchVSE","qn":"CouchVSE","codesample":"","signaturecode":32768,"instancecode":32768,"description":"Provides connnection and data interface capabilities for Apache CouchDB","codesamplehtml":"","baseid":300,"baseguid":"4B9E0ECC-902E-4006-9215-495AAF99EAB5","characterset":"UNICODE","lsxcreator":"Bob Balaban","signature":"VSE CouchVSE","modifiers":"","lsxname":"CouchVSE","summary":"Connector for CouchDB","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Connector for CouchDB&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Connector for CouchDB","inlinecomment":" \t &apos; Connector for CouchDB", "classes":[{"classname":"CouchACL","comment":"NOT IMPLEMENTED","valuetype":"","filenamebase":"CouchACL_ObjectClass","fqnprefix":"CouchVSE","qn":"CouchACL","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","classattribnewnotexposed":"UnexposedNew","projectid":"85258A0A005BFF7B85258714004ECA02","version":3,"classid":"85258A0A005BFF7B852587150037193E","lsxclassid":4,"signature":"Public Class CouchACL","modifiers":"Public","classname":"CouchACL","parentclassname":"None","constructorsignature":"Function New() As CouchACL","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED","inlinecomment":" \t &apos; NOT IMPLEMENTED","codesamplehtml":"", "attributes":["Hidden"], "methods":[{"label":"New","comment":"NOT IMPLEMENTED","valuetype":"CouchACL","filenamebase":"New_Method","fqnprefix":"CouchVSE.CouchACL","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As CouchACL","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED","inlinecomment":" \t &apos; NOT IMPLEMENTED","parentclassname":"CouchACL","codesamplehtml":"", "signatureelements":["Function"]},{"label":"Permissions","comment":"NOT IMPLEMENTED","valuetype":"String","filenamebase":"Permissions_Method","fqnprefix":"CouchVSE.CouchACL","qn":"Get.Permissions","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Permissions As String Array","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED","inlinecomment":" \t &apos; NOT IMPLEMENTED","parentclassname":"CouchACL","codesamplehtml":"", "attributes":["GET_CONST","SET_CONST","Array"], "signatureelements":["Property","Get"]},{"label":"Roles","comment":"NOT IMPLEMENTED","valuetype":"String","filenamebase":"Roles_Method","fqnprefix":"CouchVSE.CouchACL","qn":"Get.Roles","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Roles As String Array","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED","inlinecomment":" \t &apos; NOT IMPLEMENTED","parentclassname":"CouchACL","codesamplehtml":"", "attributes":["GET_CONST","SET_CONST","Array"], "signatureelements":["Property","Get"]},{"label":"Permissions","comment":"NOT IMPLEMENTED","valuetype":"String","filenamebase":"Permissions_Method","fqnprefix":"CouchVSE.CouchACL","qn":"Set.Permissions","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set Permissions As String Array","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED","inlinecomment":" \t &apos; NOT IMPLEMENTED","parentclassname":"CouchACL","codesamplehtml":"", "attributes":["GET_CONST","SET_CONST","Array"], "signatureelements":["Property","Set"]},{"label":"Roles","comment":"NOT IMPLEMENTED","valuetype":"String","filenamebase":"Roles_Method","fqnprefix":"CouchVSE.CouchACL","qn":"Set.Roles","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set Roles As String Array","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED","inlinecomment":" \t &apos; NOT IMPLEMENTED","parentclassname":"CouchACL","codesamplehtml":"", "attributes":["GET_CONST","SET_CONST","Array"], "signatureelements":["Property","Set"]}]},{"classname":"CouchAgent","comment":"Represents an agent within a CouchDatabase \n \nCreation - Use the CouchDatabase.CreateAgent() method\nRetrieval - Use the CouchDatabase.GetAgent() method\nDeletion - Use the CouchDatabase.DeleteAgent() method","valuetype":"","filenamebase":"CouchAgent_ObjectClass","fqnprefix":"CouchVSE","qn":"CouchAgent","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","classattribnewnotexposed":"UnexposedNew","projectid":"85258A0A005BFF7B85258714004ECA02","version":3,"classid":"85258A0A005BFF7B8525874E0063AE39","lsxclassid":8,"signature":"Public Class CouchAgent","modifiers":"Public","classname":"CouchAgent","parentclassname":"None","constructorsignature":"Function New() As CouchAgent","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Represents an agent within a CouchDatabase &lt;br /&gt; &lt;br /&gt;Creation - Use the CouchDatabase.CreateAgent() method&lt;br /&gt;Retrieval - Use the CouchDatabase.GetAgent() method&lt;br /&gt;Deletion - Use the CouchDatabase.DeleteAgent() method&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Represents an agent within a CouchDatabase &lt;br /&gt; &lt;br /&gt;Creation - Use the CouchDatabase.CreateAgent() method&lt;br /&gt;Retrieval - Use the CouchDatabase.GetAgent() method&lt;br /&gt;Deletion - Use the CouchDatabase.DeleteAgent() method","inlinecomment":" \t &apos; Represents an agent within a CouchDatabase \n \nCreation - Use the CouchDatabase.CreateAgent() method\nRetrieval - Use the CouchDatabase.GetAgent() method\nDeletion - Use the CouchDatabase.DeleteAgent() method","codesamplehtml":"", "methods":[{"label":"ImportAgentJSON","comment":"NOT IMPLEMENTED","valuetype":"Boolean","filenamebase":"ImportAgentJSON_Method","fqnprefix":"CouchVSE.CouchAgent","qn":"ImportAgentJSON","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(FileName As String, IsURL As Boolean)","signature":"Function ImportAgentJSON(FileName As String, IsURL As Boolean) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED","inlinecomment":" \t &apos; NOT IMPLEMENTED","parentclassname":"CouchAgent","codesamplehtml":"", "signatureelements":["Function"], "arguments":[{"label":"FileName","comment":"","valuetype":"String","filenamebase":"FileName_ValuedElement","fqnprefix":"CouchVSECouchAgentImportAgentJSON","qn":"FileName","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""},{"label":"IsURL","comment":"","valuetype":"Boolean","filenamebase":"IsURL_ValuedElement","fqnprefix":"CouchVSECouchAgentImportAgentJSON","qn":"IsURL","argumentindex":2,"commentblock":"","commenthtml":"","inlinecomment":"", "attributes":["BY_VAL"]}]},{"label":"ImportAgentScript","comment":"Imports source code into the CouchAgent","valuetype":"Boolean","filenamebase":"ImportAgentScript_Method","fqnprefix":"CouchVSE.CouchAgent","qn":"ImportAgentScript","codesample":"&amp;apos; Sample code assumes previously instantiated database as CouchDatabase object and a valid value for viewname \n \nDim rows As String \nDim agent As CouchAgent \n \nSet agent  = database.createAgent(agentname)\nPrint |Spawned CouchAgent|\n \nagent.AgentLanguage = |VoltScript|\nagent.AgentMetadata = |{&amp;quot;Author&amp;quot;:&amp;quot;James Bond&amp;quot;,&amp;quot;Environment&amp;quot;:&amp;quot;Casino Royale&amp;quot;}|\n \n%REM Sample Agent Agent007.vss source code:\n\tOption Public\n\tOption Declare \n \t  \n\tSub Initialize\n\t\tMessageBox |Always the gentleman, the first drink I ever ordered was an Americano Cocktail, which constists of 1 measure Campari, 1 measure sweet vermouth, Soda water. (Casino Royale)|\n\tEnd Sub     \n%END REM \n \nPrint |Importing Agent Code|       \nCall agent.ImportAgentScript(CurDir() &amp;amp; |/src/Agent007.vss|, False) \nCall agent.Save() \n \nPrint |Executing Agent Code|\nExecute agent.AgentCode \nPrint || \n \n \n%REM Prints\n\tSpawned CouchAgent\n\tImporting Agent Code\n\tExecuting Agent Code\n\tAlways the gentleman, the first drink I ever ordered was an Americano Cocktail, which constists of 1 measure Campari, 1 measure sweet vermouth, Soda water. (Casino Royale)\n \t  \n%END REM ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(FileName As String, IsURL As Boolean)","signature":"Function ImportAgentScript(FileName As String, IsURL As Boolean) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Imports source code into the CouchAgent&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Imports source code into the CouchAgent","inlinecomment":" \t &apos; Imports source code into the CouchAgent","parentclassname":"CouchAgent","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated database as CouchDatabase object and a valid value for viewname &lt;br /&gt; &lt;br /&gt;Dim rows As String &lt;br /&gt;Dim agent As CouchAgent &lt;br /&gt; &lt;br /&gt;Set agent  = database.createAgent(agentname)&lt;br /&gt;Print |Spawned CouchAgent|&lt;br /&gt; &lt;br /&gt;agent.AgentLanguage = |VoltScript|&lt;br /&gt;agent.AgentMetadata = |{&amp;quot;Author&amp;quot;:&amp;quot;James Bond&amp;quot;,&amp;quot;Environment&amp;quot;:&amp;quot;Casino Royale&amp;quot;}|&lt;br /&gt; &lt;br /&gt;%REM Sample Agent Agent007.vss source code:&lt;br /&gt;\tOption Public&lt;br /&gt;\tOption Declare &lt;br /&gt; \t  &lt;br /&gt;\tSub Initialize&lt;br /&gt;\t\tMessageBox |Always the gentleman, the first drink I ever ordered was an Americano Cocktail, which constists of 1 measure Campari, 1 measure sweet vermouth, Soda water. (Casino Royale)|&lt;br /&gt;\tEnd Sub     &lt;br /&gt;%END REM &lt;br /&gt; &lt;br /&gt;Print |Importing Agent Code|       &lt;br /&gt;Call agent.ImportAgentScript(CurDir() &amp;amp; |/src/Agent007.vss|, False) &lt;br /&gt;Call agent.Save() &lt;br /&gt; &lt;br /&gt;Print |Executing Agent Code|&lt;br /&gt;Execute agent.AgentCode &lt;br /&gt;Print || &lt;br /&gt; &lt;br /&gt; &lt;br /&gt;%REM Prints&lt;br /&gt;\tSpawned CouchAgent&lt;br /&gt;\tImporting Agent Code&lt;br /&gt;\tExecuting Agent Code&lt;br /&gt;\tAlways the gentleman, the first drink I ever ordered was an Americano Cocktail, which constists of 1 measure Campari, 1 measure sweet vermouth, Soda water. (Casino Royale)&lt;br /&gt; \t  &lt;br /&gt;%END REM ", "signatureelements":["Function"], "arguments":[{"label":"FileName","comment":"","valuetype":"String","filenamebase":"FileName_ValuedElement","fqnprefix":"CouchVSECouchAgentImportAgentScript","qn":"FileName","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""},{"label":"IsURL","comment":"","valuetype":"Boolean","filenamebase":"IsURL_ValuedElement","fqnprefix":"CouchVSECouchAgentImportAgentScript","qn":"IsURL","argumentindex":2,"commentblock":"","commenthtml":"","inlinecomment":"", "attributes":["BY_VAL"]}]},{"label":"New","comment":"NOT AVAILABLE  - Use CouchDatabase.CreateAgent() or CouchDatabase.GetAgent() methods","valuetype":"CouchAgent","filenamebase":"New_Method","fqnprefix":"CouchVSE.CouchAgent","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As CouchAgent","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT AVAILABLE  - Use CouchDatabase.CreateAgent() or CouchDatabase.GetAgent() methods&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT AVAILABLE  - Use CouchDatabase.CreateAgent() or CouchDatabase.GetAgent() methods","inlinecomment":" \t &apos; NOT AVAILABLE  - Use CouchDatabase.CreateAgent() or CouchDatabase.GetAgent() methods","parentclassname":"CouchAgent","codesamplehtml":"", "signatureelements":["Function"]},{"label":"Save","comment":"Saves the CouchAgent to to the backing Apache Couch DB database. ","valuetype":"Boolean","filenamebase":"Save_Method","fqnprefix":"CouchVSE.CouchAgent","qn":"Save","codesample":"call couchAgent.Save() ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function Save() As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Saves the CouchAgent to to the backing Apache Couch DB database. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Saves the CouchAgent to to the backing Apache Couch DB database. ","inlinecomment":" \t &apos; Saves the CouchAgent to to the backing Apache Couch DB database. ","parentclassname":"CouchAgent","codesamplehtml":"call couchAgent.Save() ", "signatureelements":["Function"]},{"label":"AgentCode","comment":"Source code for the agent. ","valuetype":"String","filenamebase":"AgentCode_Method","fqnprefix":"CouchVSE.CouchAgent","qn":"Get.AgentCode","codesample":"&amp;apos; Sample code assumes previously instantiated agent As CouchAgent object. \n \nPrint |agent.AgentCode: | &amp;amp; agent.AgentCode ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get AgentCode As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Source code for the agent. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Source code for the agent. ","inlinecomment":" \t &apos; Source code for the agent. ","parentclassname":"CouchAgent","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated agent As CouchAgent object. &lt;br /&gt; &lt;br /&gt;Print |agent.AgentCode: | &amp;amp; agent.AgentCode ", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"AgentLanguage","comment":"Programming language for which the CouchAgent has been written. ","valuetype":"String","filenamebase":"AgentLanguage_Method","fqnprefix":"CouchVSE.CouchAgent","qn":"Get.AgentLanguage","codesample":"&amp;apos; Sample code assumes previously instantiated agent As CouchAgent object. \n \nPrint |agent.AgentLanguage: | &amp;amp; agent.AgentLanguage","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get AgentLanguage As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Programming language for which the CouchAgent has been written. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Programming language for which the CouchAgent has been written. ","inlinecomment":" \t &apos; Programming language for which the CouchAgent has been written. ","parentclassname":"CouchAgent","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated agent As CouchAgent object. &lt;br /&gt; &lt;br /&gt;Print |agent.AgentLanguage: | &amp;amp; agent.AgentLanguage", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"AgentMetadata","comment":"Meta information about the CouchAgent","valuetype":"String","filenamebase":"AgentMetadata_Method","fqnprefix":"CouchVSE.CouchAgent","qn":"Get.AgentMetadata","codesample":"&amp;apos; Sample code assumes previously instantiated agent As CouchAgent object. \n \nPrint |agent.AgentMetadata: | &amp;amp; agent.AgentMetadata ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get AgentMetadata As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Meta information about the CouchAgent&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Meta information about the CouchAgent","inlinecomment":" \t &apos; Meta information about the CouchAgent","parentclassname":"CouchAgent","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated agent As CouchAgent object. &lt;br /&gt; &lt;br /&gt;Print |agent.AgentMetadata: | &amp;amp; agent.AgentMetadata ", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Name","comment":"Name of the CouchAgent","valuetype":"String","filenamebase":"Name_Method","fqnprefix":"CouchVSE.CouchAgent","qn":"Get.Name","codesample":"Print |agent.Name: | &amp;amp; agent.Name ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Name As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the CouchAgent&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the CouchAgent","inlinecomment":" \t &apos; Name of the CouchAgent","parentclassname":"CouchAgent","codesamplehtml":"Print |agent.Name: | &amp;amp; agent.Name ", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Revision","comment":"Unique code representing the revision value of the on-disk CouchAgent . This value is composed of 2 parts delimited by a hyphen.  This value is generated by Apache CouchDB itself, and if officially &amp;quot;opaque&amp;quot; - other than it is unique. \n  \nBehavior Notes:\n1) This is not set until the CouchAgent has been saved. ","valuetype":"String","filenamebase":"Revision_Method","fqnprefix":"CouchVSE.CouchAgent","qn":"Get.Revision","codesample":"&amp;apos; Sample code assumes previously instantiated agent As CouchAgent object. \n \nPrint |agent.Revision: | &amp;amp; agent.Revision ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Revision As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Unique code representing the revision value of the on-disk CouchAgent . This value is composed of 2 parts delimited by a hyphen.  This value is generated by Apache CouchDB itself, and if officially &amp;quot;opaque&amp;quot; - other than it is unique. &lt;br /&gt;  &lt;br /&gt;Behavior Notes:&lt;br /&gt;1) This is not set until the CouchAgent has been saved. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Unique code representing the revision value of the on-disk CouchAgent . This value is composed of 2 parts delimited by a hyphen.  This value is generated by Apache CouchDB itself, and if officially &amp;quot;opaque&amp;quot; - other than it is unique. &lt;br /&gt;  &lt;br /&gt;Behavior Notes:&lt;br /&gt;1) This is not set until the CouchAgent has been saved. ","inlinecomment":" \t &apos; Unique code representing the revision value of the on-disk CouchAgent . This value is composed of 2 parts delimited by a hyphen.  This value is generated by Apache CouchDB itself, and if officially &amp;quot;opaque&amp;quot; - other than it is unique. \n  \nBehavior Notes:\n1) This is not set until the CouchAgent has been saved. ","parentclassname":"CouchAgent","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated agent As CouchAgent object. &lt;br /&gt; &lt;br /&gt;Print |agent.Revision: | &amp;amp; agent.Revision ", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"AgentCode","comment":"Source code for the agent. ","valuetype":"String","filenamebase":"AgentCode_Method","fqnprefix":"CouchVSE.CouchAgent","qn":"Set.AgentCode","codesample":"&amp;apos; Sample code assumes previously instantiated agent As CouchAgent object. \n \nPrint |agent.AgentCode: | &amp;amp; agent.AgentCode ","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set AgentCode As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Source code for the agent. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Source code for the agent. ","inlinecomment":" \t &apos; Source code for the agent. ","parentclassname":"CouchAgent","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated agent As CouchAgent object. &lt;br /&gt; &lt;br /&gt;Print |agent.AgentCode: | &amp;amp; agent.AgentCode ", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"AgentLanguage","comment":"Programming language for which the CouchAgent has been written. ","valuetype":"String","filenamebase":"AgentLanguage_Method","fqnprefix":"CouchVSE.CouchAgent","qn":"Set.AgentLanguage","codesample":"&amp;apos; Sample code assumes previously instantiated agent As CouchAgent object. \n \nPrint |agent.AgentLanguage: | &amp;amp; agent.AgentLanguage","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set AgentLanguage As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Programming language for which the CouchAgent has been written. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Programming language for which the CouchAgent has been written. ","inlinecomment":" \t &apos; Programming language for which the CouchAgent has been written. ","parentclassname":"CouchAgent","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated agent As CouchAgent object. &lt;br /&gt; &lt;br /&gt;Print |agent.AgentLanguage: | &amp;amp; agent.AgentLanguage", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"AgentMetadata","comment":"Meta information about the CouchAgent","valuetype":"String","filenamebase":"AgentMetadata_Method","fqnprefix":"CouchVSE.CouchAgent","qn":"Set.AgentMetadata","codesample":"&amp;apos; Sample code assumes previously instantiated agent As CouchAgent object. \n \nPrint |agent.AgentMetadata: | &amp;amp; agent.AgentMetadata ","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set AgentMetadata As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Meta information about the CouchAgent&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Meta information about the CouchAgent","inlinecomment":" \t &apos; Meta information about the CouchAgent","parentclassname":"CouchAgent","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated agent As CouchAgent object. &lt;br /&gt; &lt;br /&gt;Print |agent.AgentMetadata: | &amp;amp; agent.AgentMetadata ", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]}]},{"classname":"CouchAttachment","comment":"Carrier for Meta information about an attached file for a CouchDocument \n \nCreation - Use the CouchDocument.CreateAttachment() method \nRetrieval - Use the CouchDocument.GetAttachmentInfo() method. ","valuetype":"","filenamebase":"CouchAttachment_ObjectClass","fqnprefix":"CouchVSE","qn":"CouchAttachment","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","classattribnewnotexposed":"UnexposedNew","projectid":"85258A0A005BFF7B85258714004ECA02","version":3,"classid":"85258A0A005BFF7B852587EE00656089","lsxclassid":7,"signature":"Public Class CouchAttachment","modifiers":"Public","classname":"CouchAttachment","parentclassname":"None","constructorsignature":"Function New() As CouchAttachment","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Carrier for Meta information about an attached file for a CouchDocument &lt;br /&gt; &lt;br /&gt;Creation - Use the CouchDocument.CreateAttachment() method &lt;br /&gt;Retrieval - Use the CouchDocument.GetAttachmentInfo() method. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Carrier for Meta information about an attached file for a CouchDocument &lt;br /&gt; &lt;br /&gt;Creation - Use the CouchDocument.CreateAttachment() method &lt;br /&gt;Retrieval - Use the CouchDocument.GetAttachmentInfo() method. ","inlinecomment":" \t &apos; Carrier for Meta information about an attached file for a CouchDocument \n \nCreation - Use the CouchDocument.CreateAttachment() method \nRetrieval - Use the CouchDocument.GetAttachmentInfo() method. ","codesamplehtml":"", "methods":[{"label":"Download","comment":"Downloads the file for the CouchAttachment object to the LOCAL filesystem. ","valuetype":"Long-Unsigned","filenamebase":"Download_Method","fqnprefix":"CouchVSE.CouchAttachment","qn":"Download","codesample":"&amp;apos; Sample code assumes previously instantiated document as CouchDocument object \n   \nDim attachment as CouchAttachment \nDim bytes As Long \nDim targetfilepath As String \n \nSet attachment = document.getAttachmentInfo(&amp;quot;watermelonsalad.png&amp;quot;)\nPrint |acquired attachment for &amp;quot;watermelonsalad.png&amp;quot;|\n \ntargetfilepath = CurDir() &amp;amp; &amp;quot;/resources/watermelonsalad_copy.png&amp;quot;\n \nPrint |downloading to | &amp;amp; targetfilepath \nbytes = attachment.Download(targetfilepath, True)\n \nPrint |Attachment.Download() returned | cstr(bytes)\n ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DiskFile As String, Overwrite As Boolean)","signature":"Function Download(DiskFile As String, Overwrite As Boolean) As Long","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Downloads the file for the CouchAttachment object to the LOCAL filesystem. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Downloads the file for the CouchAttachment object to the LOCAL filesystem. ","inlinecomment":" \t &apos; Downloads the file for the CouchAttachment object to the LOCAL filesystem. ","parentclassname":"CouchAttachment","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated document as CouchDocument object &lt;br /&gt;   &lt;br /&gt;Dim attachment as CouchAttachment &lt;br /&gt;Dim bytes As Long &lt;br /&gt;Dim targetfilepath As String &lt;br /&gt; &lt;br /&gt;Set attachment = document.getAttachmentInfo(&amp;quot;watermelonsalad.png&amp;quot;)&lt;br /&gt;Print |acquired attachment for &amp;quot;watermelonsalad.png&amp;quot;|&lt;br /&gt; &lt;br /&gt;targetfilepath = CurDir() &amp;amp; &amp;quot;/resources/watermelonsalad_copy.png&amp;quot;&lt;br /&gt; &lt;br /&gt;Print |downloading to | &amp;amp; targetfilepath &lt;br /&gt;bytes = attachment.Download(targetfilepath, True)&lt;br /&gt; &lt;br /&gt;Print |Attachment.Download() returned | cstr(bytes)&lt;br /&gt; ", "signatureelements":["Function"], "arguments":[{"label":"DiskFile","comment":"","valuetype":"String","filenamebase":"DiskFile_ValuedElement","fqnprefix":"CouchVSECouchAttachmentDownload","qn":"DiskFile","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""},{"label":"Overwrite","comment":"","valuetype":"Boolean","filenamebase":"Overwrite_ValuedElement","fqnprefix":"CouchVSECouchAttachmentDownload","qn":"Overwrite","argumentindex":2,"commentblock":"","commenthtml":"","inlinecomment":"", "attributes":["BY_VAL"]}]},{"label":"New","comment":"NOT AVAILABLE - Use CouchDocument.CreateAttachment() or CouchDocument.GetAttachmentInfo() methods. ","valuetype":"CouchAttachment","filenamebase":"New_Method","fqnprefix":"CouchVSE.CouchAttachment","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As CouchAttachment","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT AVAILABLE - Use CouchDocument.CreateAttachment() or CouchDocument.GetAttachmentInfo() methods. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT AVAILABLE - Use CouchDocument.CreateAttachment() or CouchDocument.GetAttachmentInfo() methods. ","inlinecomment":" \t &apos; NOT AVAILABLE - Use CouchDocument.CreateAttachment() or CouchDocument.GetAttachmentInfo() methods. ","parentclassname":"CouchAttachment","codesamplehtml":"", "signatureelements":["Function"]},{"label":"Upload","comment":"Uploads the LOCAL filesystem file to the ParentDatabase of the CouchAttachment.  ","valuetype":"Long-Signed","filenamebase":"Upload_Method","fqnprefix":"CouchVSE.CouchAttachment","qn":"Upload","codesample":"&amp;apos; Sample code assumes previously instantiated document as CouchDocument object \n   \nDim attachment As CouchAttachment \nDim uploadedbytes As Long\n \nSet attachment = document.createAttachment(|watermelonsalad.png|, CurDir() &amp;amp; |/resources/watermelonsalad.png|, &amp;quot;image/png&amp;quot;)\nPrint |Created Attachment|\nPrint |attachment.Name: | &amp;amp; attachment.Name \nPrint |attachment.ContentLength: | &amp;amp; attachment.ContentLength \nPrint |attachment.ContentType: | &amp;amp; attachment.ContentType \nPrint |attachment.DiskFile: | &amp;amp; attachment.DiskFile \nPrint ||        \nPrint |Attachment Added but Not Yet Uploaded|\nPrint |document.JSONValue: | &amp;amp; document.JSONValue        \nPrint || \n \n&amp;apos; !! Document must be saved to disk before uploading attachments !! \nIf Not document.isSaved Then Call document.Save() \n \nuploadedbytes = attachment.Upload()\nPrint |attachment.Upload() returned | &amp;amp; uploadedbytes &amp;amp; | bytes.|\nPrint || ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function Upload() As Long","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Uploads the LOCAL filesystem file to the ParentDatabase of the CouchAttachment.  &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Uploads the LOCAL filesystem file to the ParentDatabase of the CouchAttachment.  ","inlinecomment":" \t &apos; Uploads the LOCAL filesystem file to the ParentDatabase of the CouchAttachment.  ","parentclassname":"CouchAttachment","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated document as CouchDocument object &lt;br /&gt;   &lt;br /&gt;Dim attachment As CouchAttachment &lt;br /&gt;Dim uploadedbytes As Long&lt;br /&gt; &lt;br /&gt;Set attachment = document.createAttachment(|watermelonsalad.png|, CurDir() &amp;amp; |/resources/watermelonsalad.png|, &amp;quot;image/png&amp;quot;)&lt;br /&gt;Print |Created Attachment|&lt;br /&gt;Print |attachment.Name: | &amp;amp; attachment.Name &lt;br /&gt;Print |attachment.ContentLength: | &amp;amp; attachment.ContentLength &lt;br /&gt;Print |attachment.ContentType: | &amp;amp; attachment.ContentType &lt;br /&gt;Print |attachment.DiskFile: | &amp;amp; attachment.DiskFile &lt;br /&gt;Print ||        &lt;br /&gt;Print |Attachment Added but Not Yet Uploaded|&lt;br /&gt;Print |document.JSONValue: | &amp;amp; document.JSONValue        &lt;br /&gt;Print || &lt;br /&gt; &lt;br /&gt;&amp;apos; !! Document must be saved to disk before uploading attachments !! &lt;br /&gt;If Not document.isSaved Then Call document.Save() &lt;br /&gt; &lt;br /&gt;uploadedbytes = attachment.Upload()&lt;br /&gt;Print |attachment.Upload() returned | &amp;amp; uploadedbytes &amp;amp; | bytes.|&lt;br /&gt;Print || ", "signatureelements":["Function"]},{"label":"ContentLength","comment":"Number of Bytes used by the actual file referenced by the CouchAttachment object. ","valuetype":"Long-Unsigned","filenamebase":"ContentLength_Method","fqnprefix":"CouchVSE.CouchAttachment","qn":"Get.ContentLength","codesample":"&amp;apos; Sample code assumes previously instantiated attachment as CouchAttachment object \n  \nSub PrintCouchAttachmentInfo(attachment as CouchAttachment)\n    Print |attachment.Name: | &amp;amp; attachment.Name \n    Print |attachment.ContentLength: | &amp;amp; attachment.ContentLength \n    Print |attachment.ContentType: | &amp;amp; attachment.ContentType \n    Print |attachment.DiskFile: | &amp;amp; attachment.DiskFile \nEnd Sub ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ContentLength As Long","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Number of Bytes used by the actual file referenced by the CouchAttachment object. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Number of Bytes used by the actual file referenced by the CouchAttachment object. ","inlinecomment":" \t &apos; Number of Bytes used by the actual file referenced by the CouchAttachment object. ","parentclassname":"CouchAttachment","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated attachment as CouchAttachment object &lt;br /&gt;  &lt;br /&gt;Sub PrintCouchAttachmentInfo(attachment as CouchAttachment)&lt;br /&gt;    Print |attachment.Name: | &amp;amp; attachment.Name &lt;br /&gt;    Print |attachment.ContentLength: | &amp;amp; attachment.ContentLength &lt;br /&gt;    Print |attachment.ContentType: | &amp;amp; attachment.ContentType &lt;br /&gt;    Print |attachment.DiskFile: | &amp;amp; attachment.DiskFile &lt;br /&gt;End Sub ", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"ContentType","comment":"String describing the content type of the CouchAttachment.   \n \nNOTE: There is no logic or detection processes backing this property.  It is manually set and completely arbitrary. ","valuetype":"String","filenamebase":"ContentType_Method","fqnprefix":"CouchVSE.CouchAttachment","qn":"Get.ContentType","codesample":"&amp;apos; Sample code assumes previously instantiated attachment as CouchAttachment object \n  \nSub PrintCouchAttachmentInfo(attachment as CouchAttachment)\n    Print |attachment.Name: | &amp;amp; attachment.Name \n    Print |attachment.ContentLength: | &amp;amp; attachment.ContentLength \n    Print |attachment.ContentType: | &amp;amp; attachment.ContentType \n    Print |attachment.DiskFile: | &amp;amp; attachment.DiskFile \nEnd Sub ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ContentType As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String describing the content type of the CouchAttachment.   &lt;br /&gt; &lt;br /&gt;NOTE: There is no logic or detection processes backing this property.  It is manually set and completely arbitrary. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String describing the content type of the CouchAttachment.   &lt;br /&gt; &lt;br /&gt;NOTE: There is no logic or detection processes backing this property.  It is manually set and completely arbitrary. ","inlinecomment":" \t &apos; String describing the content type of the CouchAttachment.   \n \nNOTE: There is no logic or detection processes backing this property.  It is manually set and completely arbitrary. ","parentclassname":"CouchAttachment","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated attachment as CouchAttachment object &lt;br /&gt;  &lt;br /&gt;Sub PrintCouchAttachmentInfo(attachment as CouchAttachment)&lt;br /&gt;    Print |attachment.Name: | &amp;amp; attachment.Name &lt;br /&gt;    Print |attachment.ContentLength: | &amp;amp; attachment.ContentLength &lt;br /&gt;    Print |attachment.ContentType: | &amp;amp; attachment.ContentType &lt;br /&gt;    Print |attachment.DiskFile: | &amp;amp; attachment.DiskFile &lt;br /&gt;End Sub ", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"DiskFile","comment":"The LOCAL filepath to the file for a CouchAttachment object.   \n \nNOTE: This is only valid for CouchAttachments which have been created during the current session. It will be blank for CouchAttachment objects retrieved from the CouchDatabas","valuetype":"String","filenamebase":"DiskFile_Method","fqnprefix":"CouchVSE.CouchAttachment","qn":"Get.DiskFile","codesample":"&amp;apos; Sample code assumes previously instantiated attachment as CouchAttachment object \n  \nSub PrintCouchAttachmentInfo(attachment as CouchAttachment)\n    Print |attachment.Name: | &amp;amp; attachment.Name \n    Print |attachment.ContentLength: | &amp;amp; attachment.ContentLength \n    Print |attachment.ContentType: | &amp;amp; attachment.ContentType \n    Print |attachment.DiskFile: | &amp;amp; attachment.DiskFile \nEnd Sub ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get DiskFile As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;The LOCAL filepath to the file for a CouchAttachment object.   &lt;br /&gt; &lt;br /&gt;NOTE: This is only valid for CouchAttachments which have been created during the current session. It will be blank for CouchAttachment objects retrieved from the CouchDatabas&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"The LOCAL filepath to the file for a CouchAttachment object.   &lt;br /&gt; &lt;br /&gt;NOTE: This is only valid for CouchAttachments which have been created during the current session. It will be blank for CouchAttachment objects retrieved from the CouchDatabas","inlinecomment":" \t &apos; The LOCAL filepath to the file for a CouchAttachment object.   \n \nNOTE: This is only valid for CouchAttachments which have been created during the current session. It will be blank for CouchAttachment objects retrieved from the CouchDatabas","parentclassname":"CouchAttachment","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated attachment as CouchAttachment object &lt;br /&gt;  &lt;br /&gt;Sub PrintCouchAttachmentInfo(attachment as CouchAttachment)&lt;br /&gt;    Print |attachment.Name: | &amp;amp; attachment.Name &lt;br /&gt;    Print |attachment.ContentLength: | &amp;amp; attachment.ContentLength &lt;br /&gt;    Print |attachment.ContentType: | &amp;amp; attachment.ContentType &lt;br /&gt;    Print |attachment.DiskFile: | &amp;amp; attachment.DiskFile &lt;br /&gt;End Sub ", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"MD5Hash","comment":"NOT IMPLEMENTED","valuetype":"String","filenamebase":"MD5Hash_Method","fqnprefix":"CouchVSE.CouchAttachment","qn":"Get.MD5Hash","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get MD5Hash As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED","inlinecomment":" \t &apos; NOT IMPLEMENTED","parentclassname":"CouchAttachment","codesamplehtml":"", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Name","comment":"Name of the CouchAttachment.  \n \nNOTE: There is no logic or detection processes backing this property.  It is manually set and completely arbitrary. ","valuetype":"String","filenamebase":"Name_Method","fqnprefix":"CouchVSE.CouchAttachment","qn":"Get.Name","codesample":"&amp;apos; Sample code assumes previously instantiated attachment as CouchAttachment object \n  \nSub PrintCouchAttachmentInfo(attachment as CouchAttachment)\n    Print |attachment.Name: | &amp;amp; attachment.Name \n    Print |attachment.ContentLength: | &amp;amp; attachment.ContentLength \n    Print |attachment.ContentType: | &amp;amp; attachment.ContentType \n    Print |attachment.DiskFile: | &amp;amp; attachment.DiskFile","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Name As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the CouchAttachment.  &lt;br /&gt; &lt;br /&gt;NOTE: There is no logic or detection processes backing this property.  It is manually set and completely arbitrary. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the CouchAttachment.  &lt;br /&gt; &lt;br /&gt;NOTE: There is no logic or detection processes backing this property.  It is manually set and completely arbitrary. ","inlinecomment":" \t &apos; Name of the CouchAttachment.  \n \nNOTE: There is no logic or detection processes backing this property.  It is manually set and completely arbitrary. ","parentclassname":"CouchAttachment","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated attachment as CouchAttachment object &lt;br /&gt;  &lt;br /&gt;Sub PrintCouchAttachmentInfo(attachment as CouchAttachment)&lt;br /&gt;    Print |attachment.Name: | &amp;amp; attachment.Name &lt;br /&gt;    Print |attachment.ContentLength: | &amp;amp; attachment.ContentLength &lt;br /&gt;    Print |attachment.ContentType: | &amp;amp; attachment.ContentType &lt;br /&gt;    Print |attachment.DiskFile: | &amp;amp; attachment.DiskFile", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"ParentDocument","comment":"CouchDocument object for which the CouchAttachment is associated. ","valuetype":"CouchDocument","filenamebase":"ParentDocument_Method","fqnprefix":"CouchVSE.CouchAttachment","qn":"Get.ParentDocument","codesample":"&amp;apos; Sample code assumes previously instantiated attachment as CouchAttachment object\n \nDim document As CouchDocument \n \nSet document = attachment.ParentDocument","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ParentDocument As CouchDocument","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;CouchDocument object for which the CouchAttachment is associated. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"CouchDocument object for which the CouchAttachment is associated. ","inlinecomment":" \t &apos; CouchDocument object for which the CouchAttachment is associated. ","parentclassname":"CouchAttachment","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated attachment as CouchAttachment object&lt;br /&gt; &lt;br /&gt;Dim document As CouchDocument &lt;br /&gt; &lt;br /&gt;Set document = attachment.ParentDocument", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"ContentType","comment":"String describing the content type of the CouchAttachment.   \n \nNOTE: There is no logic or detection processes backing this property.  It is manually set and completely arbitrary. ","valuetype":"String","filenamebase":"ContentType_Method","fqnprefix":"CouchVSE.CouchAttachment","qn":"Set.ContentType","codesample":"&amp;apos; Sample code assumes previously instantiated attachment as CouchAttachment object \n  \nSub PrintCouchAttachmentInfo(attachment as CouchAttachment)\n    Print |attachment.Name: | &amp;amp; attachment.Name \n    Print |attachment.ContentLength: | &amp;amp; attachment.ContentLength \n    Print |attachment.ContentType: | &amp;amp; attachment.ContentType \n    Print |attachment.DiskFile: | &amp;amp; attachment.DiskFile \nEnd Sub ","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set ContentType As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String describing the content type of the CouchAttachment.   &lt;br /&gt; &lt;br /&gt;NOTE: There is no logic or detection processes backing this property.  It is manually set and completely arbitrary. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String describing the content type of the CouchAttachment.   &lt;br /&gt; &lt;br /&gt;NOTE: There is no logic or detection processes backing this property.  It is manually set and completely arbitrary. ","inlinecomment":" \t &apos; String describing the content type of the CouchAttachment.   \n \nNOTE: There is no logic or detection processes backing this property.  It is manually set and completely arbitrary. ","parentclassname":"CouchAttachment","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated attachment as CouchAttachment object &lt;br /&gt;  &lt;br /&gt;Sub PrintCouchAttachmentInfo(attachment as CouchAttachment)&lt;br /&gt;    Print |attachment.Name: | &amp;amp; attachment.Name &lt;br /&gt;    Print |attachment.ContentLength: | &amp;amp; attachment.ContentLength &lt;br /&gt;    Print |attachment.ContentType: | &amp;amp; attachment.ContentType &lt;br /&gt;    Print |attachment.DiskFile: | &amp;amp; attachment.DiskFile &lt;br /&gt;End Sub ", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"Name","comment":"Name of the CouchAttachment.  \n \nNOTE: There is no logic or detection processes backing this property.  It is manually set and completely arbitrary. ","valuetype":"String","filenamebase":"Name_Method","fqnprefix":"CouchVSE.CouchAttachment","qn":"Set.Name","codesample":"&amp;apos; Sample code assumes previously instantiated attachment as CouchAttachment object \n  \nSub PrintCouchAttachmentInfo(attachment as CouchAttachment)\n    Print |attachment.Name: | &amp;amp; attachment.Name \n    Print |attachment.ContentLength: | &amp;amp; attachment.ContentLength \n    Print |attachment.ContentType: | &amp;amp; attachment.ContentType \n    Print |attachment.DiskFile: | &amp;amp; attachment.DiskFile","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set Name As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the CouchAttachment.  &lt;br /&gt; &lt;br /&gt;NOTE: There is no logic or detection processes backing this property.  It is manually set and completely arbitrary. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the CouchAttachment.  &lt;br /&gt; &lt;br /&gt;NOTE: There is no logic or detection processes backing this property.  It is manually set and completely arbitrary. ","inlinecomment":" \t &apos; Name of the CouchAttachment.  \n \nNOTE: There is no logic or detection processes backing this property.  It is manually set and completely arbitrary. ","parentclassname":"CouchAttachment","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated attachment as CouchAttachment object &lt;br /&gt;  &lt;br /&gt;Sub PrintCouchAttachmentInfo(attachment as CouchAttachment)&lt;br /&gt;    Print |attachment.Name: | &amp;amp; attachment.Name &lt;br /&gt;    Print |attachment.ContentLength: | &amp;amp; attachment.ContentLength &lt;br /&gt;    Print |attachment.ContentType: | &amp;amp; attachment.ContentType &lt;br /&gt;    Print |attachment.DiskFile: | &amp;amp; attachment.DiskFile", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]}]},{"classname":"CouchDatabase","comment":"Represents a CouchDB Database \n \nCreation - Use the CouchServer.CreateDb() method \nRetrieval - Use the CouchServer.GetDb() method \nDeletion - Use the CouchServer.DeleteDb() method","valuetype":"","filenamebase":"CouchDatabase_ObjectClass","fqnprefix":"CouchVSE","qn":"CouchDatabase","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","classattribnewnotexposed":"UnexposedNew","projectid":"85258A0A005BFF7B85258714004ECA02","version":3,"classid":"85258A0A005BFF7B8525871500367271","lsxclassid":3,"signature":"Public Class CouchDatabase","modifiers":"Public","classname":"CouchDatabase","parentclassname":"None","constructorsignature":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Represents a CouchDB Database &lt;br /&gt; &lt;br /&gt;Creation - Use the CouchServer.CreateDb() method &lt;br /&gt;Retrieval - Use the CouchServer.GetDb() method &lt;br /&gt;Deletion - Use the CouchServer.DeleteDb() method&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Represents a CouchDB Database &lt;br /&gt; &lt;br /&gt;Creation - Use the CouchServer.CreateDb() method &lt;br /&gt;Retrieval - Use the CouchServer.GetDb() method &lt;br /&gt;Deletion - Use the CouchServer.DeleteDb() method","inlinecomment":" \t &apos; Represents a CouchDB Database \n \nCreation - Use the CouchServer.CreateDb() method \nRetrieval - Use the CouchServer.GetDb() method \nDeletion - Use the CouchServer.DeleteDb() method","codesamplehtml":"", "methods":[{"label":"CreateAgent","comment":"Creates a CouchAgent in the specified CouchDatabase","valuetype":"CouchAgent","filenamebase":"CreateAgent_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"CreateAgent","codesample":"Function getCouchDbAgent(source As CouchDatabase, agentname As String, spawnnew As Boolean) As CouchAgent\n \n    Try \n        If source.isAgent(agentname) Then \n            Return source.getAgent(agentname) \n        ElseIf spawnnew Then \n            Return source.createAgent(agentname)\n        End If     \n    Catch \n        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() \n        Print |spawnnew: | &amp;amp; spawnnew \n        Print |agentname: | &amp;amp; agentname \n        Print |source: | &amp;amp; source.Name \n    End Try \n \nEnd Function","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String)","signature":"Function CreateAgent(Name As String) As CouchAgent","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a CouchAgent in the specified CouchDatabase&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a CouchAgent in the specified CouchDatabase","inlinecomment":" \t &apos; Creates a CouchAgent in the specified CouchDatabase","parentclassname":"CouchDatabase","codesamplehtml":"Function getCouchDbAgent(source As CouchDatabase, agentname As String, spawnnew As Boolean) As CouchAgent&lt;br /&gt; &lt;br /&gt;    Try &lt;br /&gt;        If source.isAgent(agentname) Then &lt;br /&gt;            Return source.getAgent(agentname) &lt;br /&gt;        ElseIf spawnnew Then &lt;br /&gt;            Return source.createAgent(agentname)&lt;br /&gt;        End If     &lt;br /&gt;    Catch &lt;br /&gt;        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() &lt;br /&gt;        Print |spawnnew: | &amp;amp; spawnnew &lt;br /&gt;        Print |agentname: | &amp;amp; agentname &lt;br /&gt;        Print |source: | &amp;amp; source.Name &lt;br /&gt;    End Try &lt;br /&gt; &lt;br /&gt;End Function", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"Name of the CouchAgent to be created","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchDatabaseCreateAgent","qn":"Name","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the CouchAgent to be created&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the CouchAgent to be created","inlinecomment":" \t &apos; Name of the CouchAgent to be created"}]},{"label":"CreateDocument","comment":"Creates a new CouchDocument","valuetype":"CouchDocument","filenamebase":"CreateDocument_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"CreateDocument","codesample":"&amp;apos; Sample code assumes previously created server as CouchServer and database as CouchDatabase objects\n  \n    Dim document As CouchDocument \n    Dim id As String \n    Dim json As String \n \n    id = server.getUUID() \n    json = |{\n            &amp;quot;recipe&amp;quot;: {\n                &amp;quot;name&amp;quot;: &amp;quot;Watermelon Salad&amp;quot;,\n                &amp;quot;PrepTime&amp;quot;: 15,\n                &amp;quot;CookTime&amp;quot;: 5,\n                &amp;quot;Servings&amp;quot;: 4,\n                &amp;quot;Difficulty&amp;quot;: &amp;quot;&amp;quot;,\n                &amp;quot;Ingredients&amp;quot;: [\n                    &amp;quot;6 cups cubed watermelon&amp;quot;,\n                    &amp;quot;2 tbsp. olive oil&amp;quot;,\n                    &amp;quot;1 tbsp. lime juice&amp;quot;,\n                    &amp;quot;1/3 cup chopped feta cheese&amp;quot;,\n                    &amp;quot;1/3 cup basil leaves&amp;quot;\n                ],\n                &amp;quot;Directions&amp;quot;: [\n                    &amp;quot;Cube 6 cups of watermelon&amp;quot;,\n                    &amp;quot;Stir in olive oil and lime juice&amp;quot;,\n                    &amp;quot;Chop, and stir in feta cheese&amp;quot;,\n                    &amp;quot;Garnish with fresh basil&amp;quot;\n                ]\n            }\n        }|\n     \n    Set document = database.createDocument(id, json) \n    Print |Created Document|\n    Print |document.ID: | &amp;amp; document.ID\n    Print |document.isModified: | &amp;amp; document.isModified\n    Print |document.isSaved: | &amp;amp; document.isSaved\n    Print |document.JSONValue: | &amp;amp; document.JSONValue\n    Print |document.Revision: | &amp;amp; document.Revision\n    Print |document.URL: | &amp;amp; document.URL","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(ID As String, JsonValues As String)","signature":"Function CreateDocument(ID As String, JsonValues As String) As CouchDocument","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a new CouchDocument&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a new CouchDocument","inlinecomment":" \t &apos; Creates a new CouchDocument","parentclassname":"CouchDatabase","codesamplehtml":"&amp;apos; Sample code assumes previously created server as CouchServer and database as CouchDatabase objects&lt;br /&gt;  &lt;br /&gt;    Dim document As CouchDocument &lt;br /&gt;    Dim id As String &lt;br /&gt;    Dim json As String &lt;br /&gt; &lt;br /&gt;    id = server.getUUID() &lt;br /&gt;    json = |{&lt;br /&gt;            &amp;quot;recipe&amp;quot;: {&lt;br /&gt;                &amp;quot;name&amp;quot;: &amp;quot;Watermelon Salad&amp;quot;,&lt;br /&gt;                &amp;quot;PrepTime&amp;quot;: 15,&lt;br /&gt;                &amp;quot;CookTime&amp;quot;: 5,&lt;br /&gt;                &amp;quot;Servings&amp;quot;: 4,&lt;br /&gt;                &amp;quot;Difficulty&amp;quot;: &amp;quot;&amp;quot;,&lt;br /&gt;                &amp;quot;Ingredients&amp;quot;: [&lt;br /&gt;                    &amp;quot;6 cups cubed watermelon&amp;quot;,&lt;br /&gt;                    &amp;quot;2 tbsp. olive oil&amp;quot;,&lt;br /&gt;                    &amp;quot;1 tbsp. lime juice&amp;quot;,&lt;br /&gt;                    &amp;quot;1/3 cup chopped feta cheese&amp;quot;,&lt;br /&gt;                    &amp;quot;1/3 cup basil leaves&amp;quot;&lt;br /&gt;                ],&lt;br /&gt;                &amp;quot;Directions&amp;quot;: [&lt;br /&gt;                    &amp;quot;Cube 6 cups of watermelon&amp;quot;,&lt;br /&gt;                    &amp;quot;Stir in olive oil and lime juice&amp;quot;,&lt;br /&gt;                    &amp;quot;Chop, and stir in feta cheese&amp;quot;,&lt;br /&gt;                    &amp;quot;Garnish with fresh basil&amp;quot;&lt;br /&gt;                ]&lt;br /&gt;            }&lt;br /&gt;        }|&lt;br /&gt;     &lt;br /&gt;    Set document = database.createDocument(id, json) &lt;br /&gt;    Print |Created Document|&lt;br /&gt;    Print |document.ID: | &amp;amp; document.ID&lt;br /&gt;    Print |document.isModified: | &amp;amp; document.isModified&lt;br /&gt;    Print |document.isSaved: | &amp;amp; document.isSaved&lt;br /&gt;    Print |document.JSONValue: | &amp;amp; document.JSONValue&lt;br /&gt;    Print |document.Revision: | &amp;amp; document.Revision&lt;br /&gt;    Print |document.URL: | &amp;amp; document.URL", "signatureelements":["Function"], "arguments":[{"label":"ID","comment":"","valuetype":"String","filenamebase":"ID_ValuedElement","fqnprefix":"CouchVSECouchDatabaseCreateDocument","qn":"ID","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":"", "attributes":["BY_VAL"]},{"label":"JsonValues","comment":"","valuetype":"String","filenamebase":"JsonValues_ValuedElement","fqnprefix":"CouchVSECouchDatabaseCreateDocument","qn":"JsonValues","argumentindex":2,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"CreateView","comment":"Creates a CouchView within the CouchDatabase","valuetype":"CouchView","filenamebase":"CreateView_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"CreateView","codesample":"&amp;apos; Sample code assumes previously created database as CouchDatabase, valid id variable, and valid spawnnew flag objects\n   \nFunction getCouchDbView(database As CouchDatabase, id As String, spawnnew As Boolean) As CouchView\n \n    Try \n        If database.isView(id) Then \n            Return database.getViewByID(id) \n        ElseIf spawnnew Then \n            Return database.createView(id)\n        End If     \n    Catch \n        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() \n        Print |spawnnew: | &amp;amp; spawnnew \n        Print |id: | &amp;amp; id \n        Print |database: | &amp;amp; database.Name \n    End Try \n \nEnd Function","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String)","signature":"Function CreateView(Name As String) As CouchView","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a CouchView within the CouchDatabase&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a CouchView within the CouchDatabase","inlinecomment":" \t &apos; Creates a CouchView within the CouchDatabase","parentclassname":"CouchDatabase","codesamplehtml":"&amp;apos; Sample code assumes previously created database as CouchDatabase, valid id variable, and valid spawnnew flag objects&lt;br /&gt;   &lt;br /&gt;Function getCouchDbView(database As CouchDatabase, id As String, spawnnew As Boolean) As CouchView&lt;br /&gt; &lt;br /&gt;    Try &lt;br /&gt;        If database.isView(id) Then &lt;br /&gt;            Return database.getViewByID(id) &lt;br /&gt;        ElseIf spawnnew Then &lt;br /&gt;            Return database.createView(id)&lt;br /&gt;        End If     &lt;br /&gt;    Catch &lt;br /&gt;        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() &lt;br /&gt;        Print |spawnnew: | &amp;amp; spawnnew &lt;br /&gt;        Print |id: | &amp;amp; id &lt;br /&gt;        Print |database: | &amp;amp; database.Name &lt;br /&gt;    End Try &lt;br /&gt; &lt;br /&gt;End Function", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchDatabaseCreateView","qn":"Name","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"DeleteAgent","comment":"Deletes the secified CouchAgent from the CouchDatabase","valuetype":"Boolean","filenamebase":"DeleteAgent_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"DeleteAgent","codesample":"Call database.deleteAgent(&amp;quot;agent name&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String)","signature":"Function DeleteAgent(Name As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Deletes the secified CouchAgent from the CouchDatabase&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Deletes the secified CouchAgent from the CouchDatabase","inlinecomment":" \t &apos; Deletes the secified CouchAgent from the CouchDatabase","parentclassname":"CouchDatabase","codesamplehtml":"Call database.deleteAgent(&amp;quot;agent name&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchDatabaseDeleteAgent","qn":"Name","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"DeleteDocument","comment":"Deletes a document from the CouchDatabase","valuetype":"Boolean","filenamebase":"DeleteDocument_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"DeleteDocument","codesample":"Function deleteCouchDbDocument(database As CouchDatabase, document As CouchDocument, preservestub As Boolean) As Boolean \n    Try \n        Return database.DeleteDocument(document, preservestub) \n    Catch \n        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() \n        Print |preservestub: | &amp;amp; preservestub \n        Print |document id: | &amp;amp; document.ID\n        Print |database: | &amp;amp; database.Name \n    End Try \nEnd Function","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Document As CouchDocument, Preserve As Boolean)","signature":"Function DeleteDocument(Document As CouchDocument, Preserve As Boolean) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Deletes a document from the CouchDatabase&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Deletes a document from the CouchDatabase","inlinecomment":" \t &apos; Deletes a document from the CouchDatabase","parentclassname":"CouchDatabase","codesamplehtml":"Function deleteCouchDbDocument(database As CouchDatabase, document As CouchDocument, preservestub As Boolean) As Boolean &lt;br /&gt;    Try &lt;br /&gt;        Return database.DeleteDocument(document, preservestub) &lt;br /&gt;    Catch &lt;br /&gt;        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() &lt;br /&gt;        Print |preservestub: | &amp;amp; preservestub &lt;br /&gt;        Print |document id: | &amp;amp; document.ID&lt;br /&gt;        Print |database: | &amp;amp; database.Name &lt;br /&gt;    End Try &lt;br /&gt;End Function", "signatureelements":["Function"], "arguments":[{"label":"Document","comment":"Docment to be deleted","valuetype":"CouchDocument","filenamebase":"Document_ValuedElement","fqnprefix":"CouchVSECouchDatabaseDeleteDocument","qn":"Document","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Docment to be deleted&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Docment to be deleted","inlinecomment":" \t &apos; Docment to be deleted"},{"label":"Preserve","comment":"Flag indicating if a deletion stub should be preserved ","valuetype":"Boolean","filenamebase":"Preserve_ValuedElement","fqnprefix":"CouchVSECouchDatabaseDeleteDocument","qn":"Preserve","argumentindex":2,"optionalvalue":"LSXFalse","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if a deletion stub should be preserved &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if a deletion stub should be preserved ","inlinecomment":" \t &apos; Flag indicating if a deletion stub should be preserved ", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"DeleteDocumentByID","comment":"Deletes the specified CouchDocument from the CouchDatabase","valuetype":"Boolean","filenamebase":"DeleteDocumentByID_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"DeleteDocumentByID","codesample":"Call database.deleteDocumentByID(&amp;quot;76796ba0df26f8c2e539cf39d302236f&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DocID As String, Preserve As Boolean)","signature":"Function DeleteDocumentByID(DocID As String, Preserve As Boolean) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Deletes the specified CouchDocument from the CouchDatabase&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Deletes the specified CouchDocument from the CouchDatabase","inlinecomment":" \t &apos; Deletes the specified CouchDocument from the CouchDatabase","parentclassname":"CouchDatabase","codesamplehtml":"Call database.deleteDocumentByID(&amp;quot;76796ba0df26f8c2e539cf39d302236f&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"DocID","comment":"ID of the CouchDocument to be deleted ","valuetype":"String","filenamebase":"DocID_ValuedElement","fqnprefix":"CouchVSECouchDatabaseDeleteDocumentByID","qn":"DocID","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;ID of the CouchDocument to be deleted &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"ID of the CouchDocument to be deleted ","inlinecomment":" \t &apos; ID of the CouchDocument to be deleted "},{"label":"Preserve","comment":"Flag indicating if the CouchDocument&amp;apos;s data should be preserved even though the document is marked as _deleted.","valuetype":"Boolean","filenamebase":"Preserve_ValuedElement","fqnprefix":"CouchVSECouchDatabaseDeleteDocumentByID","qn":"Preserve","argumentindex":2,"optionalvalue":"LSXFalse","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the CouchDocument&amp;apos;s data should be preserved even though the document is marked as _deleted.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the CouchDocument&amp;apos;s data should be preserved even though the document is marked as _deleted.","inlinecomment":" \t &apos; Flag indicating if the CouchDocument&amp;apos;s data should be preserved even though the document is marked as _deleted.", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"DeleteView","comment":"","valuetype":"Boolean","filenamebase":"DeleteView_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"DeleteView","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String)","signature":"Function DeleteView(Name As String) As Boolean","modifiers":"","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"CouchDatabase","codesamplehtml":"", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchDatabaseDeleteView","qn":"Name","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"GetAgent","comment":"Retrieves the specified CouchAgent from the CouchDatabase","valuetype":"CouchAgent","filenamebase":"GetAgent_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"GetAgent","codesample":"Function getCouchDbAgent(source As CouchDatabase, agentname As String, spawnnew As Boolean) As CouchAgent\n \n    Try \n        If source.isAgent(agentname) Then \n            Return source.getAgent(agentname) \n        ElseIf spawnnew Then \n            Return source.createAgent(agentname)\n        End If     \n    Catch \n        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() \n        Print |spawnnew: | &amp;amp; spawnnew \n        Print |agentname: | &amp;amp; agentname \n        Print |source: | &amp;amp; source.Name \n    End Try \n \nEnd Function","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String)","signature":"Function GetAgent(Name As String) As CouchAgent","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Retrieves the specified CouchAgent from the CouchDatabase&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Retrieves the specified CouchAgent from the CouchDatabase","inlinecomment":" \t &apos; Retrieves the specified CouchAgent from the CouchDatabase","parentclassname":"CouchDatabase","codesamplehtml":"Function getCouchDbAgent(source As CouchDatabase, agentname As String, spawnnew As Boolean) As CouchAgent&lt;br /&gt; &lt;br /&gt;    Try &lt;br /&gt;        If source.isAgent(agentname) Then &lt;br /&gt;            Return source.getAgent(agentname) &lt;br /&gt;        ElseIf spawnnew Then &lt;br /&gt;            Return source.createAgent(agentname)&lt;br /&gt;        End If     &lt;br /&gt;    Catch &lt;br /&gt;        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() &lt;br /&gt;        Print |spawnnew: | &amp;amp; spawnnew &lt;br /&gt;        Print |agentname: | &amp;amp; agentname &lt;br /&gt;        Print |source: | &amp;amp; source.Name &lt;br /&gt;    End Try &lt;br /&gt; &lt;br /&gt;End Function", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"Name of the CouchAgent to retrieve","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchDatabaseGetAgent","qn":"Name","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the CouchAgent to retrieve&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the CouchAgent to retrieve","inlinecomment":" \t &apos; Name of the CouchAgent to retrieve"}]},{"label":"GetDeletedIDs","comment":"Gets the IDs of all deleted elements within the CouchDatabase ","valuetype":"String","filenamebase":"GetDeletedIDs_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"GetDeletedIDs","codesample":"&amp;apos; Sample code assumes previously created database as CouchDatabase object. \n  \nDim elements As Variant \nDim i As Integer\n \nPrint |Getting DeletedIDs from | &amp;amp; database.Name \nelements = database.getDeletedIDs()  \n \ni = Ubound(elements) - Lbound(elements)\nIf (Len(FullTrim(elements(i))) &amp;gt; 0) Then i++\nPrint |There are | &amp;amp; i &amp;amp; | Deleted IDs: |, join(elements, |, |) ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(RememberLast As Boolean)","signature":"Function GetDeletedIDs(RememberLast As Boolean) As String Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the IDs of all deleted elements within the CouchDatabase &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the IDs of all deleted elements within the CouchDatabase ","inlinecomment":" \t &apos; Gets the IDs of all deleted elements within the CouchDatabase ","parentclassname":"CouchDatabase","codesamplehtml":"&amp;apos; Sample code assumes previously created database as CouchDatabase object. &lt;br /&gt;  &lt;br /&gt;Dim elements As Variant &lt;br /&gt;Dim i As Integer&lt;br /&gt; &lt;br /&gt;Print |Getting DeletedIDs from | &amp;amp; database.Name &lt;br /&gt;elements = database.getDeletedIDs()  &lt;br /&gt; &lt;br /&gt;i = Ubound(elements) - Lbound(elements)&lt;br /&gt;If (Len(FullTrim(elements(i))) &amp;gt; 0) Then i++&lt;br /&gt;Print |There are | &amp;amp; i &amp;amp; | Deleted IDs: |, join(elements, |, |) ", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"RememberLast","comment":"","valuetype":"Boolean","filenamebase":"RememberLast_ValuedElement","fqnprefix":"CouchVSECouchDatabaseGetDeletedIDs","qn":"RememberLast","argumentindex":1,"optionalvalue":"LSXFalse","commentblock":"","commenthtml":"","inlinecomment":"", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"GetDocumentByID","comment":"Gets a specified CouchDocument from the CouchDatabase.  ","valuetype":"CouchDocument","filenamebase":"GetDocumentByID_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"GetDocumentByID","codesample":"&amp;apos; Sample code assumes previously created database as CouchDatabase object and a KNOWN GOOD document. \n \nDim document As CouchDocument \n \nSet document = database.getDocumentByID(id) \nPrint |document.JSONValue | &amp;amp; document.JSONValue  ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(ID As String, IncludeDeleted As Boolean)","signature":"Function GetDocumentByID(ID As String, IncludeDeleted As Boolean) As CouchDocument","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets a specified CouchDocument from the CouchDatabase.  &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets a specified CouchDocument from the CouchDatabase.  ","inlinecomment":" \t &apos; Gets a specified CouchDocument from the CouchDatabase.  ","parentclassname":"CouchDatabase","codesamplehtml":"&amp;apos; Sample code assumes previously created database as CouchDatabase object and a KNOWN GOOD document. &lt;br /&gt; &lt;br /&gt;Dim document As CouchDocument &lt;br /&gt; &lt;br /&gt;Set document = database.getDocumentByID(id) &lt;br /&gt;Print |document.JSONValue | &amp;amp; document.JSONValue  ", "signatureelements":["Function"], "arguments":[{"label":"ID","comment":"","valuetype":"String","filenamebase":"ID_ValuedElement","fqnprefix":"CouchVSECouchDatabaseGetDocumentByID","qn":"ID","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""},{"label":"IncludeDeleted","comment":"","valuetype":"Boolean","filenamebase":"IncludeDeleted_ValuedElement","fqnprefix":"CouchVSECouchDatabaseGetDocumentByID","qn":"IncludeDeleted","argumentindex":2,"optionalvalue":"LSXFalse","commentblock":"","commenthtml":"","inlinecomment":"", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"GetViewByID","comment":"Gets a specified CouchView from the CouchDatabase.  ","valuetype":"CouchView","filenamebase":"GetViewByID_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"GetViewByID","codesample":"&amp;apos; Sample code assumes previously created database as CouchDatabase object and a KNOWN GOOD document. \n \nDim view As CouchView \n \nSet view = database.getViewByID(id) \nPrint |view.JSONValue | &amp;amp; view.JSONValue ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(ViewID As String)","signature":"Function GetViewByID(ViewID As String) As CouchView","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets a specified CouchView from the CouchDatabase.  &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets a specified CouchView from the CouchDatabase.  ","inlinecomment":" \t &apos; Gets a specified CouchView from the CouchDatabase.  ","parentclassname":"CouchDatabase","codesamplehtml":"&amp;apos; Sample code assumes previously created database as CouchDatabase object and a KNOWN GOOD document. &lt;br /&gt; &lt;br /&gt;Dim view As CouchView &lt;br /&gt; &lt;br /&gt;Set view = database.getViewByID(id) &lt;br /&gt;Print |view.JSONValue | &amp;amp; view.JSONValue ", "signatureelements":["Function"], "arguments":[{"label":"ViewID","comment":"","valuetype":"String","filenamebase":"ViewID_ValuedElement","fqnprefix":"CouchVSECouchDatabaseGetViewByID","qn":"ViewID","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"IsAgent","comment":"Indicates if a CouchAgent matching the specified name exists in the Couch Database","valuetype":"Boolean","filenamebase":"IsAgent_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"IsAgent","codesample":"Function getCouchDbAgent(source As CouchDatabase, agentname As String, spawnnew As Boolean) As CouchAgent\n \n    Try \n        If source.isAgent(agentname) Then \n            Return source.getAgent(agentname) \n        ElseIf spawnnew Then \n            Return source.createAgent(agentname)\n        End If     \n    Catch \n        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() \n        Print |spawnnew: | &amp;amp; spawnnew \n        Print |agentname: | &amp;amp; agentname \n        Print |source: | &amp;amp; source.Name \n    End Try \n \nEnd Function","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String)","signature":"Function IsAgent(Name As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Indicates if a CouchAgent matching the specified name exists in the Couch Database&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Indicates if a CouchAgent matching the specified name exists in the Couch Database","inlinecomment":" \t &apos; Indicates if a CouchAgent matching the specified name exists in the Couch Database","parentclassname":"CouchDatabase","codesamplehtml":"Function getCouchDbAgent(source As CouchDatabase, agentname As String, spawnnew As Boolean) As CouchAgent&lt;br /&gt; &lt;br /&gt;    Try &lt;br /&gt;        If source.isAgent(agentname) Then &lt;br /&gt;            Return source.getAgent(agentname) &lt;br /&gt;        ElseIf spawnnew Then &lt;br /&gt;            Return source.createAgent(agentname)&lt;br /&gt;        End If     &lt;br /&gt;    Catch &lt;br /&gt;        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() &lt;br /&gt;        Print |spawnnew: | &amp;amp; spawnnew &lt;br /&gt;        Print |agentname: | &amp;amp; agentname &lt;br /&gt;        Print |source: | &amp;amp; source.Name &lt;br /&gt;    End Try &lt;br /&gt; &lt;br /&gt;End Function", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"Name of the CouchAgent for which to check existence. ","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchDatabaseIsAgent","qn":"Name","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the CouchAgent for which to check existence. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the CouchAgent for which to check existence. ","inlinecomment":" \t &apos; Name of the CouchAgent for which to check existence. "}]},{"label":"IsDocument","comment":"Indicates if a CouchAgent matching the specified name exists in the CouchDatabase","valuetype":"Boolean","filenamebase":"IsDocument_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"IsDocument","codesample":"&amp;apos; Sample code assumes previously created database as CouchDatabase object, valid id variable, and valid spawnnew flag\n  \nFunction getCouchDbDocument(database As CouchDatabase, id As String, spawnnew As Boolean) As CouchDocument\n \n    Try \n        If database.isDocument(id) Then \n            Return database.getDocumentById(id)\n        ElseIf spawnnew Then \n            Return database.createDocument(id)\n        End If     \n    Catch \n        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() \n        Print |spawnnew: | &amp;amp; spawnnew \n        Print |id: | &amp;amp; id \n        Print |database: | &amp;amp; database.Name \n    End Try \n \nEnd Function","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DocID As String)","signature":"Function IsDocument(DocID As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Indicates if a CouchAgent matching the specified name exists in the CouchDatabase&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Indicates if a CouchAgent matching the specified name exists in the CouchDatabase","inlinecomment":" \t &apos; Indicates if a CouchAgent matching the specified name exists in the CouchDatabase","parentclassname":"CouchDatabase","codesamplehtml":"&amp;apos; Sample code assumes previously created database as CouchDatabase object, valid id variable, and valid spawnnew flag&lt;br /&gt;  &lt;br /&gt;Function getCouchDbDocument(database As CouchDatabase, id As String, spawnnew As Boolean) As CouchDocument&lt;br /&gt; &lt;br /&gt;    Try &lt;br /&gt;        If database.isDocument(id) Then &lt;br /&gt;            Return database.getDocumentById(id)&lt;br /&gt;        ElseIf spawnnew Then &lt;br /&gt;            Return database.createDocument(id)&lt;br /&gt;        End If     &lt;br /&gt;    Catch &lt;br /&gt;        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() &lt;br /&gt;        Print |spawnnew: | &amp;amp; spawnnew &lt;br /&gt;        Print |id: | &amp;amp; id &lt;br /&gt;        Print |database: | &amp;amp; database.Name &lt;br /&gt;    End Try &lt;br /&gt; &lt;br /&gt;End Function", "signatureelements":["Function"], "arguments":[{"label":"DocID","comment":"","valuetype":"String","filenamebase":"DocID_ValuedElement","fqnprefix":"CouchVSECouchDatabaseIsDocument","qn":"DocID","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"IsView","comment":"Indicates if a CouchView matching the name exists in the CouchDatabase","valuetype":"Boolean","filenamebase":"IsView_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"IsView","codesample":"&amp;apos; Sample code assumes previously created database as CouchDatabase object \n  \nDim view As CouchView \nDim viewname As String \n  \nviewname = |My View| \n  \nIf database.isView(viewname) Then \n\tPrint |Found View: | &amp;amp; viewname \n\tSet view = database.getViewByID(viewname) \n\tPrint |view.JSONValue: | &amp;amp; view.JSONValue  \nElse \n\tPrint |Could not find view: | &amp;amp; viewname \nEnd If ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String)","signature":"Function IsView(Name As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Indicates if a CouchView matching the name exists in the CouchDatabase&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Indicates if a CouchView matching the name exists in the CouchDatabase","inlinecomment":" \t &apos; Indicates if a CouchView matching the name exists in the CouchDatabase","parentclassname":"CouchDatabase","codesamplehtml":"&amp;apos; Sample code assumes previously created database as CouchDatabase object &lt;br /&gt;  &lt;br /&gt;Dim view As CouchView &lt;br /&gt;Dim viewname As String &lt;br /&gt;  &lt;br /&gt;viewname = |My View| &lt;br /&gt;  &lt;br /&gt;If database.isView(viewname) Then &lt;br /&gt;\tPrint |Found View: | &amp;amp; viewname &lt;br /&gt;\tSet view = database.getViewByID(viewname) &lt;br /&gt;\tPrint |view.JSONValue: | &amp;amp; view.JSONValue  &lt;br /&gt;Else &lt;br /&gt;\tPrint |Could not find view: | &amp;amp; viewname &lt;br /&gt;End If ", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchDatabaseIsView","qn":"Name","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"ACL","comment":"NOT IMPLEMENTED","valuetype":"CouchACL","filenamebase":"ACL_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"Get.ACL","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ACL As CouchACL","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED","inlinecomment":" \t &apos; NOT IMPLEMENTED","parentclassname":"CouchDatabase","codesamplehtml":"", "signatureelements":["Property","Get"]},{"label":"DocumentIDs","comment":"String Array containig the Ids for all Documents within a Couch Database","valuetype":"String","filenamebase":"DocumentIDs_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"Get.DocumentIDs","codesample":"Sub PrintCouchDbDocumentIDs(source As CouchDatabase) \n    Dim elements As Variant \n    Dim i As Integer\n \n    elements = source.DocumentIDs \n    i = Ubound(elements) - Lbound(elements)\n    If (Len(FullTrim(elements(i))) &amp;gt; 0) Then i++\n    Print &amp;quot;There are &amp;quot; &amp;amp; i &amp;amp; &amp;quot; Documents: &amp;quot;, join(elements, |, |)\nEnd Sub ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get DocumentIDs As String Array","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String Array containig the Ids for all Documents within a Couch Database&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String Array containig the Ids for all Documents within a Couch Database","inlinecomment":" \t &apos; String Array containig the Ids for all Documents within a Couch Database","parentclassname":"CouchDatabase","codesamplehtml":"Sub PrintCouchDbDocumentIDs(source As CouchDatabase) &lt;br /&gt;    Dim elements As Variant &lt;br /&gt;    Dim i As Integer&lt;br /&gt; &lt;br /&gt;    elements = source.DocumentIDs &lt;br /&gt;    i = Ubound(elements) - Lbound(elements)&lt;br /&gt;    If (Len(FullTrim(elements(i))) &amp;gt; 0) Then i++&lt;br /&gt;    Print &amp;quot;There are &amp;quot; &amp;amp; i &amp;amp; &amp;quot; Documents: &amp;quot;, join(elements, |, |)&lt;br /&gt;End Sub ", "attributes":["READ_ONLY","Array"], "signatureelements":["Property","Get"]},{"label":"Name","comment":"Name of a Couch Database ","valuetype":"String","filenamebase":"Name_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"Get.Name","codesample":"Sub PrintCouchDbName(source as CouchDatabase) \n    Print |Database Name: | &amp;amp; source.Name \nEnd Sub","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Name As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of a Couch Database &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of a Couch Database ","inlinecomment":" \t &apos; Name of a Couch Database ","parentclassname":"CouchDatabase","codesamplehtml":"Sub PrintCouchDbName(source as CouchDatabase) &lt;br /&gt;    Print |Database Name: | &amp;amp; source.Name &lt;br /&gt;End Sub", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Node","comment":"Node within which the CouchDB Resides","valuetype":"String","filenamebase":"Node_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"Get.Node","codesample":"Sub PrintCouchDbNode(source as CouchDatabase) \n    Print |Database Node: | &amp;amp; source.Node \nEnd Sub ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Node As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Node within which the CouchDB Resides&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Node within which the CouchDB Resides","inlinecomment":" \t &apos; Node within which the CouchDB Resides","parentclassname":"CouchDatabase","codesamplehtml":"Sub PrintCouchDbNode(source as CouchDatabase) &lt;br /&gt;    Print |Database Node: | &amp;amp; source.Node &lt;br /&gt;End Sub ", "attributes":["READ_ONLY","GET_CONST","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"UpdateFunctions","comment":"","valuetype":"String","filenamebase":"UpdateFunctions_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"Get.UpdateFunctions","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get UpdateFunctions As String Array","modifiers":"Get","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"CouchDatabase","codesamplehtml":"", "attributes":["Array"], "signatureelements":["Property","Get"]},{"label":"ViewIDs","comment":"String Array containig the Ids for all Views within a Couch Database","valuetype":"String","filenamebase":"ViewIDs_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"Get.ViewIDs","codesample":"Sub PrintCouchDbViewIDs(source As CouchDatabase) \n    Dim elements As Variant \n    Dim i As Integer\n \n    elements = source.ViewIDs \n    i = Ubound(elements) - Lbound(elements)\n    If (Len(FullTrim(elements(i))) &amp;gt; 0) Then i++\n    Print &amp;quot;There are &amp;quot; &amp;amp; i &amp;amp; &amp;quot; Views: &amp;quot;, join(elements, |, |)\nEnd Sub ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ViewIDs As String Array","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String Array containig the Ids for all Views within a Couch Database&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String Array containig the Ids for all Views within a Couch Database","inlinecomment":" \t &apos; String Array containig the Ids for all Views within a Couch Database","parentclassname":"CouchDatabase","codesamplehtml":"Sub PrintCouchDbViewIDs(source As CouchDatabase) &lt;br /&gt;    Dim elements As Variant &lt;br /&gt;    Dim i As Integer&lt;br /&gt; &lt;br /&gt;    elements = source.ViewIDs &lt;br /&gt;    i = Ubound(elements) - Lbound(elements)&lt;br /&gt;    If (Len(FullTrim(elements(i))) &amp;gt; 0) Then i++&lt;br /&gt;    Print &amp;quot;There are &amp;quot; &amp;amp; i &amp;amp; &amp;quot; Views: &amp;quot;, join(elements, |, |)&lt;br /&gt;End Sub ", "attributes":["READ_ONLY","SET_CONST","Array"], "signatureelements":["Property","Get"]},{"label":"ACL","comment":"NOT IMPLEMENTED","valuetype":"CouchACL","filenamebase":"ACL_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"Set.ACL","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set ACL As CouchACL","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED","inlinecomment":" \t &apos; NOT IMPLEMENTED","parentclassname":"CouchDatabase","codesamplehtml":"", "signatureelements":["Property","Set"]},{"label":"UpdateFunctions","comment":"","valuetype":"String","filenamebase":"UpdateFunctions_Method","fqnprefix":"CouchVSE.CouchDatabase","qn":"Set.UpdateFunctions","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set UpdateFunctions As String Array","modifiers":"Set","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"CouchDatabase","codesamplehtml":"", "attributes":["Array"], "signatureelements":["Property","Set"]}]},{"classname":"CouchDocument","comment":"Represents a Document in a CouchDatabase \n \nCreation - Use the CouchDatabase.CreateDocument() method. \nRetrieval - Use the CouchDatabase.GetDocumentByID() method \nDeletion - Use the CouchDatabase.DeleteDocument() method ","valuetype":"","filenamebase":"CouchDocument_ObjectClass","fqnprefix":"CouchVSE","qn":"CouchDocument","codesample":"&amp;apos; Sample code assumes previously created database As CouchDatabase object \n \nDim document As CouchDocument \n \nSet document = database.createDocument(&amp;quot;myUniqueID&amp;quot;) ","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","classattribnewnotexposed":"UnexposedNew","projectid":"85258A0A005BFF7B85258714004ECA02","version":3,"classid":"85258A0A005BFF7B852587150037826B","lsxclassid":9,"signature":"Public Class CouchDocument","modifiers":"Public","classname":"CouchDocument","parentclassname":"None","constructorsignature":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Represents a Document in a CouchDatabase &lt;br /&gt; &lt;br /&gt;Creation - Use the CouchDatabase.CreateDocument() method. &lt;br /&gt;Retrieval - Use the CouchDatabase.GetDocumentByID() method &lt;br /&gt;Deletion - Use the CouchDatabase.DeleteDocument() method &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Represents a Document in a CouchDatabase &lt;br /&gt; &lt;br /&gt;Creation - Use the CouchDatabase.CreateDocument() method. &lt;br /&gt;Retrieval - Use the CouchDatabase.GetDocumentByID() method &lt;br /&gt;Deletion - Use the CouchDatabase.DeleteDocument() method ","inlinecomment":" \t &apos; Represents a Document in a CouchDatabase \n \nCreation - Use the CouchDatabase.CreateDocument() method. \nRetrieval - Use the CouchDatabase.GetDocumentByID() method \nDeletion - Use the CouchDatabase.DeleteDocument() method ","codesamplehtml":"&amp;apos; Sample code assumes previously created database As CouchDatabase object &lt;br /&gt; &lt;br /&gt;Dim document As CouchDocument &lt;br /&gt; &lt;br /&gt;Set document = database.createDocument(&amp;quot;myUniqueID&amp;quot;) ", "methods":[{"label":"AddItem","comment":"Adds an Item to the CouchDocument   \nReturns a flag indicating success / failure of the operation. ","valuetype":"Boolean","filenamebase":"AddItem_Method","fqnprefix":"CouchVSE.CouchDocument","qn":"AddItem","codesample":"&amp;apos; Sample code assumes previously created document As CouchDocument object \n \nCall document.AddItem(|foo|, |bar|)  \n&amp;apos; adds an item named &amp;quot;foo&amp;quot; with the value of &amp;quot;bar&amp;quot; to the CouchDocument object. ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(ItemName As String, Value As Variant)","signature":"Function AddItem(ItemName As String, Value As Variant) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds an Item to the CouchDocument   &lt;br /&gt;Returns a flag indicating success / failure of the operation. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds an Item to the CouchDocument   &lt;br /&gt;Returns a flag indicating success / failure of the operation. ","inlinecomment":" \t &apos; Adds an Item to the CouchDocument   \nReturns a flag indicating success / failure of the operation. ","parentclassname":"CouchDocument","codesamplehtml":"&amp;apos; Sample code assumes previously created document As CouchDocument object &lt;br /&gt; &lt;br /&gt;Call document.AddItem(|foo|, |bar|)  &lt;br /&gt;&amp;apos; adds an item named &amp;quot;foo&amp;quot; with the value of &amp;quot;bar&amp;quot; to the CouchDocument object. ", "signatureelements":["Function"], "arguments":[{"label":"ItemName","comment":"","valuetype":"String","filenamebase":"ItemName_ValuedElement","fqnprefix":"CouchVSECouchDocumentAddItem","qn":"ItemName","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":"", "attributes":["BY_VAL"]},{"label":"Value","comment":"","valuetype":"Variant","filenamebase":"Value_ValuedElement","fqnprefix":"CouchVSECouchDocumentAddItem","qn":"Value","argumentindex":2,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"AddItemToJSONObject","comment":"Adds an item to an existing JSON Object of a CouchDocument ","valuetype":"Boolean","filenamebase":"AddItemToJSONObject_Method","fqnprefix":"CouchVSE.CouchDocument","qn":"AddItemToJSONObject","codesample":"&amp;apos; Sample code assumes previously created server as CouchServer and database as CouchDatabase objects.\n  \nDim document As CouchDocument \nDim id As String \nDim json As String \n \nid = server.getUUID() &amp;apos; For this example, assume server.getUUID() returned &amp;quot;76796ba0df26f8c2e539cf39d3010b41&amp;quot;\njson = |{\n\t\t&amp;quot;recipe&amp;quot;: {\n\t\t\t&amp;quot;name&amp;quot;: &amp;quot;Watermelon Salad&amp;quot;,\n\t\t\t&amp;quot;PrepTime&amp;quot;: 15,\n\t\t\t&amp;quot;CookTime&amp;quot;: 5,\n\t\t\t&amp;quot;Servings&amp;quot;: 4,\n\t\t\t&amp;quot;Difficulty&amp;quot;: &amp;quot;&amp;quot;,\n\t\t\t&amp;quot;Ingredients&amp;quot;: [\n\t\t\t\t&amp;quot;6 cups cubed watermelon&amp;quot;,\n\t\t\t\t&amp;quot;2 tbsp. olive oil&amp;quot;,\n\t\t\t\t&amp;quot;1 tbsp. lime juice&amp;quot;,\n\t\t\t\t&amp;quot;1/3 cup chopped feta cheese&amp;quot;,\n\t\t\t\t&amp;quot;1/3 cup basil leaves&amp;quot;\n\t\t\t],\n\t\t\t&amp;quot;Directions&amp;quot;: [\n\t\t\t\t&amp;quot;Cube 6 cups of watermelon&amp;quot;,\n\t\t\t\t&amp;quot;Stir in olive oil and lime juice&amp;quot;,\n\t\t\t\t&amp;quot;Chop, and stir in feta cheese&amp;quot;,\n\t\t\t\t&amp;quot;Garnish with fresh basil&amp;quot;\n\t\t\t]\n\t\t}\n\t}|\n \nPrint |Create a recipe document|\nSet document = database.createDocument(id, json) \nCall document.Save() \nPrint document.JSONValue\nPrint || \n \n%REM Prints\nCreate a recipe document\n{&amp;quot;$$Meta$$&amp;quot;:{&amp;quot;$LastModified&amp;quot;:&amp;quot;2023-09-23T14:20:39Z&amp;quot;},&amp;quot;_id&amp;quot;:&amp;quot;76796ba0df26f8c2e539cf39d3010b41&amp;quot;,&amp;quot;_rev&amp;quot;:&amp;quot;1-4eb3af862a6d2c6b2e0d1ca848a99db2&amp;quot;,&amp;quot;recipe&amp;quot;:{&amp;quot;CookTime&amp;quot;:5,&amp;quot;Difficulty&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;Directions&amp;quot;:[&amp;quot;Cube 6 cups of watermelon&amp;quot;,&amp;quot;Stir in olive oil and lime juice&amp;quot;,&amp;quot;Chop, and stir in feta cheese&amp;quot;,&amp;quot;Garnish with fresh basil&amp;quot;],&amp;quot;Ingredients&amp;quot;:[&amp;quot;6 cups cubed watermelon&amp;quot;,&amp;quot;2 tbsp. olive oil&amp;quot;,&amp;quot;1 tbsp. lime juice&amp;quot;,&amp;quot;1/3 cup chopped feta cheese&amp;quot;,&amp;quot;1/3 cup basil leaves&amp;quot;],&amp;quot;PrepTime&amp;quot;:15,&amp;quot;Servings&amp;quot;:4,&amp;quot;name&amp;quot;:&amp;quot;Watermelon Salad&amp;quot;}}\n \n%END REM \n  \n  \nCall document.AddItemToJsonObject(|Calories|, |recipe|, 45)\nCall document.Save() \nPrint |Added Calories item to recipe and saved the document|\nPrint document.JSONValue \nPrint ||\n%REM Prints \nAdded Calories item to recipe and saved the document\n{&amp;quot;$$Meta$$&amp;quot;:{&amp;quot;$LastModified&amp;quot;:&amp;quot;2023-09-23T14:20:41Z&amp;quot;},&amp;quot;_id&amp;quot;:&amp;quot;76796ba0df26f8c2e539cf39d3010b41&amp;quot;,&amp;quot;_rev&amp;quot;:&amp;quot;2-1880b4b12b7b6bdaad9d44b222f7dd10&amp;quot;,&amp;quot;recipe&amp;quot;:{&amp;quot;Calories&amp;quot;:45,&amp;quot;CookTime&amp;quot;:5,&amp;quot;Difficulty&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;Directions&amp;quot;:[&amp;quot;Cube 6 cups of watermelon&amp;quot;,&amp;quot;Stir in olive oil and lime juice&amp;quot;,&amp;quot;Chop, and stir in feta cheese&amp;quot;,&amp;quot;Garnish with fresh basil&amp;quot;],&amp;quot;Ingredients&amp;quot;:[&amp;quot;6 cups cubed watermelon&amp;quot;,&amp;quot;2 tbsp. olive oil&amp;quot;,&amp;quot;1 tbsp. lime juice&amp;quot;,&amp;quot;1/3 cup chopped feta cheese&amp;quot;,&amp;quot;1/3 cup basil leaves&amp;quot;],&amp;quot;PrepTime&amp;quot;:15,&amp;quot;Servings&amp;quot;:4,&amp;quot;name&amp;quot;:&amp;quot;Watermelon Salad&amp;quot;}}\n \n%END REM ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(ItemName As String, ObjectName As String, Value As Variant)","signature":"Function AddItemToJSONObject(ItemName As String, ObjectName As String, Value As Variant) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds an item to an existing JSON Object of a CouchDocument &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds an item to an existing JSON Object of a CouchDocument ","inlinecomment":" \t &apos; Adds an item to an existing JSON Object of a CouchDocument ","parentclassname":"CouchDocument","codesamplehtml":"&amp;apos; Sample code assumes previously created server as CouchServer and database as CouchDatabase objects.&lt;br /&gt;  &lt;br /&gt;Dim document As CouchDocument &lt;br /&gt;Dim id As String &lt;br /&gt;Dim json As String &lt;br /&gt; &lt;br /&gt;id = server.getUUID() &amp;apos; For this example, assume server.getUUID() returned &amp;quot;76796ba0df26f8c2e539cf39d3010b41&amp;quot;&lt;br /&gt;json = |{&lt;br /&gt;\t\t&amp;quot;recipe&amp;quot;: {&lt;br /&gt;\t\t\t&amp;quot;name&amp;quot;: &amp;quot;Watermelon Salad&amp;quot;,&lt;br /&gt;\t\t\t&amp;quot;PrepTime&amp;quot;: 15,&lt;br /&gt;\t\t\t&amp;quot;CookTime&amp;quot;: 5,&lt;br /&gt;\t\t\t&amp;quot;Servings&amp;quot;: 4,&lt;br /&gt;\t\t\t&amp;quot;Difficulty&amp;quot;: &amp;quot;&amp;quot;,&lt;br /&gt;\t\t\t&amp;quot;Ingredients&amp;quot;: [&lt;br /&gt;\t\t\t\t&amp;quot;6 cups cubed watermelon&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;2 tbsp. olive oil&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;1 tbsp. lime juice&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;1/3 cup chopped feta cheese&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;1/3 cup basil leaves&amp;quot;&lt;br /&gt;\t\t\t],&lt;br /&gt;\t\t\t&amp;quot;Directions&amp;quot;: [&lt;br /&gt;\t\t\t\t&amp;quot;Cube 6 cups of watermelon&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;Stir in olive oil and lime juice&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;Chop, and stir in feta cheese&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;Garnish with fresh basil&amp;quot;&lt;br /&gt;\t\t\t]&lt;br /&gt;\t\t}&lt;br /&gt;\t}|&lt;br /&gt; &lt;br /&gt;Print |Create a recipe document|&lt;br /&gt;Set document = database.createDocument(id, json) &lt;br /&gt;Call document.Save() &lt;br /&gt;Print document.JSONValue&lt;br /&gt;Print || &lt;br /&gt; &lt;br /&gt;%REM Prints&lt;br /&gt;Create a recipe document&lt;br /&gt;{&amp;quot;$$Meta$$&amp;quot;:{&amp;quot;$LastModified&amp;quot;:&amp;quot;2023-09-23T14:20:39Z&amp;quot;},&amp;quot;_id&amp;quot;:&amp;quot;76796ba0df26f8c2e539cf39d3010b41&amp;quot;,&amp;quot;_rev&amp;quot;:&amp;quot;1-4eb3af862a6d2c6b2e0d1ca848a99db2&amp;quot;,&amp;quot;recipe&amp;quot;:{&amp;quot;CookTime&amp;quot;:5,&amp;quot;Difficulty&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;Directions&amp;quot;:[&amp;quot;Cube 6 cups of watermelon&amp;quot;,&amp;quot;Stir in olive oil and lime juice&amp;quot;,&amp;quot;Chop, and stir in feta cheese&amp;quot;,&amp;quot;Garnish with fresh basil&amp;quot;],&amp;quot;Ingredients&amp;quot;:[&amp;quot;6 cups cubed watermelon&amp;quot;,&amp;quot;2 tbsp. olive oil&amp;quot;,&amp;quot;1 tbsp. lime juice&amp;quot;,&amp;quot;1/3 cup chopped feta cheese&amp;quot;,&amp;quot;1/3 cup basil leaves&amp;quot;],&amp;quot;PrepTime&amp;quot;:15,&amp;quot;Servings&amp;quot;:4,&amp;quot;name&amp;quot;:&amp;quot;Watermelon Salad&amp;quot;}}&lt;br /&gt; &lt;br /&gt;%END REM &lt;br /&gt;  &lt;br /&gt;  &lt;br /&gt;Call document.AddItemToJsonObject(|Calories|, |recipe|, 45)&lt;br /&gt;Call document.Save() &lt;br /&gt;Print |Added Calories item to recipe and saved the document|&lt;br /&gt;Print document.JSONValue &lt;br /&gt;Print ||&lt;br /&gt;%REM Prints &lt;br /&gt;Added Calories item to recipe and saved the document&lt;br /&gt;{&amp;quot;$$Meta$$&amp;quot;:{&amp;quot;$LastModified&amp;quot;:&amp;quot;2023-09-23T14:20:41Z&amp;quot;},&amp;quot;_id&amp;quot;:&amp;quot;76796ba0df26f8c2e539cf39d3010b41&amp;quot;,&amp;quot;_rev&amp;quot;:&amp;quot;2-1880b4b12b7b6bdaad9d44b222f7dd10&amp;quot;,&amp;quot;recipe&amp;quot;:{&amp;quot;Calories&amp;quot;:45,&amp;quot;CookTime&amp;quot;:5,&amp;quot;Difficulty&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;Directions&amp;quot;:[&amp;quot;Cube 6 cups of watermelon&amp;quot;,&amp;quot;Stir in olive oil and lime juice&amp;quot;,&amp;quot;Chop, and stir in feta cheese&amp;quot;,&amp;quot;Garnish with fresh basil&amp;quot;],&amp;quot;Ingredients&amp;quot;:[&amp;quot;6 cups cubed watermelon&amp;quot;,&amp;quot;2 tbsp. olive oil&amp;quot;,&amp;quot;1 tbsp. lime juice&amp;quot;,&amp;quot;1/3 cup chopped feta cheese&amp;quot;,&amp;quot;1/3 cup basil leaves&amp;quot;],&amp;quot;PrepTime&amp;quot;:15,&amp;quot;Servings&amp;quot;:4,&amp;quot;name&amp;quot;:&amp;quot;Watermelon Salad&amp;quot;}}&lt;br /&gt; &lt;br /&gt;%END REM ", "signatureelements":["Function"], "arguments":[{"label":"ItemName","comment":"","valuetype":"String","filenamebase":"ItemName_ValuedElement","fqnprefix":"CouchVSECouchDocumentAddItemToJSONObject","qn":"ItemName","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""},{"label":"ObjectName","comment":"","valuetype":"String","filenamebase":"ObjectName_ValuedElement","fqnprefix":"CouchVSECouchDocumentAddItemToJSONObject","qn":"ObjectName","argumentindex":2,"commentblock":"","commenthtml":"","inlinecomment":""},{"label":"Value","comment":"","valuetype":"Variant","filenamebase":"Value_ValuedElement","fqnprefix":"CouchVSECouchDocumentAddItemToJSONObject","qn":"Value","argumentindex":3,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"AddJSONObject","comment":"Adds a JSON Object to a CouchDocument","valuetype":"Boolean","filenamebase":"AddJSONObject_Method","fqnprefix":"CouchVSE.CouchDocument","qn":"AddJSONObject","codesample":"&amp;apos; Sample code assumes previously created server as CouchServer and database as CouchDatabase objects.\n   \nDim document As CouchDocument \nDim id As String \nDim json As String \n \nid = server.getUUID() &amp;apos; For this example, assume server.getUUID() returned &amp;quot;76796ba0df26f8c2e539cf39d30122c6&amp;quot;\nSet document = database.createDocument(id) \nPrint |Create a document|\nCall document.Save() \nPrint |Document JSON: | &amp;amp; document.JSONValue\nPrint || \n%REM Prints \nCreate a document\nDocument JSON: \n \n%END REM \n \n \njson = |{\n\t\t&amp;quot;recipe&amp;quot;: {\n\t\t\t&amp;quot;name&amp;quot;: &amp;quot;Watermelon Salad&amp;quot;,\n\t\t\t&amp;quot;PrepTime&amp;quot;: 15,\n\t\t\t&amp;quot;CookTime&amp;quot;: 5,\n\t\t\t&amp;quot;Servings&amp;quot;: 4,\n\t\t\t&amp;quot;Difficulty&amp;quot;: &amp;quot;&amp;quot;,\n\t\t\t&amp;quot;Ingredients&amp;quot;: [\n\t\t\t\t&amp;quot;6 cups cubed watermelon&amp;quot;,\n\t\t\t\t&amp;quot;2 tbsp. olive oil&amp;quot;,\n\t\t\t\t&amp;quot;1 tbsp. lime juice&amp;quot;,\n\t\t\t\t&amp;quot;1/3 cup chopped feta cheese&amp;quot;,\n\t\t\t\t&amp;quot;1/3 cup basil leaves&amp;quot;\n\t\t\t],\n\t\t\t&amp;quot;Directions&amp;quot;: [\n\t\t\t\t&amp;quot;Cube 6 cups of watermelon&amp;quot;,\n\t\t\t\t&amp;quot;Stir in olive oil and lime juice&amp;quot;,\n\t\t\t\t&amp;quot;Chop, and stir in feta cheese&amp;quot;,\n\t\t\t\t&amp;quot;Garnish with fresh basil&amp;quot;\n\t\t\t]\n\t\t}\n\t}|\n  \nCall document.AddJSONObject(json)\nCall document.Save() \nPrint |Added recipe json and saved the document|\nPrint |Document JSON: | &amp;amp; document.JSONValue\nPrint ||\n%REM Prints \nAdded recipe json and saved the document\nDocument JSON: {&amp;quot;$$Meta$$&amp;quot;:{&amp;quot;$LastModified&amp;quot;:&amp;quot;2023-09-23T14:38:12Z&amp;quot;},&amp;quot;_id&amp;quot;:&amp;quot;76796ba0df26f8c2e539cf39d30122c6&amp;quot;,&amp;quot;_rev&amp;quot;:&amp;quot;1-345469118a318279fcb13c1ec2ea3bb8&amp;quot;,&amp;quot;recipe&amp;quot;:{&amp;quot;CookTime&amp;quot;:5,&amp;quot;Difficulty&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;Directions&amp;quot;:[&amp;quot;Cube 6 cups of watermelon&amp;quot;,&amp;quot;Stir in olive oil and lime juice&amp;quot;,&amp;quot;Chop, and stir in feta cheese&amp;quot;,&amp;quot;Garnish with fresh basil&amp;quot;],&amp;quot;Ingredients&amp;quot;:[&amp;quot;6 cups cubed watermelon&amp;quot;,&amp;quot;2 tbsp. olive oil&amp;quot;,&amp;quot;1 tbsp. lime juice&amp;quot;,&amp;quot;1/3 cup chopped feta cheese&amp;quot;,&amp;quot;1/3 cup basil leaves&amp;quot;],&amp;quot;PrepTime&amp;quot;:15,&amp;quot;Servings&amp;quot;:4,&amp;quot;name&amp;quot;:&amp;quot;Watermelon Salad&amp;quot;}}\n \n%END REM ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(JSONObject As String)","signature":"Function AddJSONObject(JSONObject As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds a JSON Object to a CouchDocument&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds a JSON Object to a CouchDocument","inlinecomment":" \t &apos; Adds a JSON Object to a CouchDocument","parentclassname":"CouchDocument","codesamplehtml":"&amp;apos; Sample code assumes previously created server as CouchServer and database as CouchDatabase objects.&lt;br /&gt;   &lt;br /&gt;Dim document As CouchDocument &lt;br /&gt;Dim id As String &lt;br /&gt;Dim json As String &lt;br /&gt; &lt;br /&gt;id = server.getUUID() &amp;apos; For this example, assume server.getUUID() returned &amp;quot;76796ba0df26f8c2e539cf39d30122c6&amp;quot;&lt;br /&gt;Set document = database.createDocument(id) &lt;br /&gt;Print |Create a document|&lt;br /&gt;Call document.Save() &lt;br /&gt;Print |Document JSON: | &amp;amp; document.JSONValue&lt;br /&gt;Print || &lt;br /&gt;%REM Prints &lt;br /&gt;Create a document&lt;br /&gt;Document JSON: &lt;br /&gt; &lt;br /&gt;%END REM &lt;br /&gt; &lt;br /&gt; &lt;br /&gt;json = |{&lt;br /&gt;\t\t&amp;quot;recipe&amp;quot;: {&lt;br /&gt;\t\t\t&amp;quot;name&amp;quot;: &amp;quot;Watermelon Salad&amp;quot;,&lt;br /&gt;\t\t\t&amp;quot;PrepTime&amp;quot;: 15,&lt;br /&gt;\t\t\t&amp;quot;CookTime&amp;quot;: 5,&lt;br /&gt;\t\t\t&amp;quot;Servings&amp;quot;: 4,&lt;br /&gt;\t\t\t&amp;quot;Difficulty&amp;quot;: &amp;quot;&amp;quot;,&lt;br /&gt;\t\t\t&amp;quot;Ingredients&amp;quot;: [&lt;br /&gt;\t\t\t\t&amp;quot;6 cups cubed watermelon&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;2 tbsp. olive oil&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;1 tbsp. lime juice&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;1/3 cup chopped feta cheese&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;1/3 cup basil leaves&amp;quot;&lt;br /&gt;\t\t\t],&lt;br /&gt;\t\t\t&amp;quot;Directions&amp;quot;: [&lt;br /&gt;\t\t\t\t&amp;quot;Cube 6 cups of watermelon&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;Stir in olive oil and lime juice&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;Chop, and stir in feta cheese&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;Garnish with fresh basil&amp;quot;&lt;br /&gt;\t\t\t]&lt;br /&gt;\t\t}&lt;br /&gt;\t}|&lt;br /&gt;  &lt;br /&gt;Call document.AddJSONObject(json)&lt;br /&gt;Call document.Save() &lt;br /&gt;Print |Added recipe json and saved the document|&lt;br /&gt;Print |Document JSON: | &amp;amp; document.JSONValue&lt;br /&gt;Print ||&lt;br /&gt;%REM Prints &lt;br /&gt;Added recipe json and saved the document&lt;br /&gt;Document JSON: {&amp;quot;$$Meta$$&amp;quot;:{&amp;quot;$LastModified&amp;quot;:&amp;quot;2023-09-23T14:38:12Z&amp;quot;},&amp;quot;_id&amp;quot;:&amp;quot;76796ba0df26f8c2e539cf39d30122c6&amp;quot;,&amp;quot;_rev&amp;quot;:&amp;quot;1-345469118a318279fcb13c1ec2ea3bb8&amp;quot;,&amp;quot;recipe&amp;quot;:{&amp;quot;CookTime&amp;quot;:5,&amp;quot;Difficulty&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;Directions&amp;quot;:[&amp;quot;Cube 6 cups of watermelon&amp;quot;,&amp;quot;Stir in olive oil and lime juice&amp;quot;,&amp;quot;Chop, and stir in feta cheese&amp;quot;,&amp;quot;Garnish with fresh basil&amp;quot;],&amp;quot;Ingredients&amp;quot;:[&amp;quot;6 cups cubed watermelon&amp;quot;,&amp;quot;2 tbsp. olive oil&amp;quot;,&amp;quot;1 tbsp. lime juice&amp;quot;,&amp;quot;1/3 cup chopped feta cheese&amp;quot;,&amp;quot;1/3 cup basil leaves&amp;quot;],&amp;quot;PrepTime&amp;quot;:15,&amp;quot;Servings&amp;quot;:4,&amp;quot;name&amp;quot;:&amp;quot;Watermelon Salad&amp;quot;}}&lt;br /&gt; &lt;br /&gt;%END REM ", "signatureelements":["Function"], "arguments":[{"label":"JSONObject","comment":"","valuetype":"String","filenamebase":"JSONObject_ValuedElement","fqnprefix":"CouchVSECouchDocumentAddJSONObject","qn":"JSONObject","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"CreateAttachment","comment":"Creates a CouchAttachment object. \nIMPORTANT NOTE: The newly created CouchAttachment object exists only in memory.  It must be uploaded using CouchAttachment.Upload() method in order to be saved to the Couch Database.","valuetype":"CouchAttachment","filenamebase":"CreateAttachment_Method","fqnprefix":"CouchVSE.CouchDocument","qn":"CreateAttachment","codesample":"&amp;apos; Sample code assumes previously created document As CouchDocument object \n \nDim attachment As CouchAttachment \nDim uploadedbytes As Long\n \nSet attachment = document.createAttachment(&amp;quot;watermelonsalad.png&amp;quot;, CurDir() &amp;amp; &amp;quot;/resources/watermelonsalad.png&amp;quot;, &amp;quot;image/png&amp;quot;)\nPrint |Created Attachment|\nPrint |attachment.Name: | &amp;amp; attachment.Name \nPrint |attachment.ContentLength: | &amp;amp; attachment.ContentLength \nPrint |attachment.ContentType: | &amp;amp; attachment.ContentType \nPrint |attachment.DiskFile: | &amp;amp; attachment.DiskFile \nPrint ||        \nPrint |Attachment Added but Not Yet Uploaded|\nPrint |document.JSONValue: | &amp;amp; document.JSONValue        \nPrint || \n \n&amp;apos; !! Document must be saved to disk before uploading attachments !! \nIf Not document.isSaved Then Call document.Save() \n \nuploadedbytes = attachment.Upload()\nPrint |attachment.Upload() returned | &amp;amp; uploadedbytes &amp;amp; | bytes.|","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String, DiskFile As String, ContentType As String)","signature":"Function CreateAttachment(Name As String, DiskFile As String, ContentType As String) As CouchAttachment","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a CouchAttachment object. &lt;br /&gt;IMPORTANT NOTE: The newly created CouchAttachment object exists only in memory.  It must be uploaded using CouchAttachment.Upload() method in order to be saved to the Couch Database.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a CouchAttachment object. &lt;br /&gt;IMPORTANT NOTE: The newly created CouchAttachment object exists only in memory.  It must be uploaded using CouchAttachment.Upload() method in order to be saved to the Couch Database.","inlinecomment":" \t &apos; Creates a CouchAttachment object. \nIMPORTANT NOTE: The newly created CouchAttachment object exists only in memory.  It must be uploaded using CouchAttachment.Upload() method in order to be saved to the Couch Database.","parentclassname":"CouchDocument","codesamplehtml":"&amp;apos; Sample code assumes previously created document As CouchDocument object &lt;br /&gt; &lt;br /&gt;Dim attachment As CouchAttachment &lt;br /&gt;Dim uploadedbytes As Long&lt;br /&gt; &lt;br /&gt;Set attachment = document.createAttachment(&amp;quot;watermelonsalad.png&amp;quot;, CurDir() &amp;amp; &amp;quot;/resources/watermelonsalad.png&amp;quot;, &amp;quot;image/png&amp;quot;)&lt;br /&gt;Print |Created Attachment|&lt;br /&gt;Print |attachment.Name: | &amp;amp; attachment.Name &lt;br /&gt;Print |attachment.ContentLength: | &amp;amp; attachment.ContentLength &lt;br /&gt;Print |attachment.ContentType: | &amp;amp; attachment.ContentType &lt;br /&gt;Print |attachment.DiskFile: | &amp;amp; attachment.DiskFile &lt;br /&gt;Print ||        &lt;br /&gt;Print |Attachment Added but Not Yet Uploaded|&lt;br /&gt;Print |document.JSONValue: | &amp;amp; document.JSONValue        &lt;br /&gt;Print || &lt;br /&gt; &lt;br /&gt;&amp;apos; !! Document must be saved to disk before uploading attachments !! &lt;br /&gt;If Not document.isSaved Then Call document.Save() &lt;br /&gt; &lt;br /&gt;uploadedbytes = attachment.Upload()&lt;br /&gt;Print |attachment.Upload() returned | &amp;amp; uploadedbytes &amp;amp; | bytes.|", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchDocumentCreateAttachment","qn":"Name","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""},{"label":"DiskFile","comment":"","valuetype":"String","filenamebase":"DiskFile_ValuedElement","fqnprefix":"CouchVSECouchDocumentCreateAttachment","qn":"DiskFile","argumentindex":2,"commentblock":"","commenthtml":"","inlinecomment":""},{"label":"ContentType","comment":"","valuetype":"String","filenamebase":"ContentType_ValuedElement","fqnprefix":"CouchVSECouchDocumentCreateAttachment","qn":"ContentType","argumentindex":3,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"GetAttachmentInfo","comment":"Retrieves the named CouchAttachment object from the CouchDocument","valuetype":"CouchAttachment","filenamebase":"GetAttachmentInfo_Method","fqnprefix":"CouchVSE.CouchDocument","qn":"GetAttachmentInfo","codesample":"&amp;apos; Sample code assumes previously created document As CouchDocument object \n \nDim attachment As CouchAttachment \nDim uploadedbytes As Long\n \nSet attachment = document.getAttachmentInfo(|watermelonsalad.png|) \nPrint |Retrieved Attachment|\nPrint |attachment.Name: | &amp;amp; attachment.Name \nPrint |attachment.ContentLength: | &amp;amp; attachment.ContentLength \nPrint |attachment.ContentType: | &amp;amp; attachment.ContentType \nPrint ||","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String)","signature":"Function GetAttachmentInfo(Name As String) As CouchAttachment","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Retrieves the named CouchAttachment object from the CouchDocument&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Retrieves the named CouchAttachment object from the CouchDocument","inlinecomment":" \t &apos; Retrieves the named CouchAttachment object from the CouchDocument","parentclassname":"CouchDocument","codesamplehtml":"&amp;apos; Sample code assumes previously created document As CouchDocument object &lt;br /&gt; &lt;br /&gt;Dim attachment As CouchAttachment &lt;br /&gt;Dim uploadedbytes As Long&lt;br /&gt; &lt;br /&gt;Set attachment = document.getAttachmentInfo(|watermelonsalad.png|) &lt;br /&gt;Print |Retrieved Attachment|&lt;br /&gt;Print |attachment.Name: | &amp;amp; attachment.Name &lt;br /&gt;Print |attachment.ContentLength: | &amp;amp; attachment.ContentLength &lt;br /&gt;Print |attachment.ContentType: | &amp;amp; attachment.ContentType &lt;br /&gt;Print ||", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchDocumentGetAttachmentInfo","qn":"Name","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"GetAttachmentNames","comment":"Gets the names of all CouchAttachments of a CouchDocument.","valuetype":"String","filenamebase":"GetAttachmentNames_Method","fqnprefix":"CouchVSE.CouchDocument","qn":"GetAttachmentNames","codesample":"&amp;apos; Sample code assumes previously created document As CouchDocument object \n \nDim elements As Variant \nDim i As Integer\n \nelements = document.getAttachmentNames() \ni = Ubound(elements) - Lbound(elements)\nIf (Len(FullTrim(elements(i))) &amp;gt; 0) Then i++ \nPrint |document.getAttachmentNames() returned | &amp;amp; i &amp;amp; | elements: |, join(elem","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function GetAttachmentNames() As String Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the names of all CouchAttachments of a CouchDocument.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the names of all CouchAttachments of a CouchDocument.","inlinecomment":" \t &apos; Gets the names of all CouchAttachments of a CouchDocument.","parentclassname":"CouchDocument","codesamplehtml":"&amp;apos; Sample code assumes previously created document As CouchDocument object &lt;br /&gt; &lt;br /&gt;Dim elements As Variant &lt;br /&gt;Dim i As Integer&lt;br /&gt; &lt;br /&gt;elements = document.getAttachmentNames() &lt;br /&gt;i = Ubound(elements) - Lbound(elements)&lt;br /&gt;If (Len(FullTrim(elements(i))) &amp;gt; 0) Then i++ &lt;br /&gt;Print |document.getAttachmentNames() returned | &amp;amp; i &amp;amp; | elements: |, join(elem", "attributes":["Array"], "signatureelements":["Function"]},{"label":"Save","comment":"Saves a CouchDocument to the backing Apache Couch DB database. \nReturns True if successful. ","valuetype":"Boolean","filenamebase":"Save_Method","fqnprefix":"CouchVSE.CouchDocument","qn":"Save","codesample":"&amp;apos; Sample code assumes previously created document As CouchDocument object  \n \nDim result as Boolean \n \nresult = document.Save() \n&amp;apos; OR \nCall document.Save()  ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function Save() As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Saves a CouchDocument to the backing Apache Couch DB database. &lt;br /&gt;Returns True if successful. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Saves a CouchDocument to the backing Apache Couch DB database. &lt;br /&gt;Returns True if successful. ","inlinecomment":" \t &apos; Saves a CouchDocument to the backing Apache Couch DB database. \nReturns True if successful. ","parentclassname":"CouchDocument","codesamplehtml":"&amp;apos; Sample code assumes previously created document As CouchDocument object  &lt;br /&gt; &lt;br /&gt;Dim result as Boolean &lt;br /&gt; &lt;br /&gt;result = document.Save() &lt;br /&gt;&amp;apos; OR &lt;br /&gt;Call document.Save()  ", "signatureelements":["Function"]},{"label":"Attachments","comment":"NOT IMPLEMENTED - USE CouchDocument.getAttachmentNames() ","valuetype":"String","filenamebase":"Attachments_Method","fqnprefix":"CouchVSE.CouchDocument","qn":"Get.Attachments","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Attachments As String Array","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED - USE CouchDocument.getAttachmentNames() &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED - USE CouchDocument.getAttachmentNames() ","inlinecomment":" \t &apos; NOT IMPLEMENTED - USE CouchDocument.getAttachmentNames() ","parentclassname":"CouchDocument","codesamplehtml":"", "attributes":["READ_ONLY","Array"], "signatureelements":["Property","Get"]},{"label":"ID","comment":"ID that uniquely identifes the CouchDocument within the CouchDatabase. ","valuetype":"String","filenamebase":"ID_Method","fqnprefix":"CouchVSE.CouchDocument","qn":"Get.ID","codesample":"&amp;apos; Sample code assumes previously created document As CouchDocument object \n \nPrint |document.ID: | &amp;amp; document.ID ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ID As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;ID that uniquely identifes the CouchDocument within the CouchDatabase. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"ID that uniquely identifes the CouchDocument within the CouchDatabase. ","inlinecomment":" \t &apos; ID that uniquely identifes the CouchDocument within the CouchDatabase. ","parentclassname":"CouchDocument","codesamplehtml":"&amp;apos; Sample code assumes previously created document As CouchDocument object &lt;br /&gt; &lt;br /&gt;Print |document.ID: | &amp;amp; document.ID ", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"IsModified","comment":"Flag Indicating whether or not the in-memory CouchDocument has been modified since last saved. \n \nBehavior Notes:  \n1) This will always return False for Newly created and not-yet-saved CouchDocument objects. \n2)  If a CouchDocument has been saved (or newly retrieved from disk) and a CouchAttachment is added, this will return False. \n3) If a CouchAttachment has been uploaded to a CouchDocument , this will return False. \n4) If a new item is added to a CouchDocument, this will return True.","valuetype":"Boolean","filenamebase":"IsModified_Method","fqnprefix":"CouchVSE.CouchDocument","qn":"Get.IsModified","codesample":"&amp;apos; Sample code assumes previously created document As CouchDocument object \n \nPrint |document.isModified: | &amp;amp; document.isModified ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get IsModified As Boolean","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag Indicating whether or not the in-memory CouchDocument has been modified since last saved. &lt;br /&gt; &lt;br /&gt;Behavior Notes:  &lt;br /&gt;1) This will always return False for Newly created and not-yet-saved CouchDocument objects. &lt;br /&gt;2)  If a CouchDocument has been saved (or newly retrieved from disk) and a CouchAttachment is added, this will return False. &lt;br /&gt;3) If a CouchAttachment has been uploaded to a CouchDocument , this will return False. &lt;br /&gt;4) If a new item is added to a CouchDocument, this will return True.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag Indicating whether or not the in-memory CouchDocument has been modified since last saved. &lt;br /&gt; &lt;br /&gt;Behavior Notes:  &lt;br /&gt;1) This will always return False for Newly created and not-yet-saved CouchDocument objects. &lt;br /&gt;2)  If a CouchDocument has been saved (or newly retrieved from disk) and a CouchAttachment is added, this will return False. &lt;br /&gt;3) If a CouchAttachment has been uploaded to a CouchDocument , this will return False. &lt;br /&gt;4) If a new item is added to a CouchDocument, this will return True.","inlinecomment":" \t &apos; Flag Indicating whether or not the in-memory CouchDocument has been modified since last saved. \n \nBehavior Notes:  \n1) This will always return False for Newly created and not-yet-saved CouchDocument objects. \n2)  If a CouchDocument has been saved (or newly retrieved from disk) and a CouchAttachment is added, this will return False. \n3) If a CouchAttachment has been uploaded to a CouchDocument , this will return False. \n4) If a new item is added to a CouchDocument, this will return True.","parentclassname":"CouchDocument","codesamplehtml":"&amp;apos; Sample code assumes previously created document As CouchDocument object &lt;br /&gt; &lt;br /&gt;Print |document.isModified: | &amp;amp; document.isModified ", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"IsSaved","comment":"Flag indicating if an in-memory CouchDocument has been saved since last modified.  \n  \nBehavior Notes:  \n1) This will always return False for Newly created and not-yet-saved CouchDocument objects. \n2)  If a CouchDocument has been saved (or newly retrieved from disk) and a CouchAttachment is added, this will return True. \n3) If a CouchAttachment has been uploaded to a CouchDocument , this will return True. \n4) If a new item is added to a CouchDocument, this will return False.","valuetype":"Boolean","filenamebase":"IsSaved_Method","fqnprefix":"CouchVSE.CouchDocument","qn":"Get.IsSaved","codesample":"&amp;apos; Sample code assumes previously created document As CouchDocument object \n \nPrint |document.isSaved: | &amp;amp; document.isSaved","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get IsSaved As Boolean","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if an in-memory CouchDocument has been saved since last modified.  &lt;br /&gt;  &lt;br /&gt;Behavior Notes:  &lt;br /&gt;1) This will always return False for Newly created and not-yet-saved CouchDocument objects. &lt;br /&gt;2)  If a CouchDocument has been saved (or newly retrieved from disk) and a CouchAttachment is added, this will return True. &lt;br /&gt;3) If a CouchAttachment has been uploaded to a CouchDocument , this will return True. &lt;br /&gt;4) If a new item is added to a CouchDocument, this will return False.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if an in-memory CouchDocument has been saved since last modified.  &lt;br /&gt;  &lt;br /&gt;Behavior Notes:  &lt;br /&gt;1) This will always return False for Newly created and not-yet-saved CouchDocument objects. &lt;br /&gt;2)  If a CouchDocument has been saved (or newly retrieved from disk) and a CouchAttachment is added, this will return True. &lt;br /&gt;3) If a CouchAttachment has been uploaded to a CouchDocument , this will return True. &lt;br /&gt;4) If a new item is added to a CouchDocument, this will return False.","inlinecomment":" \t &apos; Flag indicating if an in-memory CouchDocument has been saved since last modified.  \n  \nBehavior Notes:  \n1) This will always return False for Newly created and not-yet-saved CouchDocument objects. \n2)  If a CouchDocument has been saved (or newly retrieved from disk) and a CouchAttachment is added, this will return True. \n3) If a CouchAttachment has been uploaded to a CouchDocument , this will return True. \n4) If a new item is added to a CouchDocument, this will return False.","parentclassname":"CouchDocument","codesamplehtml":"&amp;apos; Sample code assumes previously created document As CouchDocument object &lt;br /&gt; &lt;br /&gt;Print |document.isSaved: | &amp;amp; document.isSaved", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"JSONValue","comment":"JSON String containing information about the CouchDocument. ","valuetype":"String","filenamebase":"JSONValue_Method","fqnprefix":"CouchVSE.CouchDocument","qn":"Get.JSONValue","codesample":"&amp;apos; Sample code assumes previously created server as CouchServer and database as CouchDatabase objects\n \nDim document As CouchDocument \nDim id As String \nDim json As String \n \nid = server.getUUID() &amp;apos; For this example, assume server.getUUID() returned &amp;quot;76796ba0df26f8c2e539cf39d300a38a&amp;quot;\njson = |{\n\t\t&amp;quot;recipe&amp;quot;: {\n\t\t\t&amp;quot;name&amp;quot;: &amp;quot;Watermelon Salad&amp;quot;,\n\t\t\t&amp;quot;PrepTime&amp;quot;: 15,\n\t\t\t&amp;quot;CookTime&amp;quot;: 5,\n\t\t\t&amp;quot;Servings&amp;quot;: 4,\n\t\t\t&amp;quot;Difficulty&amp;quot;: &amp;quot;&amp;quot;,\n\t\t\t&amp;quot;Ingredients&amp;quot;: [\n\t\t\t\t&amp;quot;6 cups cubed watermelon&amp;quot;,\n\t\t\t\t&amp;quot;2 tbsp. olive oil&amp;quot;,\n\t\t\t\t&amp;quot;1 tbsp. lime juice&amp;quot;,\n\t\t\t\t&amp;quot;1/3 cup chopped feta cheese&amp;quot;,\n\t\t\t\t&amp;quot;1/3 cup basil leaves&amp;quot;\n\t\t\t],\n\t\t\t&amp;quot;Directions&amp;quot;: [\n\t\t\t\t&amp;quot;Cube 6 cups of watermelon&amp;quot;,\n\t\t\t\t&amp;quot;Stir in olive oil and lime juice&amp;quot;,\n\t\t\t\t&amp;quot;Chop, and stir in feta cheese&amp;quot;,\n\t\t\t\t&amp;quot;Garnish with fresh basil&amp;quot;\n\t\t\t]\n\t\t}\n\t}|\n \nSet document = database.createDocument(id, json) \nCall document.Save() \nPrint document.JSONValue\n \n%REM Prints\n  {&amp;quot;$$Meta$$&amp;quot;:{&amp;quot;$LastModified&amp;quot;:&amp;quot;2023-09-23T13:05:26Z&amp;quot;},&amp;quot;_id&amp;quot;:&amp;quot;76796ba0df26f8c2e539cf39d300a38a&amp;quot;,&amp;quot;_rev&amp;quot;:&amp;quot;1-4134b4b21a14e6718782af9466ad32c3&amp;quot;,&amp;quot;recipe&amp;quot;:{&amp;quot;CookTime&amp;quot;:5,&amp;quot;Difficulty&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;Directions&amp;quot;:[&amp;quot;Cube 6 cups of watermelon&amp;quot;,&amp;quot;Stir in olive oil and lime juice&amp;quot;,&amp;quot;Chop, and stir in feta cheese&amp;quot;,&amp;quot;Garnish with fresh basil&amp;quot;],&amp;quot;Ingredients&amp;quot;:[&amp;quot;6 cups cubed watermelon&amp;quot;,&amp;quot;2 tbsp. olive oil&amp;quot;,&amp;quot;1 tbsp. lime juice&amp;quot;,&amp;quot;1/3 cup chopped feta cheese&amp;quot;,&amp;quot;1/3 cup basil leaves&amp;quot;],&amp;quot;PrepTime&amp;quot;:15,&amp;quot;Servings&amp;quot;:4,&amp;quot;name&amp;quot;:&amp;quot;Watermelon Salad&amp;quot;}}\n \n%END REM ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get JSONValue As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JSON String containing information about the CouchDocument. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JSON String containing information about the CouchDocument. ","inlinecomment":" \t &apos; JSON String containing information about the CouchDocument. ","parentclassname":"CouchDocument","codesamplehtml":"&amp;apos; Sample code assumes previously created server as CouchServer and database as CouchDatabase objects&lt;br /&gt; &lt;br /&gt;Dim document As CouchDocument &lt;br /&gt;Dim id As String &lt;br /&gt;Dim json As String &lt;br /&gt; &lt;br /&gt;id = server.getUUID() &amp;apos; For this example, assume server.getUUID() returned &amp;quot;76796ba0df26f8c2e539cf39d300a38a&amp;quot;&lt;br /&gt;json = |{&lt;br /&gt;\t\t&amp;quot;recipe&amp;quot;: {&lt;br /&gt;\t\t\t&amp;quot;name&amp;quot;: &amp;quot;Watermelon Salad&amp;quot;,&lt;br /&gt;\t\t\t&amp;quot;PrepTime&amp;quot;: 15,&lt;br /&gt;\t\t\t&amp;quot;CookTime&amp;quot;: 5,&lt;br /&gt;\t\t\t&amp;quot;Servings&amp;quot;: 4,&lt;br /&gt;\t\t\t&amp;quot;Difficulty&amp;quot;: &amp;quot;&amp;quot;,&lt;br /&gt;\t\t\t&amp;quot;Ingredients&amp;quot;: [&lt;br /&gt;\t\t\t\t&amp;quot;6 cups cubed watermelon&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;2 tbsp. olive oil&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;1 tbsp. lime juice&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;1/3 cup chopped feta cheese&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;1/3 cup basil leaves&amp;quot;&lt;br /&gt;\t\t\t],&lt;br /&gt;\t\t\t&amp;quot;Directions&amp;quot;: [&lt;br /&gt;\t\t\t\t&amp;quot;Cube 6 cups of watermelon&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;Stir in olive oil and lime juice&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;Chop, and stir in feta cheese&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;Garnish with fresh basil&amp;quot;&lt;br /&gt;\t\t\t]&lt;br /&gt;\t\t}&lt;br /&gt;\t}|&lt;br /&gt; &lt;br /&gt;Set document = database.createDocument(id, json) &lt;br /&gt;Call document.Save() &lt;br /&gt;Print document.JSONValue&lt;br /&gt; &lt;br /&gt;%REM Prints&lt;br /&gt;  {&amp;quot;$$Meta$$&amp;quot;:{&amp;quot;$LastModified&amp;quot;:&amp;quot;2023-09-23T13:05:26Z&amp;quot;},&amp;quot;_id&amp;quot;:&amp;quot;76796ba0df26f8c2e539cf39d300a38a&amp;quot;,&amp;quot;_rev&amp;quot;:&amp;quot;1-4134b4b21a14e6718782af9466ad32c3&amp;quot;,&amp;quot;recipe&amp;quot;:{&amp;quot;CookTime&amp;quot;:5,&amp;quot;Difficulty&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;Directions&amp;quot;:[&amp;quot;Cube 6 cups of watermelon&amp;quot;,&amp;quot;Stir in olive oil and lime juice&amp;quot;,&amp;quot;Chop, and stir in feta cheese&amp;quot;,&amp;quot;Garnish with fresh basil&amp;quot;],&amp;quot;Ingredients&amp;quot;:[&amp;quot;6 cups cubed watermelon&amp;quot;,&amp;quot;2 tbsp. olive oil&amp;quot;,&amp;quot;1 tbsp. lime juice&amp;quot;,&amp;quot;1/3 cup chopped feta cheese&amp;quot;,&amp;quot;1/3 cup basil leaves&amp;quot;],&amp;quot;PrepTime&amp;quot;:15,&amp;quot;Servings&amp;quot;:4,&amp;quot;name&amp;quot;:&amp;quot;Watermelon Salad&amp;quot;}}&lt;br /&gt; &lt;br /&gt;%END REM ", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Revision","comment":"Unique code representing the revision value of the on-disk CouchDocument . This value is composed of 2 parts delimited by a hyphen.  This value is generated by Apache CouchDB itself, and if officially &amp;quot;opaque&amp;quot; - other than it is unique. \n  \nBehavior Notes:\n1) This is not set until the CouchDocument has been saved. \n2)  If a CouchDocument has been saved, and a CouchAttachment is added to it, this value does not change until the CouchAttachment has been Uploaded. \n3) This value will change whenever a CouchAttachment is Uploaded","valuetype":"String","filenamebase":"Revision_Method","fqnprefix":"CouchVSE.CouchDocument","qn":"Get.Revision","codesample":"%REM \n  Sample code assumes previously created document As CouchDocument object, with the JSON Value of: \n{&amp;quot;$$Meta$$&amp;quot;:{&amp;quot;$LastModified&amp;quot;:&amp;quot;2023-09-23T13:05:26Z&amp;quot;},&amp;quot;_id&amp;quot;:&amp;quot;76796ba0df26f8c2e539cf39d300a38a&amp;quot;,&amp;quot;_rev&amp;quot;:&amp;quot;1-4134b4b21a14e6718782af9466ad32c3&amp;quot;,&amp;quot;recipe&amp;quot;:{&amp;quot;CookTime&amp;quot;:5,&amp;quot;Difficulty&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;Directions&amp;quot;:[&amp;quot;Cube 6 cups of watermelon&amp;quot;,&amp;quot;Stir in olive oil and lime juice&amp;quot;,&amp;quot;Chop, and stir in feta cheese&amp;quot;,&amp;quot;Garnish with fresh basil&amp;quot;],&amp;quot;Ingredients&amp;quot;:[&amp;quot;6 cups cubed watermelon&amp;quot;,&amp;quot;2 tbsp. olive oil&amp;quot;,&amp;quot;1 tbsp. lime juice&amp;quot;,&amp;quot;1/3 cup chopped feta cheese&amp;quot;,&amp;quot;1/3 cup basil leaves&amp;quot;],&amp;quot;PrepTime&amp;quot;:15,&amp;quot;Servings&amp;quot;:4,&amp;quot;name&amp;quot;:&amp;quot;Watermelon Salad&amp;quot;}}\n%END REM \nPrint |document.Revision: | &amp;amp; document.Revison \n&amp;apos; Prints &amp;quot;document.Revision: 1-4134b4b21a14e6718782af9466ad32c3&amp;quot;","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Revision As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Unique code representing the revision value of the on-disk CouchDocument . This value is composed of 2 parts delimited by a hyphen.  This value is generated by Apache CouchDB itself, and if officially &amp;quot;opaque&amp;quot; - other than it is unique. &lt;br /&gt;  &lt;br /&gt;Behavior Notes:&lt;br /&gt;1) This is not set until the CouchDocument has been saved. &lt;br /&gt;2)  If a CouchDocument has been saved, and a CouchAttachment is added to it, this value does not change until the CouchAttachment has been Uploaded. &lt;br /&gt;3) This value will change whenever a CouchAttachment is Uploaded&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Unique code representing the revision value of the on-disk CouchDocument . This value is composed of 2 parts delimited by a hyphen.  This value is generated by Apache CouchDB itself, and if officially &amp;quot;opaque&amp;quot; - other than it is unique. &lt;br /&gt;  &lt;br /&gt;Behavior Notes:&lt;br /&gt;1) This is not set until the CouchDocument has been saved. &lt;br /&gt;2)  If a CouchDocument has been saved, and a CouchAttachment is added to it, this value does not change until the CouchAttachment has been Uploaded. &lt;br /&gt;3) This value will change whenever a CouchAttachment is Uploaded","inlinecomment":" \t &apos; Unique code representing the revision value of the on-disk CouchDocument . This value is composed of 2 parts delimited by a hyphen.  This value is generated by Apache CouchDB itself, and if officially &amp;quot;opaque&amp;quot; - other than it is unique. \n  \nBehavior Notes:\n1) This is not set until the CouchDocument has been saved. \n2)  If a CouchDocument has been saved, and a CouchAttachment is added to it, this value does not change until the CouchAttachment has been Uploaded. \n3) This value will change whenever a CouchAttachment is Uploaded","parentclassname":"CouchDocument","codesamplehtml":"%REM &lt;br /&gt;  Sample code assumes previously created document As CouchDocument object, with the JSON Value of: &lt;br /&gt;{&amp;quot;$$Meta$$&amp;quot;:{&amp;quot;$LastModified&amp;quot;:&amp;quot;2023-09-23T13:05:26Z&amp;quot;},&amp;quot;_id&amp;quot;:&amp;quot;76796ba0df26f8c2e539cf39d300a38a&amp;quot;,&amp;quot;_rev&amp;quot;:&amp;quot;1-4134b4b21a14e6718782af9466ad32c3&amp;quot;,&amp;quot;recipe&amp;quot;:{&amp;quot;CookTime&amp;quot;:5,&amp;quot;Difficulty&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;Directions&amp;quot;:[&amp;quot;Cube 6 cups of watermelon&amp;quot;,&amp;quot;Stir in olive oil and lime juice&amp;quot;,&amp;quot;Chop, and stir in feta cheese&amp;quot;,&amp;quot;Garnish with fresh basil&amp;quot;],&amp;quot;Ingredients&amp;quot;:[&amp;quot;6 cups cubed watermelon&amp;quot;,&amp;quot;2 tbsp. olive oil&amp;quot;,&amp;quot;1 tbsp. lime juice&amp;quot;,&amp;quot;1/3 cup chopped feta cheese&amp;quot;,&amp;quot;1/3 cup basil leaves&amp;quot;],&amp;quot;PrepTime&amp;quot;:15,&amp;quot;Servings&amp;quot;:4,&amp;quot;name&amp;quot;:&amp;quot;Watermelon Salad&amp;quot;}}&lt;br /&gt;%END REM &lt;br /&gt;Print |document.Revision: | &amp;amp; document.Revison &lt;br /&gt;&amp;apos; Prints &amp;quot;document.Revision: 1-4134b4b21a14e6718782af9466ad32c3&amp;quot;", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"URL","comment":"URL of the CouchDocument  \nFollows the pattern \nCouchServer.URL / CouchDatabase.Name / CouchDocuent.ID ","valuetype":"String","filenamebase":"URL_Method","fqnprefix":"CouchVSE.CouchDocument","qn":"Get.URL","codesample":"&amp;apos; Sample code assumes previously created document As CouchDocument object \n&amp;apos; With CouchServer.URL of &amp;quot;http://mycouchserver.mycompany.com&amp;quot;\n&amp;apos; and CouchDatabase.Name of &amp;quot;recipes&amp;quot; \n&amp;apos; and CouchDocument.ID of &amp;quot;123456&amp;quot; \nPrint |document.URL: | &amp;amp; document.URL \n&amp;apos; Prints &amp;quot;document.URL: http://mycouchserver.mycompany.com/recipes/123456&amp;quot; ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get URL As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;URL of the CouchDocument  &lt;br /&gt;Follows the pattern &lt;br /&gt;CouchServer.URL / CouchDatabase.Name / CouchDocuent.ID &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"URL of the CouchDocument  &lt;br /&gt;Follows the pattern &lt;br /&gt;CouchServer.URL / CouchDatabase.Name / CouchDocuent.ID ","inlinecomment":" \t &apos; URL of the CouchDocument  \nFollows the pattern \nCouchServer.URL / CouchDatabase.Name / CouchDocuent.ID ","parentclassname":"CouchDocument","codesamplehtml":"&amp;apos; Sample code assumes previously created document As CouchDocument object &lt;br /&gt;&amp;apos; With CouchServer.URL of &amp;quot;http://mycouchserver.mycompany.com&amp;quot;&lt;br /&gt;&amp;apos; and CouchDatabase.Name of &amp;quot;recipes&amp;quot; &lt;br /&gt;&amp;apos; and CouchDocument.ID of &amp;quot;123456&amp;quot; &lt;br /&gt;Print |document.URL: | &amp;amp; document.URL &lt;br /&gt;&amp;apos; Prints &amp;quot;document.URL: http://mycouchserver.mycompany.com/recipes/123456&amp;quot; ", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"ID","comment":"ID that uniquely identifes the CouchDocument within the CouchDatabase. ","valuetype":"String","filenamebase":"ID_Method","fqnprefix":"CouchVSE.CouchDocument","qn":"Set.ID","codesample":"&amp;apos; Sample code assumes previously created document As CouchDocument object \n \nPrint |document.ID: | &amp;amp; document.ID ","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set ID As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;ID that uniquely identifes the CouchDocument within the CouchDatabase. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"ID that uniquely identifes the CouchDocument within the CouchDatabase. ","inlinecomment":" \t &apos; ID that uniquely identifes the CouchDocument within the CouchDatabase. ","parentclassname":"CouchDocument","codesamplehtml":"&amp;apos; Sample code assumes previously created document As CouchDocument object &lt;br /&gt; &lt;br /&gt;Print |document.ID: | &amp;amp; document.ID ", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"JSONValue","comment":"JSON String containing information about the CouchDocument. ","valuetype":"String","filenamebase":"JSONValue_Method","fqnprefix":"CouchVSE.CouchDocument","qn":"Set.JSONValue","codesample":"&amp;apos; Sample code assumes previously created server as CouchServer and database as CouchDatabase objects\n \nDim document As CouchDocument \nDim id As String \nDim json As String \n \nid = server.getUUID() &amp;apos; For this example, assume server.getUUID() returned &amp;quot;76796ba0df26f8c2e539cf39d300a38a&amp;quot;\njson = |{\n\t\t&amp;quot;recipe&amp;quot;: {\n\t\t\t&amp;quot;name&amp;quot;: &amp;quot;Watermelon Salad&amp;quot;,\n\t\t\t&amp;quot;PrepTime&amp;quot;: 15,\n\t\t\t&amp;quot;CookTime&amp;quot;: 5,\n\t\t\t&amp;quot;Servings&amp;quot;: 4,\n\t\t\t&amp;quot;Difficulty&amp;quot;: &amp;quot;&amp;quot;,\n\t\t\t&amp;quot;Ingredients&amp;quot;: [\n\t\t\t\t&amp;quot;6 cups cubed watermelon&amp;quot;,\n\t\t\t\t&amp;quot;2 tbsp. olive oil&amp;quot;,\n\t\t\t\t&amp;quot;1 tbsp. lime juice&amp;quot;,\n\t\t\t\t&amp;quot;1/3 cup chopped feta cheese&amp;quot;,\n\t\t\t\t&amp;quot;1/3 cup basil leaves&amp;quot;\n\t\t\t],\n\t\t\t&amp;quot;Directions&amp;quot;: [\n\t\t\t\t&amp;quot;Cube 6 cups of watermelon&amp;quot;,\n\t\t\t\t&amp;quot;Stir in olive oil and lime juice&amp;quot;,\n\t\t\t\t&amp;quot;Chop, and stir in feta cheese&amp;quot;,\n\t\t\t\t&amp;quot;Garnish with fresh basil&amp;quot;\n\t\t\t]\n\t\t}\n\t}|\n \nSet document = database.createDocument(id, json) \nCall document.Save() \nPrint document.JSONValue\n \n%REM Prints\n  {&amp;quot;$$Meta$$&amp;quot;:{&amp;quot;$LastModified&amp;quot;:&amp;quot;2023-09-23T13:05:26Z&amp;quot;},&amp;quot;_id&amp;quot;:&amp;quot;76796ba0df26f8c2e539cf39d300a38a&amp;quot;,&amp;quot;_rev&amp;quot;:&amp;quot;1-4134b4b21a14e6718782af9466ad32c3&amp;quot;,&amp;quot;recipe&amp;quot;:{&amp;quot;CookTime&amp;quot;:5,&amp;quot;Difficulty&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;Directions&amp;quot;:[&amp;quot;Cube 6 cups of watermelon&amp;quot;,&amp;quot;Stir in olive oil and lime juice&amp;quot;,&amp;quot;Chop, and stir in feta cheese&amp;quot;,&amp;quot;Garnish with fresh basil&amp;quot;],&amp;quot;Ingredients&amp;quot;:[&amp;quot;6 cups cubed watermelon&amp;quot;,&amp;quot;2 tbsp. olive oil&amp;quot;,&amp;quot;1 tbsp. lime juice&amp;quot;,&amp;quot;1/3 cup chopped feta cheese&amp;quot;,&amp;quot;1/3 cup basil leaves&amp;quot;],&amp;quot;PrepTime&amp;quot;:15,&amp;quot;Servings&amp;quot;:4,&amp;quot;name&amp;quot;:&amp;quot;Watermelon Salad&amp;quot;}}\n \n%END REM ","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set JSONValue As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JSON String containing information about the CouchDocument. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JSON String containing information about the CouchDocument. ","inlinecomment":" \t &apos; JSON String containing information about the CouchDocument. ","parentclassname":"CouchDocument","codesamplehtml":"&amp;apos; Sample code assumes previously created server as CouchServer and database as CouchDatabase objects&lt;br /&gt; &lt;br /&gt;Dim document As CouchDocument &lt;br /&gt;Dim id As String &lt;br /&gt;Dim json As String &lt;br /&gt; &lt;br /&gt;id = server.getUUID() &amp;apos; For this example, assume server.getUUID() returned &amp;quot;76796ba0df26f8c2e539cf39d300a38a&amp;quot;&lt;br /&gt;json = |{&lt;br /&gt;\t\t&amp;quot;recipe&amp;quot;: {&lt;br /&gt;\t\t\t&amp;quot;name&amp;quot;: &amp;quot;Watermelon Salad&amp;quot;,&lt;br /&gt;\t\t\t&amp;quot;PrepTime&amp;quot;: 15,&lt;br /&gt;\t\t\t&amp;quot;CookTime&amp;quot;: 5,&lt;br /&gt;\t\t\t&amp;quot;Servings&amp;quot;: 4,&lt;br /&gt;\t\t\t&amp;quot;Difficulty&amp;quot;: &amp;quot;&amp;quot;,&lt;br /&gt;\t\t\t&amp;quot;Ingredients&amp;quot;: [&lt;br /&gt;\t\t\t\t&amp;quot;6 cups cubed watermelon&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;2 tbsp. olive oil&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;1 tbsp. lime juice&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;1/3 cup chopped feta cheese&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;1/3 cup basil leaves&amp;quot;&lt;br /&gt;\t\t\t],&lt;br /&gt;\t\t\t&amp;quot;Directions&amp;quot;: [&lt;br /&gt;\t\t\t\t&amp;quot;Cube 6 cups of watermelon&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;Stir in olive oil and lime juice&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;Chop, and stir in feta cheese&amp;quot;,&lt;br /&gt;\t\t\t\t&amp;quot;Garnish with fresh basil&amp;quot;&lt;br /&gt;\t\t\t]&lt;br /&gt;\t\t}&lt;br /&gt;\t}|&lt;br /&gt; &lt;br /&gt;Set document = database.createDocument(id, json) &lt;br /&gt;Call document.Save() &lt;br /&gt;Print document.JSONValue&lt;br /&gt; &lt;br /&gt;%REM Prints&lt;br /&gt;  {&amp;quot;$$Meta$$&amp;quot;:{&amp;quot;$LastModified&amp;quot;:&amp;quot;2023-09-23T13:05:26Z&amp;quot;},&amp;quot;_id&amp;quot;:&amp;quot;76796ba0df26f8c2e539cf39d300a38a&amp;quot;,&amp;quot;_rev&amp;quot;:&amp;quot;1-4134b4b21a14e6718782af9466ad32c3&amp;quot;,&amp;quot;recipe&amp;quot;:{&amp;quot;CookTime&amp;quot;:5,&amp;quot;Difficulty&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;Directions&amp;quot;:[&amp;quot;Cube 6 cups of watermelon&amp;quot;,&amp;quot;Stir in olive oil and lime juice&amp;quot;,&amp;quot;Chop, and stir in feta cheese&amp;quot;,&amp;quot;Garnish with fresh basil&amp;quot;],&amp;quot;Ingredients&amp;quot;:[&amp;quot;6 cups cubed watermelon&amp;quot;,&amp;quot;2 tbsp. olive oil&amp;quot;,&amp;quot;1 tbsp. lime juice&amp;quot;,&amp;quot;1/3 cup chopped feta cheese&amp;quot;,&amp;quot;1/3 cup basil leaves&amp;quot;],&amp;quot;PrepTime&amp;quot;:15,&amp;quot;Servings&amp;quot;:4,&amp;quot;name&amp;quot;:&amp;quot;Watermelon Salad&amp;quot;}}&lt;br /&gt; &lt;br /&gt;%END REM ", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]}]},{"classname":"CouchForm","comment":"NOT IMPLEMENTED","valuetype":"","filenamebase":"CouchForm_ObjectClass","fqnprefix":"CouchVSE","qn":"CouchForm","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","classattribnewnotexposed":"UnexposedNew","projectid":"85258A0A005BFF7B85258714004ECA02","version":3,"classid":"85258A0A005BFF7B8525871500386DDA","lsxclassid":5,"signature":"Public Class CouchForm","modifiers":"Public","classname":"CouchForm","parentclassname":"None","constructorsignature":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED","inlinecomment":" \t &apos; NOT IMPLEMENTED","codesamplehtml":"", "attributes":["Hidden"], "methods":[{"label":"Name","comment":"NOT IMPLEMENTED","valuetype":"String","filenamebase":"Name_Method","fqnprefix":"CouchVSE.CouchForm","qn":"Get.Name","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Name As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED","inlinecomment":" \t &apos; NOT IMPLEMENTED","parentclassname":"CouchForm","codesamplehtml":"", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Template","comment":"NOT IMPLEMENTED","valuetype":"String","filenamebase":"Template_Method","fqnprefix":"CouchVSE.CouchForm","qn":"Get.Template","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Template As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED","inlinecomment":" \t &apos; NOT IMPLEMENTED","parentclassname":"CouchForm","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Template","comment":"NOT IMPLEMENTED","valuetype":"String","filenamebase":"Template_Method","fqnprefix":"CouchVSE.CouchForm","qn":"Set.Template","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set Template As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED","inlinecomment":" \t &apos; NOT IMPLEMENTED","parentclassname":"CouchForm","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]}]},{"classname":"CouchServer","comment":"Class for connecting to and interacting with a CouchDB Server.  Provides methods for getting and setting configuration information. ","valuetype":"","filenamebase":"CouchServer_ObjectClass","fqnprefix":"CouchVSE","qn":"CouchServer","codesample":"Option Public\nOption Declare\nUseVSE &amp;quot;*CouchVSE&amp;quot;\n \nFunction loginCouchDbServer(server as CouchServer, user As String, password As String, url As String, certificatepath As String) As Boolean \n    Dim loginResult as String \n \n    Try \n       If (server is Nothing) Then Set server = new CouchServer() \n \n        server.User = user\n        server.Password = password \n        server.URL = url \n \n        If (Len(FullTrim(certificatepath)) &amp;gt; 0) Then server.CertificatePath = certificatepath &amp;apos; only set certificate path if not blank\n \n        loginResult = server.Login() \n        Print &amp;quot;Login server: &amp;quot; &amp;amp; loginResult, &amp;quot;VSE Toolkit, Not Dead Yet, baby!&amp;quot;\n        Print &amp;quot;CouchDB version: &amp;quot; &amp;amp; server.Version \n \n        return True \n \n    Catch \n        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() \n        return False \n    End Try \nEnd Function","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","projectid":"85258A0A005BFF7B85258714004ECA02","version":3,"classid":"85258A0A005BFF7B8525871400748E38","lsxclassid":2,"signature":"Public Class CouchServer","modifiers":"Public","classname":"CouchServer","parentclassname":"None","constructorsignature":"Function New() As CouchServer","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class for connecting to and interacting with a CouchDB Server.  Provides methods for getting and setting configuration information. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class for connecting to and interacting with a CouchDB Server.  Provides methods for getting and setting configuration information. ","inlinecomment":" \t &apos; Class for connecting to and interacting with a CouchDB Server.  Provides methods for getting and setting configuration information. ","codesamplehtml":"Option Public&lt;br /&gt;Option Declare&lt;br /&gt;UseVSE &amp;quot;*CouchVSE&amp;quot;&lt;br /&gt; &lt;br /&gt;Function loginCouchDbServer(server as CouchServer, user As String, password As String, url As String, certificatepath As String) As Boolean &lt;br /&gt;    Dim loginResult as String &lt;br /&gt; &lt;br /&gt;    Try &lt;br /&gt;       If (server is Nothing) Then Set server = new CouchServer() &lt;br /&gt; &lt;br /&gt;        server.User = user&lt;br /&gt;        server.Password = password &lt;br /&gt;        server.URL = url &lt;br /&gt; &lt;br /&gt;        If (Len(FullTrim(certificatepath)) &amp;gt; 0) Then server.CertificatePath = certificatepath &amp;apos; only set certificate path if not blank&lt;br /&gt; &lt;br /&gt;        loginResult = server.Login() &lt;br /&gt;        Print &amp;quot;Login server: &amp;quot; &amp;amp; loginResult, &amp;quot;VSE Toolkit, Not Dead Yet, baby!&amp;quot;&lt;br /&gt;        Print &amp;quot;CouchDB version: &amp;quot; &amp;amp; server.Version &lt;br /&gt; &lt;br /&gt;        return True &lt;br /&gt; &lt;br /&gt;    Catch &lt;br /&gt;        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() &lt;br /&gt;        return False &lt;br /&gt;    End Try &lt;br /&gt;End Function", "methods":[{"label":"CreateDb","comment":"Creates a database using the specified name ","valuetype":"CouchDatabase","filenamebase":"CreateDb_Method","fqnprefix":"CouchVSE.CouchServer","qn":"CreateDb","codesample":"Function createCouchDbDatabase(server As CouchServer, dbName As String) As CouchDatabase \n    return server.CreateDb(dbName)\nEnd Funct","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String)","signature":"Function CreateDb(Name As String) As CouchDatabase","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a database using the specified name &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a database using the specified name ","inlinecomment":" \t &apos; Creates a database using the specified name ","parentclassname":"CouchServer","codesamplehtml":"Function createCouchDbDatabase(server As CouchServer, dbName As String) As CouchDatabase &lt;br /&gt;    return server.CreateDb(dbName)&lt;br /&gt;End Funct", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchServerCreateDb","qn":"Name","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"DeleteDb","comment":"Deletes the specified database from the CouchDB Server ","valuetype":"Boolean","filenamebase":"DeleteDb_Method","fqnprefix":"CouchVSE.CouchServer","qn":"DeleteDb","codesample":"Function deleteRecipesDatabase(server As CouchServer) As Boolean  \n    Dim db As CouchDatabase \n \n    If server.IsDatabase(&amp;quot;recipes&amp;quot;) Then \n        Set db = server.GetDb(&amp;quot;recipes&amp;quot;)\n        Return server.DeleteDb(db) \n    Else \n        Return False \n    End If \nEnd Function ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Database As CouchDatabase)","signature":"Function DeleteDb(Database As CouchDatabase) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Deletes the specified database from the CouchDB Server &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Deletes the specified database from the CouchDB Server ","inlinecomment":" \t &apos; Deletes the specified database from the CouchDB Server ","parentclassname":"CouchServer","codesamplehtml":"Function deleteRecipesDatabase(server As CouchServer) As Boolean  &lt;br /&gt;    Dim db As CouchDatabase &lt;br /&gt; &lt;br /&gt;    If server.IsDatabase(&amp;quot;recipes&amp;quot;) Then &lt;br /&gt;        Set db = server.GetDb(&amp;quot;recipes&amp;quot;)&lt;br /&gt;        Return server.DeleteDb(db) &lt;br /&gt;    Else &lt;br /&gt;        Return False &lt;br /&gt;    End If &lt;br /&gt;End Function ", "signatureelements":["Function"], "arguments":[{"label":"Database","comment":"","valuetype":"CouchDatabase","filenamebase":"Database_ValuedElement","fqnprefix":"CouchVSECouchServerDeleteDb","qn":"Database","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"GetDb","comment":"Gets the specified database (if it exists) ","valuetype":"CouchDatabase","filenamebase":"GetDb_Method","fqnprefix":"CouchVSE.CouchServer","qn":"GetDb","codesample":"Function getCouchDbDatabase(server As CouchServer, dbName As String) As CouchDatabase \n    return server.GetDb(dbName) \nEnd Function ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String)","signature":"Function GetDb(Name As String) As CouchDatabase","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the specified database (if it exists) &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the specified database (if it exists) ","inlinecomment":" \t &apos; Gets the specified database (if it exists) ","parentclassname":"CouchServer","codesamplehtml":"Function getCouchDbDatabase(server As CouchServer, dbName As String) As CouchDatabase &lt;br /&gt;    return server.GetDb(dbName) &lt;br /&gt;End Function ", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchServerGetDb","qn":"Name","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"GetUUID","comment":"Gets a Universally Unique Identifier (UUID) from the CouchDb server instance ","valuetype":"String","filenamebase":"GetUUID_Method","fqnprefix":"CouchVSE.CouchServer","qn":"GetUUID","codesample":"Function getCouchDbUUID(server As CouchServer) As String \n    return server.getUUID()\nEnd Function","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function GetUUID() As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets a Universally Unique Identifier (UUID) from the CouchDb server instance &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets a Universally Unique Identifier (UUID) from the CouchDb server instance ","inlinecomment":" \t &apos; Gets a Universally Unique Identifier (UUID) from the CouchDb server instance ","parentclassname":"CouchServer","codesamplehtml":"Function getCouchDbUUID(server As CouchServer) As String &lt;br /&gt;    return server.getUUID()&lt;br /&gt;End Function", "signatureelements":["Function"]},{"label":"IsDatabase","comment":"Boolean flag indicating if a database matching the specified DbName exists. ","valuetype":"Boolean","filenamebase":"IsDatabase_Method","fqnprefix":"CouchVSE.CouchServer","qn":"IsDatabase","codesample":"Function couchDbExists(server As CouchServer, dbName As String) As Boolean \n    return server.IsDatabase(dbName) \nEnd Function ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DbName As String)","signature":"Function IsDatabase(DbName As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Boolean flag indicating if a database matching the specified DbName exists. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Boolean flag indicating if a database matching the specified DbName exists. ","inlinecomment":" \t &apos; Boolean flag indicating if a database matching the specified DbName exists. ","parentclassname":"CouchServer","codesamplehtml":"Function couchDbExists(server As CouchServer, dbName As String) As Boolean &lt;br /&gt;    return server.IsDatabase(dbName) &lt;br /&gt;End Function ", "signatureelements":["Function"], "arguments":[{"label":"DbName","comment":"","valuetype":"String","filenamebase":"DbName_ValuedElement","fqnprefix":"CouchVSECouchServerIsDatabase","qn":"DbName","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"Login","comment":"Logs into the CouchDB Server using the previously set credentials and URL","valuetype":"String","filenamebase":"Login_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Login","codesample":"Dim server As New CouchServer() \n \nserver.User = |Your CouchDB User ID|\nserver.Password = |Your CouchDB Password|\nserver.URL = |URL to your CouchDB Server| \nCall server.Login() ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function Login() As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Logs into the CouchDB Server using the previously set credentials and URL&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Logs into the CouchDB Server using the previously set credentials and URL","inlinecomment":" \t &apos; Logs into the CouchDB Server using the previously set credentials and URL","parentclassname":"CouchServer","codesamplehtml":"Dim server As New CouchServer() &lt;br /&gt; &lt;br /&gt;server.User = |Your CouchDB User ID|&lt;br /&gt;server.Password = |Your CouchDB Password|&lt;br /&gt;server.URL = |URL to your CouchDB Server| &lt;br /&gt;Call server.Login() ", "signatureelements":["Function"]},{"label":"New","comment":"Constructor method for a CouchServer object. ","valuetype":"CouchServer","filenamebase":"New_Method","fqnprefix":"CouchVSE.CouchServer","qn":"New","codesample":"Dim server1 as New CouchServer() \n&amp;apos; or \nDim server2 as CouchServer \nSet server2 = New CouchServer() ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As CouchServer","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor method for a CouchServer object. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor method for a CouchServer object. ","inlinecomment":" \t &apos; Constructor method for a CouchServer object. ","parentclassname":"CouchServer","codesamplehtml":"Dim server1 as New CouchServer() &lt;br /&gt;&amp;apos; or &lt;br /&gt;Dim server2 as CouchServer &lt;br /&gt;Set server2 = New CouchServer() ", "signatureelements":["Function"]},{"label":"RegisterVSEPath","comment":"INTERNAL METHOD used to register the VSE with the operating system.  Not needed by application developers.","valuetype":"Boolean","filenamebase":"RegisterVSEPath_Method","fqnprefix":"CouchVSE.CouchServer","qn":"RegisterVSEPath","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function RegisterVSEPath() As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;INTERNAL METHOD used to register the VSE with the operating system.  Not needed by application developers.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"INTERNAL METHOD used to register the VSE with the operating system.  Not needed by application developers.","inlinecomment":" \t &apos; INTERNAL METHOD used to register the VSE with the operating system.  Not needed by application developers.","parentclassname":"CouchServer","codesamplehtml":"", "signatureelements":["Function"]},{"label":"CertificatePath","comment":"Path to a .crt file containing certificates for the server to connect to, if not on the PATH.  This should only be necessary for self-signed certificates.  \nIf the server requires SSL verification and there is no valid certificate or this is False then login will fail.","valuetype":"String","filenamebase":"CertificatePath_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.CertificatePath","codesample":"Dim server As New CouchServer() \n \nserver.CertificatePath = &amp;quot;filepath to your certificate&amp;quot; ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get CertificatePath As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to a .crt file containing certificates for the server to connect to, if not on the PATH.  This should only be necessary for self-signed certificates.  &lt;br /&gt;If the server requires SSL verification and there is no valid certificate or this is False then login will fail.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to a .crt file containing certificates for the server to connect to, if not on the PATH.  This should only be necessary for self-signed certificates.  &lt;br /&gt;If the server requires SSL verification and there is no valid certificate or this is False then login will fail.","inlinecomment":" \t &apos; Path to a .crt file containing certificates for the server to connect to, if not on the PATH.  This should only be necessary for self-signed certificates.  \nIf the server requires SSL verification and there is no valid certificate or this is False then login will fail.","parentclassname":"CouchServer","codesamplehtml":"Dim server As New CouchServer() &lt;br /&gt; &lt;br /&gt;server.CertificatePath = &amp;quot;filepath to your certificate&amp;quot; ", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"CouchVersion","comment":"Version of CouchDB being used by the connected CouchServer","valuetype":"String","filenamebase":"CouchVersion_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.CouchVersion","codesample":"&amp;apos; Sample code assumes previously created and logged in server As CouchServer object \n \nPrint |CouchServer.CouchVersion: | &amp;amp; server.CouchVersion ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get CouchVersion As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Version of CouchDB being used by the connected CouchServer&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Version of CouchDB being used by the connected CouchServer","inlinecomment":" \t &apos; Version of CouchDB being used by the connected CouchServer","parentclassname":"CouchServer","codesamplehtml":"&amp;apos; Sample code assumes previously created and logged in server As CouchServer object &lt;br /&gt; &lt;br /&gt;Print |CouchServer.CouchVersion: | &amp;amp; server.CouchVersion ", "attributes":["READ_ONLY","GET_CONST","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"DatabaseNames","comment":"String array containing the names of all databases for a couch server.","valuetype":"String","filenamebase":"DatabaseNames_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.DatabaseNames","codesample":"Function getCouchDbDatabaseNames(server as CouchServer) as Variant \n    Dim result as Variant \n    Dim i as Integer \n \n    result = server.DatabaseNames\n \n    i = Ubound(result) - Lbound(result)\n    If (Len(FullTrim(result(i))) &amp;gt; 0) Then i++\n    Print &amp;quot;There are &amp;quot; &amp;amp; i &amp;amp; &amp;quot; DatabaseNames: &amp;quot;, join(result, |, |)\n \n    Return result \nEnd Function ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get DatabaseNames As String Array","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String array containing the names of all databases for a couch server.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String array containing the names of all databases for a couch server.","inlinecomment":" \t &apos; String array containing the names of all databases for a couch server.","parentclassname":"CouchServer","codesamplehtml":"Function getCouchDbDatabaseNames(server as CouchServer) as Variant &lt;br /&gt;    Dim result as Variant &lt;br /&gt;    Dim i as Integer &lt;br /&gt; &lt;br /&gt;    result = server.DatabaseNames&lt;br /&gt; &lt;br /&gt;    i = Ubound(result) - Lbound(result)&lt;br /&gt;    If (Len(FullTrim(result(i))) &amp;gt; 0) Then i++&lt;br /&gt;    Print &amp;quot;There are &amp;quot; &amp;amp; i &amp;amp; &amp;quot; DatabaseNames: &amp;quot;, join(result, |, |)&lt;br /&gt; &lt;br /&gt;    Return result &lt;br /&gt;End Function ", "attributes":["READ_ONLY","Array"], "signatureelements":["Property","Get"]},{"label":"Features","comment":"Array of Strings indicating the Features (such as &amp;quot;access-ready&amp;quot;, &amp;quot;partitioned&amp;quot;, etc) of the CouchDB Server","valuetype":"String","filenamebase":"Features_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.Features","codesample":"Function getCouchDbFeatures(server as CouchServer) as Variant \n    Dim result as Variant \n    Dim i as Integer \n \n    result = server.Features\n \n    i = Ubound(result) - Lbound(result)\n    If (Len(FullTrim(result(i))) &amp;gt; 0) Then i++\n    Print &amp;quot;There are &amp;quot; &amp;amp; i &amp;amp; &amp;quot; Features: &amp;quot;, join(result, |, |)\n \n    Return result \nEnd Function","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Features As String Array","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array of Strings indicating the Features (such as &amp;quot;access-ready&amp;quot;, &amp;quot;partitioned&amp;quot;, etc) of the CouchDB Server&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array of Strings indicating the Features (such as &amp;quot;access-ready&amp;quot;, &amp;quot;partitioned&amp;quot;, etc) of the CouchDB Server","inlinecomment":" \t &apos; Array of Strings indicating the Features (such as &amp;quot;access-ready&amp;quot;, &amp;quot;partitioned&amp;quot;, etc) of the CouchDB Server","parentclassname":"CouchServer","codesamplehtml":"Function getCouchDbFeatures(server as CouchServer) as Variant &lt;br /&gt;    Dim result as Variant &lt;br /&gt;    Dim i as Integer &lt;br /&gt; &lt;br /&gt;    result = server.Features&lt;br /&gt; &lt;br /&gt;    i = Ubound(result) - Lbound(result)&lt;br /&gt;    If (Len(FullTrim(result(i))) &amp;gt; 0) Then i++&lt;br /&gt;    Print &amp;quot;There are &amp;quot; &amp;amp; i &amp;amp; &amp;quot; Features: &amp;quot;, join(result, |, |)&lt;br /&gt; &lt;br /&gt;    Return result &lt;br /&gt;End Function", "attributes":["READ_ONLY","SET_CONST","Array"], "signatureelements":["Property","Get"]},{"label":"LibCurlVersion","comment":"The version of Libcurl used by this vse","valuetype":"String","filenamebase":"LibCurlVersion_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.LibCurlVersion","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get LibCurlVersion As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;The version of Libcurl used by this vse&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"The version of Libcurl used by this vse","inlinecomment":" \t &apos; The version of Libcurl used by this vse","parentclassname":"CouchServer","codesamplehtml":"", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Password","comment":"Password used when logging into a CouchDB Server ","valuetype":"String","filenamebase":"Password_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.Password","codesample":"Dim server As New CouchServer() \nserver.Password = |Your CouchDB Password|","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Password As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Password used when logging into a CouchDB Server &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Password used when logging into a CouchDB Server ","inlinecomment":" \t &apos; Password used when logging into a CouchDB Server ","parentclassname":"CouchServer","codesamplehtml":"Dim server As New CouchServer() &lt;br /&gt;server.Password = |Your CouchDB Password|", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"SSLHostValidationOn","comment":"Turn on or off SSL host validation. If the server requires SSL verification and there is no valid certificate or this is False then login will fail.\n \nSettng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.\nDefault value is True.","valuetype":"Boolean","filenamebase":"SSLHostValidationOn_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.SSLHostValidationOn","codesample":"Dim server as new CouchServer() \nserver.SSLHostValidationOn = True ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get SSLHostValidationOn As Boolean","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Turn on or off SSL host validation. If the server requires SSL verification and there is no valid certificate or this is False then login will fail.&lt;br /&gt; &lt;br /&gt;Settng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.&lt;br /&gt;Default value is True.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Turn on or off SSL host validation. If the server requires SSL verification and there is no valid certificate or this is False then login will fail.&lt;br /&gt; &lt;br /&gt;Settng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.&lt;br /&gt;Default value is True.","inlinecomment":" \t &apos; Turn on or off SSL host validation. If the server requires SSL verification and there is no valid certificate or this is False then login will fail.\n \nSettng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.\nDefault value is True.","parentclassname":"CouchServer","codesamplehtml":"Dim server as new CouchServer() &lt;br /&gt;server.SSLHostValidationOn = True ", "signatureelements":["Property","Get"]},{"label":"URL","comment":"URL Used to access the CouchDB Server","valuetype":"String","filenamebase":"URL_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.URL","codesample":"Dim server As New CouchServer() \nserver.URL = |URL for your CouchDB Server|","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get URL As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;URL Used to access the CouchDB Server&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"URL Used to access the CouchDB Server","inlinecomment":" \t &apos; URL Used to access the CouchDB Server","parentclassname":"CouchServer","codesamplehtml":"Dim server As New CouchServer() &lt;br /&gt;server.URL = |URL for your CouchDB Server|", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"User","comment":"User name used when logging into a CouchDB Server","valuetype":"String","filenamebase":"User_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.User","codesample":"Dim server As New CouchServer() \nserver.User = |Your CouchDB User Name|","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get User As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;User name used when logging into a CouchDB Server&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"User name used when logging into a CouchDB Server","inlinecomment":" \t &apos; User name used when logging into a CouchDB Server","parentclassname":"CouchServer","codesamplehtml":"Dim server As New CouchServer() &lt;br /&gt;server.User = |Your CouchDB User Name|", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"VerboseLogging","comment":"Whether this CouchServer should create a .log file with verbose logging output from libcurl when a request is made. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","valuetype":"Boolean","filenamebase":"VerboseLogging_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.VerboseLogging","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get VerboseLogging As Boolean","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether this CouchServer should create a .log file with verbose logging output from libcurl when a request is made. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether this CouchServer should create a .log file with verbose logging output from libcurl when a request is made. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","inlinecomment":" \t &apos; Whether this CouchServer should create a .log file with verbose logging output from libcurl when a request is made. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","parentclassname":"CouchServer","codesamplehtml":"", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"VSEVersion","comment":"Represents the Version of the CouchVSE VoltScript extension in use. ","valuetype":"String","filenamebase":"VSEVersion_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.VSEVersion","codesample":"&amp;apos; Sample code assumes previously created and logged in server As CouchServer object \n \nPrint |CouchServer.VSEVersion: | &amp;amp; server.VSEVersion ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get VSEVersion As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Represents the Version of the CouchVSE VoltScript extension in use. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Represents the Version of the CouchVSE VoltScript extension in use. ","inlinecomment":" \t &apos; Represents the Version of the CouchVSE VoltScript extension in use. ","parentclassname":"CouchServer","codesamplehtml":"&amp;apos; Sample code assumes previously created and logged in server As CouchServer object &lt;br /&gt; &lt;br /&gt;Print |CouchServer.VSEVersion: | &amp;amp; server.VSEVersion ", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"CertificatePath","comment":"Path to a .crt file containing certificates for the server to connect to, if not on the PATH.  This should only be necessary for self-signed certificates.  \nIf the server requires SSL verification and there is no valid certificate or this is False then login will fail.","valuetype":"String","filenamebase":"CertificatePath_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Set.CertificatePath","codesample":"Dim server As New CouchServer() \n \nserver.CertificatePath = &amp;quot;filepath to your certificate&amp;quot; ","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set CertificatePath As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to a .crt file containing certificates for the server to connect to, if not on the PATH.  This should only be necessary for self-signed certificates.  &lt;br /&gt;If the server requires SSL verification and there is no valid certificate or this is False then login will fail.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to a .crt file containing certificates for the server to connect to, if not on the PATH.  This should only be necessary for self-signed certificates.  &lt;br /&gt;If the server requires SSL verification and there is no valid certificate or this is False then login will fail.","inlinecomment":" \t &apos; Path to a .crt file containing certificates for the server to connect to, if not on the PATH.  This should only be necessary for self-signed certificates.  \nIf the server requires SSL verification and there is no valid certificate or this is False then login will fail.","parentclassname":"CouchServer","codesamplehtml":"Dim server As New CouchServer() &lt;br /&gt; &lt;br /&gt;server.CertificatePath = &amp;quot;filepath to your certificate&amp;quot; ", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"Password","comment":"Password used when logging into a CouchDB Server ","valuetype":"String","filenamebase":"Password_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Set.Password","codesample":"Dim server As New CouchServer() \nserver.Password = |Your CouchDB Password|","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set Password As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Password used when logging into a CouchDB Server &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Password used when logging into a CouchDB Server ","inlinecomment":" \t &apos; Password used when logging into a CouchDB Server ","parentclassname":"CouchServer","codesamplehtml":"Dim server As New CouchServer() &lt;br /&gt;server.Password = |Your CouchDB Password|", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Set"]},{"label":"SSLHostValidationOn","comment":"Turn on or off SSL host validation. If the server requires SSL verification and there is no valid certificate or this is False then login will fail.\n \nSettng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.\nDefault value is True.","valuetype":"Boolean","filenamebase":"SSLHostValidationOn_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Set.SSLHostValidationOn","codesample":"Dim server as new CouchServer() \nserver.SSLHostValidationOn = True ","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set SSLHostValidationOn As Boolean","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Turn on or off SSL host validation. If the server requires SSL verification and there is no valid certificate or this is False then login will fail.&lt;br /&gt; &lt;br /&gt;Settng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.&lt;br /&gt;Default value is True.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Turn on or off SSL host validation. If the server requires SSL verification and there is no valid certificate or this is False then login will fail.&lt;br /&gt; &lt;br /&gt;Settng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.&lt;br /&gt;Default value is True.","inlinecomment":" \t &apos; Turn on or off SSL host validation. If the server requires SSL verification and there is no valid certificate or this is False then login will fail.\n \nSettng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.\nDefault value is True.","parentclassname":"CouchServer","codesamplehtml":"Dim server as new CouchServer() &lt;br /&gt;server.SSLHostValidationOn = True ", "signatureelements":["Property","Set"]},{"label":"URL","comment":"URL Used to access the CouchDB Server","valuetype":"String","filenamebase":"URL_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Set.URL","codesample":"Dim server As New CouchServer() \nserver.URL = |URL for your CouchDB Server|","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set URL As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;URL Used to access the CouchDB Server&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"URL Used to access the CouchDB Server","inlinecomment":" \t &apos; URL Used to access the CouchDB Server","parentclassname":"CouchServer","codesamplehtml":"Dim server As New CouchServer() &lt;br /&gt;server.URL = |URL for your CouchDB Server|", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Set"]},{"label":"User","comment":"User name used when logging into a CouchDB Server","valuetype":"String","filenamebase":"User_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Set.User","codesample":"Dim server As New CouchServer() \nserver.User = |Your CouchDB User Name|","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set User As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;User name used when logging into a CouchDB Server&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"User name used when logging into a CouchDB Server","inlinecomment":" \t &apos; User name used when logging into a CouchDB Server","parentclassname":"CouchServer","codesamplehtml":"Dim server As New CouchServer() &lt;br /&gt;server.User = |Your CouchDB User Name|", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Set"]},{"label":"VerboseLogging","comment":"Whether this CouchServer should create a .log file with verbose logging output from libcurl when a request is made. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","valuetype":"Boolean","filenamebase":"VerboseLogging_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Set.VerboseLogging","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set VerboseLogging As Boolean","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether this CouchServer should create a .log file with verbose logging output from libcurl when a request is made. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether this CouchServer should create a .log file with verbose logging output from libcurl when a request is made. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","inlinecomment":" \t &apos; Whether this CouchServer should create a .log file with verbose logging output from libcurl when a request is made. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","parentclassname":"CouchServer","codesamplehtml":"", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Set"]}]},{"classname":"CouchView","comment":"Represents a view within a CouchDatabase \n \nCreation - Use the CouchDatabase.CreateView() method \nRetrieval - Use the CouchDatabase.GetViewByID() method \nDeletion - Use the CouchDatabase.DeleteView() method ","valuetype":"","filenamebase":"CouchView_ObjectClass","fqnprefix":"CouchVSE","qn":"CouchView","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","classattribnewnotexposed":"UnexposedNew","projectid":"85258A0A005BFF7B85258714004ECA02","version":3,"classid":"85258A0A005BFF7B8525871500382E6B","lsxclassid":6,"signature":"Public Class CouchView","modifiers":"Public","classname":"CouchView","parentclassname":"None","constructorsignature":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Represents a view within a CouchDatabase &lt;br /&gt; &lt;br /&gt;Creation - Use the CouchDatabase.CreateView() method &lt;br /&gt;Retrieval - Use the CouchDatabase.GetViewByID() method &lt;br /&gt;Deletion - Use the CouchDatabase.DeleteView() method &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Represents a view within a CouchDatabase &lt;br /&gt; &lt;br /&gt;Creation - Use the CouchDatabase.CreateView() method &lt;br /&gt;Retrieval - Use the CouchDatabase.GetViewByID() method &lt;br /&gt;Deletion - Use the CouchDatabase.DeleteView() method ","inlinecomment":" \t &apos; Represents a view within a CouchDatabase \n \nCreation - Use the CouchDatabase.CreateView() method \nRetrieval - Use the CouchDatabase.GetViewByID() method \nDeletion - Use the CouchDatabase.DeleteView() method ","codesamplehtml":"", "methods":[{"label":"GetRowArray","comment":"Allows iteration through a CouchView, returning a selected set of rows of information. \n  \nReturns String Array, with each element contining the JSON for the specific row it represents. ","valuetype":"String","filenamebase":"GetRowArray_Method","fqnprefix":"CouchVSE.CouchView","qn":"GetRowArray","codesample":"&amp;apos; Sample code assumes previously instantiated view as CouchView object \n \nDim rows As Variant \n \nrows = view.getRowArray(0, 10)\nPrint |rows: | &amp;amp; join(rows, |, |) \n \n%REM sample view contains 3 documents, Print statement returns: \n\trows: {&amp;quot;id&amp;quot;:&amp;quot;Doc 3&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;boiled water&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Bob.3&amp;quot;}, {&amp;quot;id&amp;quot;:&amp;quot;Doc 2&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;nutella/jelly&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Bob.2&amp;quot;}, {&amp;quot;id&amp;quot;:&amp;quot;Doc 1&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;pasta&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Bob.1&amp;quot;}\n%END REM ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Skip As Integer, Limit As Integer)","signature":"Function GetRowArray(Skip As Integer, Limit As Integer) As String Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Allows iteration through a CouchView, returning a selected set of rows of information. &lt;br /&gt;  &lt;br /&gt;Returns String Array, with each element contining the JSON for the specific row it represents. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Allows iteration through a CouchView, returning a selected set of rows of information. &lt;br /&gt;  &lt;br /&gt;Returns String Array, with each element contining the JSON for the specific row it represents. ","inlinecomment":" \t &apos; Allows iteration through a CouchView, returning a selected set of rows of information. \n  \nReturns String Array, with each element contining the JSON for the specific row it represents. ","parentclassname":"CouchView","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated view as CouchView object &lt;br /&gt; &lt;br /&gt;Dim rows As Variant &lt;br /&gt; &lt;br /&gt;rows = view.getRowArray(0, 10)&lt;br /&gt;Print |rows: | &amp;amp; join(rows, |, |) &lt;br /&gt; &lt;br /&gt;%REM sample view contains 3 documents, Print statement returns: &lt;br /&gt;\trows: {&amp;quot;id&amp;quot;:&amp;quot;Doc 3&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;boiled water&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Bob.3&amp;quot;}, {&amp;quot;id&amp;quot;:&amp;quot;Doc 2&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;nutella/jelly&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Bob.2&amp;quot;}, {&amp;quot;id&amp;quot;:&amp;quot;Doc 1&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;pasta&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Bob.1&amp;quot;}&lt;br /&gt;%END REM ", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"Skip","comment":"Number of rows to SKIP prior to retrieving requested rows. ","valuetype":"Integer-Unsigned","filenamebase":"Skip_ValuedElement","fqnprefix":"CouchVSECouchViewGetRowArray","qn":"Skip","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Number of rows to SKIP prior to retrieving requested rows. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Number of rows to SKIP prior to retrieving requested rows. ","inlinecomment":" \t &apos; Number of rows to SKIP prior to retrieving requested rows. "},{"label":"Limit","comment":"Maximum number of rows to return. ","valuetype":"Integer-Unsigned","filenamebase":"Limit_ValuedElement","fqnprefix":"CouchVSECouchViewGetRowArray","qn":"Limit","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Maximum number of rows to return. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Maximum number of rows to return. ","inlinecomment":" \t &apos; Maximum number of rows to return. ", "attributes":["BY_VAL"]}]},{"label":"GetRowsByKey","comment":"Retrieves a specific subset of rows from the CouchView.  \n \nReturns a JSON String containing the content of all rows in the result set.","valuetype":"String","filenamebase":"GetRowsByKey_Method","fqnprefix":"CouchVSE.CouchView","qn":"GetRowsByKey","codesample":"&amp;apos; Sample code assumes previously instantiated view as CouchView object \n \nDim rows As String \n \nrows = view.getRowsByKey(&amp;quot;boiled water&amp;quot;, &amp;quot;nutella/jelly&amp;quot;, 10)\nPrint |rows: | &amp;amp; rows \n \n%REM sample view contains 3 documents, but only 2 match the specified keys, Print statement returns: \n\trows: {&amp;quot;total_rows&amp;quot;:3,&amp;quot;offset&amp;quot;:0,&amp;quot;rows&amp;quot;:[{&amp;quot;id&amp;quot;:&amp;quot;Doc 3&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;boiled water&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Bob.3&amp;quot;},{&amp;quot;id&amp;quot;:&amp;quot;Doc 2&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;nutella/jelly&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Bob.2&amp;quot;}]}\n%END REM ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(StartKey As String, EndKey As String, Limit As Integer)","signature":"Function GetRowsByKey(StartKey As String, EndKey As String, Limit As Integer) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Retrieves a specific subset of rows from the CouchView.  &lt;br /&gt; &lt;br /&gt;Returns a JSON String containing the content of all rows in the result set.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Retrieves a specific subset of rows from the CouchView.  &lt;br /&gt; &lt;br /&gt;Returns a JSON String containing the content of all rows in the result set.","inlinecomment":" \t &apos; Retrieves a specific subset of rows from the CouchView.  \n \nReturns a JSON String containing the content of all rows in the result set.","parentclassname":"CouchView","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated view as CouchView object &lt;br /&gt; &lt;br /&gt;Dim rows As String &lt;br /&gt; &lt;br /&gt;rows = view.getRowsByKey(&amp;quot;boiled water&amp;quot;, &amp;quot;nutella/jelly&amp;quot;, 10)&lt;br /&gt;Print |rows: | &amp;amp; rows &lt;br /&gt; &lt;br /&gt;%REM sample view contains 3 documents, but only 2 match the specified keys, Print statement returns: &lt;br /&gt;\trows: {&amp;quot;total_rows&amp;quot;:3,&amp;quot;offset&amp;quot;:0,&amp;quot;rows&amp;quot;:[{&amp;quot;id&amp;quot;:&amp;quot;Doc 3&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;boiled water&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Bob.3&amp;quot;},{&amp;quot;id&amp;quot;:&amp;quot;Doc 2&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;nutella/jelly&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Bob.2&amp;quot;}]}&lt;br /&gt;%END REM ", "signatureelements":["Function"], "arguments":[{"label":"StartKey","comment":"Key specifying the FIRST row to retrieve","valuetype":"String","filenamebase":"StartKey_ValuedElement","fqnprefix":"CouchVSECouchViewGetRowsByKey","qn":"StartKey","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Key specifying the FIRST row to retrieve&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Key specifying the FIRST row to retrieve","inlinecomment":" \t &apos; Key specifying the FIRST row to retrieve"},{"label":"EndKey","comment":"Key specifying the LAST row to retrieve","valuetype":"String","filenamebase":"EndKey_ValuedElement","fqnprefix":"CouchVSECouchViewGetRowsByKey","qn":"EndKey","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Key specifying the LAST row to retrieve&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Key specifying the LAST row to retrieve","inlinecomment":" \t &apos; Key specifying the LAST row to retrieve"},{"label":"Limit","comment":"Maximum number of rows to retrieve","valuetype":"Integer-Unsigned","filenamebase":"Limit_ValuedElement","fqnprefix":"CouchVSECouchViewGetRowsByKey","qn":"Limit","argumentindex":3,"optionalvalue":25,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Maximum number of rows to retrieve&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Maximum number of rows to retrieve","inlinecomment":" \t &apos; Maximum number of rows to retrieve", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"GetSomeRows","comment":"Allows iteration through a CouchView, returning a selected set of rows of information, includes meta information about the retrieved content (such as offset and number of rows in the view).   \n \nReturns a JSON String containing the content of all rows in the result set.","valuetype":"String","filenamebase":"GetSomeRows_Method","fqnprefix":"CouchVSE.CouchView","qn":"GetSomeRows","codesample":"&amp;apos; Sample code assumes previously instantiated view as CouchView object \n \nDim rows As String \n \nrows = view.getSomeRows(0, 10)\nPrint |rows: | &amp;amp; rows \n \n%REM sample view contains 3 documents, Print statement returns: \n\trows: {&amp;quot;total_rows&amp;quot;:3,&amp;quot;offset&amp;quot;:0,&amp;quot;rows&amp;quot;:[{&amp;quot;id&amp;quot;:&amp;quot;Doc 3&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;boiled water&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Bob.3&amp;quot;},{&amp;quot;id&amp;quot;:&amp;quot;Doc 2&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;nutella/jelly&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Bob.2&amp;quot;},{&amp;quot;id&amp;quot;:&amp;quot;Doc 1&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;pasta&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Bob.1&amp;quot;}]}\n%END REM ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Skip As Integer, Limit As Integer)","signature":"Function GetSomeRows(Skip As Integer, Limit As Integer) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Allows iteration through a CouchView, returning a selected set of rows of information, includes meta information about the retrieved content (such as offset and number of rows in the view).   &lt;br /&gt; &lt;br /&gt;Returns a JSON String containing the content of all rows in the result set.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Allows iteration through a CouchView, returning a selected set of rows of information, includes meta information about the retrieved content (such as offset and number of rows in the view).   &lt;br /&gt; &lt;br /&gt;Returns a JSON String containing the content of all rows in the result set.","inlinecomment":" \t &apos; Allows iteration through a CouchView, returning a selected set of rows of information, includes meta information about the retrieved content (such as offset and number of rows in the view).   \n \nReturns a JSON String containing the content of all rows in the result set.","parentclassname":"CouchView","codesamplehtml":"&amp;apos; Sample code assumes previously instantiated view as CouchView object &lt;br /&gt; &lt;br /&gt;Dim rows As String &lt;br /&gt; &lt;br /&gt;rows = view.getSomeRows(0, 10)&lt;br /&gt;Print |rows: | &amp;amp; rows &lt;br /&gt; &lt;br /&gt;%REM sample view contains 3 documents, Print statement returns: &lt;br /&gt;\trows: {&amp;quot;total_rows&amp;quot;:3,&amp;quot;offset&amp;quot;:0,&amp;quot;rows&amp;quot;:[{&amp;quot;id&amp;quot;:&amp;quot;Doc 3&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;boiled water&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Bob.3&amp;quot;},{&amp;quot;id&amp;quot;:&amp;quot;Doc 2&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;nutella/jelly&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Bob.2&amp;quot;},{&amp;quot;id&amp;quot;:&amp;quot;Doc 1&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;pasta&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Bob.1&amp;quot;}]}&lt;br /&gt;%END REM ", "signatureelements":["Function"], "arguments":[{"label":"Skip","comment":"Number of rows to SKIP prior to retrieving requested rows. ","valuetype":"Integer-Unsigned","filenamebase":"Skip_ValuedElement","fqnprefix":"CouchVSECouchViewGetSomeRows","qn":"Skip","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Number of rows to SKIP prior to retrieving requested rows. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Number of rows to SKIP prior to retrieving requested rows. ","inlinecomment":" \t &apos; Number of rows to SKIP prior to retrieving requested rows. ", "attributes":["BY_VAL"]},{"label":"Limit","comment":"Maximum number of rows to return. ","valuetype":"Integer-Unsigned","filenamebase":"Limit_ValuedElement","fqnprefix":"CouchVSECouchViewGetSomeRows","qn":"Limit","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Maximum number of rows to return. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Maximum number of rows to return. ","inlinecomment":" \t &apos; Maximum number of rows to return. ", "attributes":["BY_VAL"]}]},{"label":"GetViewInfo","comment":"Gets JSON information about the CouchView. ","valuetype":"String","filenamebase":"GetViewInfo_Method","fqnprefix":"CouchVSE.CouchView","qn":"GetViewInfo","codesample":"Print |view info:| &amp;amp; view.getViewInfo()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function GetViewInfo() As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets JSON information about the CouchView. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets JSON information about the CouchView. ","inlinecomment":" \t &apos; Gets JSON information about the CouchView. ","parentclassname":"CouchView","codesamplehtml":"Print |view info:| &amp;amp; view.getViewInfo()", "signatureelements":["Function"]},{"label":"Query","comment":"NOT IMPLEMENTED","valuetype":"CouchDocument","filenamebase":"Query_Method","fqnprefix":"CouchVSE.CouchView","qn":"Query","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(query As String)","signature":"Function Query(query As String) As CouchDocument Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED","inlinecomment":" \t &apos; NOT IMPLEMENTED","parentclassname":"CouchView","codesamplehtml":"", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"query","comment":"","valuetype":"String","filenamebase":"query_ValuedElement","fqnprefix":"CouchVSECouchViewQuery","qn":"query","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"Save","comment":"Saves the CouchView object to the backing Apache CouchDB database.","valuetype":"Boolean","filenamebase":"Save_Method","fqnprefix":"CouchVSE.CouchView","qn":"Save","codesample":"call view.Save() ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function Save() As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Saves the CouchView object to the backing Apache CouchDB database.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Saves the CouchView object to the backing Apache CouchDB database.","inlinecomment":" \t &apos; Saves the CouchView object to the backing Apache CouchDB database.","parentclassname":"CouchView","codesamplehtml":"call view.Save() ", "signatureelements":["Function"]},{"label":"Filters","comment":"NOT IMPLEMENTED","valuetype":"String","filenamebase":"Filters_Method","fqnprefix":"CouchVSE.CouchView","qn":"Get.Filters","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Filters As String Array","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED","inlinecomment":" \t &apos; NOT IMPLEMENTED","parentclassname":"CouchView","codesamplehtml":"", "attributes":["GET_CONST","SET_CONST","Array"], "signatureelements":["Property","Get"]},{"label":"ID","comment":"ID that uniquely identifes the CouchView within the CouchDatabase. ","valuetype":"String","filenamebase":"ID_Method","fqnprefix":"CouchVSE.CouchView","qn":"Get.ID","codesample":"&amp;apos; Sample code assumes previously created view As CouchView object \n \nPrint |view.ID: | &amp;amp; view.ID ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ID As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;ID that uniquely identifes the CouchView within the CouchDatabase. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"ID that uniquely identifes the CouchView within the CouchDatabase. ","inlinecomment":" \t &apos; ID that uniquely identifes the CouchView within the CouchDatabase. ","parentclassname":"CouchView","codesamplehtml":"&amp;apos; Sample code assumes previously created view As CouchView object &lt;br /&gt; &lt;br /&gt;Print |view.ID: | &amp;amp; view.ID ", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"JSONValue","comment":"JSON String containing information about the CouchView. ","valuetype":"String","filenamebase":"JSONValue_Method","fqnprefix":"CouchVSE.CouchView","qn":"Get.JSONValue","codesample":"&amp;apos; Sample code assumes previously created view as CouchView object\n \nPrint |view.JSONValue: | &amp;amp; view.JSONValue ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get JSONValue As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JSON String containing information about the CouchView. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JSON String containing information about the CouchView. ","inlinecomment":" \t &apos; JSON String containing information about the CouchView. ","parentclassname":"CouchView","codesamplehtml":"&amp;apos; Sample code assumes previously created view as CouchView object&lt;br /&gt; &lt;br /&gt;Print |view.JSONValue: | &amp;amp; view.JSONValue ", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Language","comment":"Programming Language for the CouchView -  JavaScript","valuetype":"String","filenamebase":"Language_Method","fqnprefix":"CouchVSE.CouchView","qn":"Get.Language","codesample":"&amp;apos; Sample code assumes previously created view as CouchView object\n \nPrint |view.Language: | &amp;amp; view.Language","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Language As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Programming Language for the CouchView -  JavaScript&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Programming Language for the CouchView -  JavaScript","inlinecomment":" \t &apos; Programming Language for the CouchView -  JavaScript","parentclassname":"CouchView","codesamplehtml":"&amp;apos; Sample code assumes previously created view as CouchView object&lt;br /&gt; &lt;br /&gt;Print |view.Language: | &amp;amp; view.Language", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"MapFunction","comment":"Javascript code defining view selection and columns for the object.  Refer to Apache CouchDB Documentation","valuetype":"String","filenamebase":"MapFunction_Method","fqnprefix":"CouchVSE.CouchView","qn":"Get.MapFunction","codesample":"&amp;apos; Sample code assumes previously created view as CouchView object\n \nPrint |view.MapFunction: | &amp;amp; view.MapFunction","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get MapFunction As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Javascript code defining view selection and columns for the object.  Refer to Apache CouchDB Documentation&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Javascript code defining view selection and columns for the object.  Refer to Apache CouchDB Documentation","inlinecomment":" \t &apos; Javascript code defining view selection and columns for the object.  Refer to Apache CouchDB Documentation","parentclassname":"CouchView","codesamplehtml":"&amp;apos; Sample code assumes previously created view as CouchView object&lt;br /&gt; &lt;br /&gt;Print |view.MapFunction: | &amp;amp; view.MapFunction", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"ReduceFunction","comment":"Javascript code defining map reducing for the object.  Refer to Apache CouchDB Documentation","valuetype":"String","filenamebase":"ReduceFunction_Method","fqnprefix":"CouchVSE.CouchView","qn":"Get.ReduceFunction","codesample":"&amp;apos; Sample code assumes previously created view as CouchView object\n \nPrint |view.ReduceFunction: | &amp;amp; view.ReduceFunction","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ReduceFunction As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Javascript code defining map reducing for the object.  Refer to Apache CouchDB Documentation&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Javascript code defining map reducing for the object.  Refer to Apache CouchDB Documentation","inlinecomment":" \t &apos; Javascript code defining map reducing for the object.  Refer to Apache CouchDB Documentation","parentclassname":"CouchView","codesamplehtml":"&amp;apos; Sample code assumes previously created view as CouchView object&lt;br /&gt; &lt;br /&gt;Print |view.ReduceFunction: | &amp;amp; view.ReduceFunction", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Revision","comment":"Unique code representing the revision value of the on-disk CouchView . This value is composed of 2 parts delimited by a hyphen.  This value is generated by Apache CouchDB itself, and if officially &amp;quot;opaque&amp;quot; - other than it is unique. \n  \nBehavior Notes:\n1) This is not set until the CouchView has been saved. ","valuetype":"String","filenamebase":"Revision_Method","fqnprefix":"CouchVSE.CouchView","qn":"Get.Revision","codesample":"&amp;apos; Sample code assumes previously created view as CouchView object\n \nPrint |view.Revision: | &amp;amp; view.Revision","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Revision As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Unique code representing the revision value of the on-disk CouchView . This value is composed of 2 parts delimited by a hyphen.  This value is generated by Apache CouchDB itself, and if officially &amp;quot;opaque&amp;quot; - other than it is unique. &lt;br /&gt;  &lt;br /&gt;Behavior Notes:&lt;br /&gt;1) This is not set until the CouchView has been saved. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Unique code representing the revision value of the on-disk CouchView . This value is composed of 2 parts delimited by a hyphen.  This value is generated by Apache CouchDB itself, and if officially &amp;quot;opaque&amp;quot; - other than it is unique. &lt;br /&gt;  &lt;br /&gt;Behavior Notes:&lt;br /&gt;1) This is not set until the CouchView has been saved. ","inlinecomment":" \t &apos; Unique code representing the revision value of the on-disk CouchView . This value is composed of 2 parts delimited by a hyphen.  This value is generated by Apache CouchDB itself, and if officially &amp;quot;opaque&amp;quot; - other than it is unique. \n  \nBehavior Notes:\n1) This is not set until the CouchView has been saved. ","parentclassname":"CouchView","codesamplehtml":"&amp;apos; Sample code assumes previously created view as CouchView object&lt;br /&gt; &lt;br /&gt;Print |view.Revision: | &amp;amp; view.Revision", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Filters","comment":"NOT IMPLEMENTED","valuetype":"String","filenamebase":"Filters_Method","fqnprefix":"CouchVSE.CouchView","qn":"Set.Filters","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set Filters As String Array","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;NOT IMPLEMENTED&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"NOT IMPLEMENTED","inlinecomment":" \t &apos; NOT IMPLEMENTED","parentclassname":"CouchView","codesamplehtml":"", "attributes":["GET_CONST","SET_CONST","Array"], "signatureelements":["Property","Set"]},{"label":"JSONValue","comment":"JSON String containing information about the CouchView. ","valuetype":"String","filenamebase":"JSONValue_Method","fqnprefix":"CouchVSE.CouchView","qn":"Set.JSONValue","codesample":"&amp;apos; Sample code assumes previously created view as CouchView object\n \nPrint |view.JSONValue: | &amp;amp; view.JSONValue ","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set JSONValue As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JSON String containing information about the CouchView. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JSON String containing information about the CouchView. ","inlinecomment":" \t &apos; JSON String containing information about the CouchView. ","parentclassname":"CouchView","codesamplehtml":"&amp;apos; Sample code assumes previously created view as CouchView object&lt;br /&gt; &lt;br /&gt;Print |view.JSONValue: | &amp;amp; view.JSONValue ", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"MapFunction","comment":"Javascript code defining view selection and columns for the object.  Refer to Apache CouchDB Documentation","valuetype":"String","filenamebase":"MapFunction_Method","fqnprefix":"CouchVSE.CouchView","qn":"Set.MapFunction","codesample":"&amp;apos; Sample code assumes previously created view as CouchView object\n \nPrint |view.MapFunction: | &amp;amp; view.MapFunction","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set MapFunction As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Javascript code defining view selection and columns for the object.  Refer to Apache CouchDB Documentation&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Javascript code defining view selection and columns for the object.  Refer to Apache CouchDB Documentation","inlinecomment":" \t &apos; Javascript code defining view selection and columns for the object.  Refer to Apache CouchDB Documentation","parentclassname":"CouchView","codesamplehtml":"&amp;apos; Sample code assumes previously created view as CouchView object&lt;br /&gt; &lt;br /&gt;Print |view.MapFunction: | &amp;amp; view.MapFunction", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"ReduceFunction","comment":"Javascript code defining map reducing for the object.  Refer to Apache CouchDB Documentation","valuetype":"String","filenamebase":"ReduceFunction_Method","fqnprefix":"CouchVSE.CouchView","qn":"Set.ReduceFunction","codesample":"&amp;apos; Sample code assumes previously created view as CouchView object\n \nPrint |view.ReduceFunction: | &amp;amp; view.ReduceFunction","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set ReduceFunction As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Javascript code defining map reducing for the object.  Refer to Apache CouchDB Documentation&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Javascript code defining map reducing for the object.  Refer to Apache CouchDB Documentation","inlinecomment":" \t &apos; Javascript code defining map reducing for the object.  Refer to Apache CouchDB Documentation","parentclassname":"CouchView","codesamplehtml":"&amp;apos; Sample code assumes previously created view as CouchView object&lt;br /&gt; &lt;br /&gt;Print |view.ReduceFunction: | &amp;amp; view.ReduceFunction", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]}]}], "platforms":["LINUX","W64"]}]}
