{"lsxname":"ZipVSE","comment":"","valuetype":"","filenamebase":"ZipVSE_VSE","fqnprefix":"ZipVSE","qn":"ZipVSE","codesample":"","signaturecode":32768,"instancecode":32768,"description":"","codesamplehtml":"","baseid":300,"baseguid":"31728AB1-9391-4D28-846C-F00A084C955D","characterset":"UNICODE","lsxcreator":"Bob Balaban","signature":"VSE ZipVSE","modifiers":"","lsxname":"ZipVSE","summary":"","commentblock":"","commenthtml":"","inlinecomment":"", "classes":[{"classname":"ZipArchive","comment":"ZipArchive is a collection class: iterate using &amp;quot;forall&amp;quot;, or use a file name as an index. E.g., set ZipFileInstance = Archive(&amp;quot;filename&amp;quot;). Using filename as index throws error 404 if there is no matching file is in the zip archive.","valuetype":"","filenamebase":"ZipArchive_ObjectClass","fqnprefix":"ZipVSE","qn":"ZipArchive","codesample":"%REM\n    The following code gets a file by name\n%END REM\nDim zip as New ZipArchive()\nDim zipFile as ZipFile\nCall zip.openArchive(CurDir &amp;amp; &amp;quot;/zip1.zip&amp;quot;)\nSet zipFile = zip(&amp;quot;temp1.txt&amp;quot;)    &amp;apos; This will error if zip archive does not include a file temp1\nCall zip.closeArchive()\n%REM\n    The following code extracts top-level files only\n%END REM\nDim zip as New ZipArchive()\nCall zip.openArchive(CurDir &amp;amp; &amp;quot;/zip1.zip&amp;quot;)\nForAll zipFile in zip\n   If Not zipFile.isDirectory Then zipFile.extractFile(CurDir, False, True)\nEnd ForAll\nCall zip.closeArchive()","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"ZipFile","colindextype":"String","projectid":"48258A08005C548085258916003F8EF3","version":3,"classid":"48258A08005C548085258916003F9B5E","lsxclassid":2,"signature":"Public Class ZipArchive","modifiers":"Public","classname":"ZipArchive","parentclassname":"None","constructorsignature":"Function New() As ZipArchive","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;ZipArchive is a collection class: iterate using &amp;quot;forall&amp;quot;, or use a file name as an index. E.g., set ZipFileInstance = Archive(&amp;quot;filename&amp;quot;). Using filename as index throws error 404 if there is no matching file is in the zip archive.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"ZipArchive is a collection class: iterate using &amp;quot;forall&amp;quot;, or use a file name as an index. E.g., set ZipFileInstance = Archive(&amp;quot;filename&amp;quot;). Using filename as index throws error 404 if there is no matching file is in the zip archive.","inlinecomment":" \t &apos; ZipArchive is a collection class: iterate using &amp;quot;forall&amp;quot;, or use a file name as an index. E.g., set ZipFileInstance = Archive(&amp;quot;filename&amp;quot;). Using filename as index throws error 404 if there is no matching file is in the zip archive.","codesamplehtml":"%REM&lt;br /&gt;    The following code gets a file by name&lt;br /&gt;%END REM&lt;br /&gt;Dim zip as New ZipArchive()&lt;br /&gt;Dim zipFile as ZipFile&lt;br /&gt;Call zip.openArchive(CurDir &amp;amp; &amp;quot;/zip1.zip&amp;quot;)&lt;br /&gt;Set zipFile = zip(&amp;quot;temp1.txt&amp;quot;)    &amp;apos; This will error if zip archive does not include a file temp1&lt;br /&gt;Call zip.closeArchive()&lt;br /&gt;%REM&lt;br /&gt;    The following code extracts top-level files only&lt;br /&gt;%END REM&lt;br /&gt;Dim zip as New ZipArchive()&lt;br /&gt;Call zip.openArchive(CurDir &amp;amp; &amp;quot;/zip1.zip&amp;quot;)&lt;br /&gt;ForAll zipFile in zip&lt;br /&gt;   If Not zipFile.isDirectory Then zipFile.extractFile(CurDir, False, True)&lt;br /&gt;End ForAll&lt;br /&gt;Call zip.closeArchive()", "attributes":["Collection"], "methods":[{"label":"Warning","comment":"","valuetype":"","filenamebase":"Warning_Method","fqnprefix":"ZipVSE.ZipArchive","qn":"Warning","codesample":"","signaturecode":128,"instancecode":128,"f_returnsobject":"","argumentsuffix":"(Code As Integer, Message As String)","signature":"Event Warning(Code As Integer, Message As String)","modifiers":"","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"ZipArchive","codesamplehtml":"", "signatureelements":["Event"], "arguments":[{"label":"Code","comment":"","valuetype":"Integer","filenamebase":"Code_ValuedElement","fqnprefix":"ZipVSEZipArchiveWarning","qn":"Code","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":"", "attributes":["BY_VAL"]},{"label":"Message","comment":"","valuetype":"String","filenamebase":"Message_ValuedElement","fqnprefix":"ZipVSEZipArchiveWarning","qn":"Message","argumentindex":2,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"AddFile","comment":"Add a file to the zip archive.","valuetype":"ZipFile","filenamebase":"AddFile_Method","fqnprefix":"ZipVSE.ZipArchive","qn":"AddFile","codesample":"%REM\n    The following code creates a zip with three files:\ntest1.txt\nsamples/test1.txt\ntest2.txt (because of the last parameter, telling it to create the file without using the full path from the first parameter)\n%END REM\nDim zipArchive as New ZipArchive\nCall zip.createArchive(&amp;quot;zip1.zip&amp;quot;, &amp;quot;&amp;quot;, True)\nCall zip.addFile(&amp;quot;test1.txt&amp;quot;)\nCall zip.addFile(&amp;quot;samples/test1.txt&amp;quot;)\nCall zip.addFile(&amp;quot;samples/test2.txt&amp;quot;, &amp;quot;&amp;quot;, False)\nCall zip.closeArchive()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(FilePath As String, Comment As String, UseFullPath As Boolean)","signature":"Function AddFile(FilePath As String, Comment As String, UseFullPath As Boolean) As ZipFile","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Add a file to the zip archive.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Add a file to the zip archive.","inlinecomment":" \t &apos; Add a file to the zip archive.","parentclassname":"ZipArchive","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a zip with three files:&lt;br /&gt;test1.txt&lt;br /&gt;samples/test1.txt&lt;br /&gt;test2.txt (because of the last parameter, telling it to create the file without using the full path from the first parameter)&lt;br /&gt;%END REM&lt;br /&gt;Dim zipArchive as New ZipArchive&lt;br /&gt;Call zip.createArchive(&amp;quot;zip1.zip&amp;quot;, &amp;quot;&amp;quot;, True)&lt;br /&gt;Call zip.addFile(&amp;quot;test1.txt&amp;quot;)&lt;br /&gt;Call zip.addFile(&amp;quot;samples/test1.txt&amp;quot;)&lt;br /&gt;Call zip.addFile(&amp;quot;samples/test2.txt&amp;quot;, &amp;quot;&amp;quot;, False)&lt;br /&gt;Call zip.closeArchive()", "signatureelements":["Function"], "arguments":[{"label":"FilePath","comment":"Path to the file to add","valuetype":"String","filenamebase":"FilePath_ValuedElement","fqnprefix":"ZipVSEZipArchiveAddFile","qn":"FilePath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to the file to add&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to the file to add","inlinecomment":" \t &apos; Path to the file to add"},{"label":"Comment","comment":"Comment to assign to the file in the zip","valuetype":"String","filenamebase":"Comment_ValuedElement","fqnprefix":"ZipVSEZipArchiveAddFile","qn":"Comment","argumentindex":2,"optionalvalue":"LIT_STR(&quot;&quot;)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Comment to assign to the file in the zip&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Comment to assign to the file in the zip","inlinecomment":" \t &apos; Comment to assign to the file in the zip", "attributes":["CONST","OPTIONAL"]},{"label":"UseFullPath","comment":"Whether to add the file with the full path with which the file was retrieved","valuetype":"Boolean","filenamebase":"UseFullPath_ValuedElement","fqnprefix":"ZipVSEZipArchiveAddFile","qn":"UseFullPath","argumentindex":3,"optionalvalue":"LSXTrue","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether to add the file with the full path with which the file was retrieved&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether to add the file with the full path with which the file was retrieved","inlinecomment":" \t &apos; Whether to add the file with the full path with which the file was retrieved", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"AddFileList","comment":"Add an array of files to the zip, optionally using the full path.","valuetype":"ZipFile","filenamebase":"AddFileList_Method","fqnprefix":"ZipVSE.ZipArchive","qn":"AddFileList","codesample":"%REM\n    The following code adds test1.txt and test2.txt to the zip archive\n%END REM\nDim zip as New ZipArchive()\nDim files(1) as String\nfiles(0) = &amp;quot;test1.txt&amp;quot;\nfiles(1) = &amp;quot;test2.txt&amp;quot;\nCall zip.createArchive(&amp;quot;zip1.zip&amp;quot;, &amp;quot;&amp;quot;, True)\nCall zip.addFileList(CurDir, files)\nCall zip.closeArchive()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DirectoryPath As String, FileNames As String Array, UseFullPath As Boolean)","signature":"Function AddFileList(DirectoryPath As String, FileNames As String Array, UseFullPath As Boolean) As ZipFile Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Add an array of files to the zip, optionally using the full path.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Add an array of files to the zip, optionally using the full path.","inlinecomment":" \t &apos; Add an array of files to the zip, optionally using the full path.","parentclassname":"ZipArchive","codesamplehtml":"%REM&lt;br /&gt;    The following code adds test1.txt and test2.txt to the zip archive&lt;br /&gt;%END REM&lt;br /&gt;Dim zip as New ZipArchive()&lt;br /&gt;Dim files(1) as String&lt;br /&gt;files(0) = &amp;quot;test1.txt&amp;quot;&lt;br /&gt;files(1) = &amp;quot;test2.txt&amp;quot;&lt;br /&gt;Call zip.createArchive(&amp;quot;zip1.zip&amp;quot;, &amp;quot;&amp;quot;, True)&lt;br /&gt;Call zip.addFileList(CurDir, files)&lt;br /&gt;Call zip.closeArchive()", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"DirectoryPath","comment":"Directory containing the files in the FileNames argument","valuetype":"String","filenamebase":"DirectoryPath_ValuedElement","fqnprefix":"ZipVSEZipArchiveAddFileList","qn":"DirectoryPath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Directory containing the files in the FileNames argument&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Directory containing the files in the FileNames argument","inlinecomment":" \t &apos; Directory containing the files in the FileNames argument"},{"label":"FileNames","comment":"Array of files to add","valuetype":"String","filenamebase":"FileNames_ValuedElement","fqnprefix":"ZipVSEZipArchiveAddFileList","qn":"FileNames","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array of files to add&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array of files to add","inlinecomment":" \t &apos; Array of files to add", "attributes":["Array"]},{"label":"UseFullPath","comment":"Whether to add the file with the full path with which the file was retrieved","valuetype":"Boolean","filenamebase":"UseFullPath_ValuedElement","fqnprefix":"ZipVSEZipArchiveAddFileList","qn":"UseFullPath","argumentindex":3,"optionalvalue":"LSXTrue","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether to add the file with the full path with which the file was retrieved&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether to add the file with the full path with which the file was retrieved","inlinecomment":" \t &apos; Whether to add the file with the full path with which the file was retrieved", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"AddFiles","comment":"Adds all files that match a particular wildcard specification in a specific directory.","valuetype":"ZipFile","filenamebase":"AddFiles_Method","fqnprefix":"ZipVSE.ZipArchive","qn":"AddFiles","codesample":"%REM\n    Gets all .txt files and adds them to a zip\n%END REM\nDim zip as New ZipArchive()\nCall zip.createArchive(&amp;quot;zip1.zip&amp;quot;, &amp;quot;&amp;quot;, True)\nCall zip.addFiles(CurDir, &amp;quot;*.txt&amp;quot;)\nCall zip.closeArchive()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DirectoryPath As String, WildcardSpec As String, UseFullPath As Boolean)","signature":"Function AddFiles(DirectoryPath As String, WildcardSpec As String, UseFullPath As Boolean) As ZipFile Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds all files that match a particular wildcard specification in a specific directory.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds all files that match a particular wildcard specification in a specific directory.","inlinecomment":" \t &apos; Adds all files that match a particular wildcard specification in a specific directory.","parentclassname":"ZipArchive","codesamplehtml":"%REM&lt;br /&gt;    Gets all .txt files and adds them to a zip&lt;br /&gt;%END REM&lt;br /&gt;Dim zip as New ZipArchive()&lt;br /&gt;Call zip.createArchive(&amp;quot;zip1.zip&amp;quot;, &amp;quot;&amp;quot;, True)&lt;br /&gt;Call zip.addFiles(CurDir, &amp;quot;*.txt&amp;quot;)&lt;br /&gt;Call zip.closeArchive()", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"DirectoryPath","comment":"Directory from which to add files","valuetype":"String","filenamebase":"DirectoryPath_ValuedElement","fqnprefix":"ZipVSEZipArchiveAddFiles","qn":"DirectoryPath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Directory from which to add files&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Directory from which to add files","inlinecomment":" \t &apos; Directory from which to add files"},{"label":"WildcardSpec","comment":"Specification for which files to add, e.g. &amp;quot;*.pdf&amp;quot;","valuetype":"String","filenamebase":"WildcardSpec_ValuedElement","fqnprefix":"ZipVSEZipArchiveAddFiles","qn":"WildcardSpec","argumentindex":2,"optionalvalue":"LIT_STR(&quot;*&quot;)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Specification for which files to add, e.g. &amp;quot;*.pdf&amp;quot;&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Specification for which files to add, e.g. &amp;quot;*.pdf&amp;quot;","inlinecomment":" \t &apos; Specification for which files to add, e.g. &amp;quot;*.pdf&amp;quot;", "attributes":["CONST","OPTIONAL"]},{"label":"UseFullPath","comment":"Whether to add the file with the full path with which the file was retrieved","valuetype":"Boolean","filenamebase":"UseFullPath_ValuedElement","fqnprefix":"ZipVSEZipArchiveAddFiles","qn":"UseFullPath","argumentindex":3,"optionalvalue":"LSXTrue","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether to add the file with the full path with which the file was retrieved&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether to add the file with the full path with which the file was retrieved","inlinecomment":" \t &apos; Whether to add the file with the full path with which the file was retrieved", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"CreateArchive","comment":"Creates a new zip archive ready for files to be addde. If you are just wanting to extract files from an existing zip, use openArchive() instead","valuetype":"Boolean","filenamebase":"CreateArchive_Method","fqnprefix":"ZipVSE.ZipArchive","qn":"CreateArchive","codesample":"%REM\n    The following code creates a zip archive and adds all .txt files from the current directory to it\n%END REM\nDim zip as New ZipArchive()\nCall zip.createArchive(&amp;quot;zip1.zip&amp;quot;, &amp;quot;&amp;quot;, True)\nCall zip.addFiles(CurDir, &amp;quot;*.txt&amp;quot;)\nCall zip.closeArchive()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(FilePath As String, Comment As String, Overwrite As Boolean)","signature":"Function CreateArchive(FilePath As String, Comment As String, Overwrite As Boolean) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a new zip archive ready for files to be addde. If you are just wanting to extract files from an existing zip, use openArchive() instead&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a new zip archive ready for files to be addde. If you are just wanting to extract files from an existing zip, use openArchive() instead","inlinecomment":" \t &apos; Creates a new zip archive ready for files to be addde. If you are just wanting to extract files from an existing zip, use openArchive() instead","parentclassname":"ZipArchive","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a zip archive and adds all .txt files from the current directory to it&lt;br /&gt;%END REM&lt;br /&gt;Dim zip as New ZipArchive()&lt;br /&gt;Call zip.createArchive(&amp;quot;zip1.zip&amp;quot;, &amp;quot;&amp;quot;, True)&lt;br /&gt;Call zip.addFiles(CurDir, &amp;quot;*.txt&amp;quot;)&lt;br /&gt;Call zip.closeArchive()", "signatureelements":["Function"], "arguments":[{"label":"FilePath","comment":"Path at which to create the archive","valuetype":"String","filenamebase":"FilePath_ValuedElement","fqnprefix":"ZipVSEZipArchiveCreateArchive","qn":"FilePath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path at which to create the archive&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path at which to create the archive","inlinecomment":" \t &apos; Path at which to create the archive"},{"label":"Comment","comment":"Global comment to apply to the zip archive","valuetype":"String","filenamebase":"Comment_ValuedElement","fqnprefix":"ZipVSEZipArchiveCreateArchive","qn":"Comment","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Global comment to apply to the zip archive&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Global comment to apply to the zip archive","inlinecomment":" \t &apos; Global comment to apply to the zip archive"},{"label":"Overwrite","comment":"Whether to overwrite a zip if one already exists at the requestd filepath","valuetype":"Boolean","filenamebase":"Overwrite_ValuedElement","fqnprefix":"ZipVSEZipArchiveCreateArchive","qn":"Overwrite","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether to overwrite a zip if one already exists at the requestd filepath&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether to overwrite a zip if one already exists at the requestd filepath","inlinecomment":" \t &apos; Whether to overwrite a zip if one already exists at the requestd filepath", "attributes":["BY_VAL"]}]},{"label":"ExtractAllFiles","comment":"Extracts all files from a zip to a specific directory","valuetype":"Boolean","filenamebase":"ExtractAllFiles_Method","fqnprefix":"ZipVSE.ZipArchive","qn":"ExtractAllFiles","codesample":"%REM\n   The following code extracts all files from a zip in a single API call\n%END REM\nDim zip as New ZipArchive()\nCall zip.openArchive(&amp;quot;zip1.zip&amp;quot;)\nCall zip.extractAllFiles(CurDir, False, True)\nCall zip.closeArchive()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DestinationDirectory As String, CreateDirectory As Boolean, OverwriteFiles As Boolean)","signature":"Function ExtractAllFiles(DestinationDirectory As String, CreateDirectory As Boolean, OverwriteFiles As Boolean) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Extracts all files from a zip to a specific directory&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Extracts all files from a zip to a specific directory","inlinecomment":" \t &apos; Extracts all files from a zip to a specific directory","parentclassname":"ZipArchive","codesamplehtml":"%REM&lt;br /&gt;   The following code extracts all files from a zip in a single API call&lt;br /&gt;%END REM&lt;br /&gt;Dim zip as New ZipArchive()&lt;br /&gt;Call zip.openArchive(&amp;quot;zip1.zip&amp;quot;)&lt;br /&gt;Call zip.extractAllFiles(CurDir, False, True)&lt;br /&gt;Call zip.closeArchive()", "signatureelements":["Function"], "arguments":[{"label":"DestinationDirectory","comment":"Directory into which to extract the files","valuetype":"String","filenamebase":"DestinationDirectory_ValuedElement","fqnprefix":"ZipVSEZipArchiveExtractAllFiles","qn":"DestinationDirectory","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Directory into which to extract the files&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Directory into which to extract the files","inlinecomment":" \t &apos; Directory into which to extract the files"},{"label":"CreateDirectory","comment":"Whether to create the directory","valuetype":"Boolean","filenamebase":"CreateDirectory_ValuedElement","fqnprefix":"ZipVSEZipArchiveExtractAllFiles","qn":"CreateDirectory","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether to create the directory&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether to create the directory","inlinecomment":" \t &apos; Whether to create the directory", "attributes":["BY_VAL"]},{"label":"OverwriteFiles","comment":"Whether to overwrite a file if one already exists with the same name","valuetype":"Boolean","filenamebase":"OverwriteFiles_ValuedElement","fqnprefix":"ZipVSEZipArchiveExtractAllFiles","qn":"OverwriteFiles","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether to overwrite a file if one already exists with the same name&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether to overwrite a file if one already exists with the same name","inlinecomment":" \t &apos; Whether to overwrite a file if one already exists with the same name", "attributes":["BY_VAL"]}]},{"label":"FindFile","comment":"Finds a file within a zip archive. Triggers error 404 if file not found.","valuetype":"ZipFile","filenamebase":"FindFile_Method","fqnprefix":"ZipVSE.ZipArchive","qn":"FindFile","codesample":"%REM\n    Gets a file from the archive, with error handling if the file doesn&amp;apos;t exist\n%END REM\nDim zip as New ZipArchive()\nDim zf as ZipFile\nCall zip.openArchive(CurDir &amp;amp; &amp;quot;/zip1.zip&amp;quot;)\nTry\n    Set zf = zip.findFile(&amp;quot;testFail.txt&amp;quot;)\nCatch\n    Print &amp;quot;Error: &amp;quot; &amp;amp; Err &amp;amp; &amp;quot;, Line: &amp;quot; &amp;amp; Erl\nEnd Try\nCall zip.closeArchive()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(FileName As String)","signature":"Function FindFile(FileName As String) As ZipFile","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Finds a file within a zip archive. Triggers error 404 if file not found.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Finds a file within a zip archive. Triggers error 404 if file not found.","inlinecomment":" \t &apos; Finds a file within a zip archive. Triggers error 404 if file not found.","parentclassname":"ZipArchive","codesamplehtml":"%REM&lt;br /&gt;    Gets a file from the archive, with error handling if the file doesn&amp;apos;t exist&lt;br /&gt;%END REM&lt;br /&gt;Dim zip as New ZipArchive()&lt;br /&gt;Dim zf as ZipFile&lt;br /&gt;Call zip.openArchive(CurDir &amp;amp; &amp;quot;/zip1.zip&amp;quot;)&lt;br /&gt;Try&lt;br /&gt;    Set zf = zip.findFile(&amp;quot;testFail.txt&amp;quot;)&lt;br /&gt;Catch&lt;br /&gt;    Print &amp;quot;Error: &amp;quot; &amp;amp; Err &amp;amp; &amp;quot;, Line: &amp;quot; &amp;amp; Erl&lt;br /&gt;End Try&lt;br /&gt;Call zip.closeArchive()", "signatureelements":["Function"], "arguments":[{"label":"FileName","comment":"Filename to look for","valuetype":"String","filenamebase":"FileName_ValuedElement","fqnprefix":"ZipVSEZipArchiveFindFile","qn":"FileName","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Filename to look for&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Filename to look for","inlinecomment":" \t &apos; Filename to look for"}]},{"label":"New","comment":"","valuetype":"ZipArchive","filenamebase":"New_Method","fqnprefix":"ZipVSE.ZipArchive","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As ZipArchive","modifiers":"","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"ZipArchive","codesamplehtml":"", "signatureelements":["Function"]},{"label":"OpenArchive","comment":"Opens an existing zip archive at a specified filepath.","valuetype":"Boolean","filenamebase":"OpenArchive_Method","fqnprefix":"ZipVSE.ZipArchive","qn":"OpenArchive","codesample":"%REM\n    The following code extracts all top-level files from a zip archive\n%END REM\nDim zip as New ZipArchive()\nCall zip.openArchive(CurDir &amp;amp; &amp;quot;/zip1.zip&amp;quot;)\nForAll zipFile in zip\n   If Not zipFile.isDirectory Then \n      zipFile.extractFile(CurDir, False, True)\n   End If\nEnd ForAll\nCall zip.closeArchive()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(FilePath As String)","signature":"Function OpenArchive(FilePath As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Opens an existing zip archive at a specified filepath.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Opens an existing zip archive at a specified filepath.","inlinecomment":" \t &apos; Opens an existing zip archive at a specified filepath.","parentclassname":"ZipArchive","codesamplehtml":"%REM&lt;br /&gt;    The following code extracts all top-level files from a zip archive&lt;br /&gt;%END REM&lt;br /&gt;Dim zip as New ZipArchive()&lt;br /&gt;Call zip.openArchive(CurDir &amp;amp; &amp;quot;/zip1.zip&amp;quot;)&lt;br /&gt;ForAll zipFile in zip&lt;br /&gt;   If Not zipFile.isDirectory Then &lt;br /&gt;      zipFile.extractFile(CurDir, False, True)&lt;br /&gt;   End If&lt;br /&gt;End ForAll&lt;br /&gt;Call zip.closeArchive()", "signatureelements":["Function"], "arguments":[{"label":"FilePath","comment":"Filepath for the zip archive","valuetype":"String","filenamebase":"FilePath_ValuedElement","fqnprefix":"ZipVSEZipArchiveOpenArchive","qn":"FilePath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Filepath for the zip archive&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Filepath for the zip archive","inlinecomment":" \t &apos; Filepath for the zip archive"}]},{"label":"RegisterVSEPath","comment":"Internal method used to register the VSE with the runtime registry.","valuetype":"Boolean","filenamebase":"RegisterVSEPath_Method","fqnprefix":"ZipVSE.ZipArchive","qn":"RegisterVSEPath","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function RegisterVSEPath() As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Internal method used to register the VSE with the runtime registry.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Internal method used to register the VSE with the runtime registry.","inlinecomment":" \t &apos; Internal method used to register the VSE with the runtime registry.","parentclassname":"ZipArchive","codesamplehtml":"", "signatureelements":["Function"]},{"label":"ArchivePath","comment":"Path where the archive can be found.","valuetype":"String","filenamebase":"ArchivePath_Method","fqnprefix":"ZipVSE.ZipArchive","qn":"Get.ArchivePath","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ArchivePath As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path where the archive can be found.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path where the archive can be found.","inlinecomment":" \t &apos; Path where the archive can be found.","parentclassname":"ZipArchive","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"ArchiveSize","comment":"Size of the zip archive.","valuetype":"Long-Signed","filenamebase":"ArchiveSize_Method","fqnprefix":"ZipVSE.ZipArchive","qn":"Get.ArchiveSize","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ArchiveSize As Long","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Size of the zip archive.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Size of the zip archive.","inlinecomment":" \t &apos; Size of the zip archive.","parentclassname":"ZipArchive","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"EntryCount","comment":"Number of top-level entries in the zip archive. These could be files or directories.","valuetype":"Long-Signed","filenamebase":"EntryCount_Method","fqnprefix":"ZipVSE.ZipArchive","qn":"Get.EntryCount","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get EntryCount As Long","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Number of top-level entries in the zip archive. These could be files or directories.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Number of top-level entries in the zip archive. These could be files or directories.","inlinecomment":" \t &apos; Number of top-level entries in the zip archive. These could be files or directories.","parentclassname":"ZipArchive","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"GlobalComment","comment":"A comment assigned to the zip archive.","valuetype":"String","filenamebase":"GlobalComment_Method","fqnprefix":"ZipVSE.ZipArchive","qn":"Get.GlobalComment","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get GlobalComment As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;A comment assigned to the zip archive.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"A comment assigned to the zip archive.","inlinecomment":" \t &apos; A comment assigned to the zip archive.","parentclassname":"ZipArchive","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"VSEVersion","comment":"","valuetype":"String","filenamebase":"VSEVersion_Method","fqnprefix":"ZipVSE.ZipArchive","qn":"Get.VSEVersion","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get VSEVersion As String","modifiers":"Get","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"ZipArchive","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"ZipVersion","comment":"The version of the C/C++ zip library in use.","valuetype":"String","filenamebase":"ZipVersion_Method","fqnprefix":"ZipVSE.ZipArchive","qn":"Get.ZipVersion","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ZipVersion As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;The version of the C/C++ zip library in use.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"The version of the C/C++ zip library in use.","inlinecomment":" \t &apos; The version of the C/C++ zip library in use.","parentclassname":"ZipArchive","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"CloseArchive","comment":"Close the handle to the zip archive.","valuetype":"Boolean","filenamebase":"CloseArchive_Method","fqnprefix":"ZipVSE.ZipArchive","qn":"CloseArchive","codesample":"%REM\n    The following code extracts all top-level files from a zip archive\n%END REM\nDim zip as New ZipArchive()\nCall zip.openArchive(CurDir &amp;amp; &amp;quot;/zip1.zip&amp;quot;)\nForAll zipFile in zip\n   If Not zipFile.isDirectory Then zipFile.extractFile(CurDir, False, True)\nEnd ForAll\nCall zip.closeArchive()","signaturecode":32,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Sub CloseArchive() As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Close the handle to the zip archive.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Close the handle to the zip archive.","inlinecomment":" \t &apos; Close the handle to the zip archive.","parentclassname":"ZipArchive","codesamplehtml":"%REM&lt;br /&gt;    The following code extracts all top-level files from a zip archive&lt;br /&gt;%END REM&lt;br /&gt;Dim zip as New ZipArchive()&lt;br /&gt;Call zip.openArchive(CurDir &amp;amp; &amp;quot;/zip1.zip&amp;quot;)&lt;br /&gt;ForAll zipFile in zip&lt;br /&gt;   If Not zipFile.isDirectory Then zipFile.extractFile(CurDir, False, True)&lt;br /&gt;End ForAll&lt;br /&gt;Call zip.closeArchive()", "signatureelements":["Sub"]}]},{"classname":"ZipFile","comment":"A file within a zip archive","valuetype":"","filenamebase":"ZipFile_ObjectClass","fqnprefix":"ZipVSE","qn":"ZipFile","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","classattribnewnotexposed":"UnexposedNew","projectid":"48258A08005C548085258916003F8EF3","version":3,"classid":"48258A08005C548085258916003FA0F2","lsxclassid":3,"signature":"Public Class ZipFile","modifiers":"Public","classname":"ZipFile","parentclassname":"None","constructorsignature":"Function New() As ZipFile","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;A file within a zip archive&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"A file within a zip archive","inlinecomment":" \t &apos; A file within a zip archive","codesamplehtml":"", "methods":[{"label":"ExtractFile","comment":"Extracts the file to a directory, with options to create the directory and overwrite the file.","valuetype":"Boolean","filenamebase":"ExtractFile_Method","fqnprefix":"ZipVSE.ZipFile","qn":"ExtractFile","codesample":"%REM\n    The following code Extracts top-level files only, putting them in the current directory\n%END REM\nDim zip as New ZipArchive()\nCall zip.openArchive(CurDir &amp;amp; &amp;quot;/zip1.zip&amp;quot;)\nForAll zipFile in zip\n   If Not zipFile.isDirectory Then zipFile.extractFile(CurDir, False, True)\nEnd ForAll","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DestinationDirectory As String, CreateDirectory As Boolean, OverwriteFile As Boolean)","signature":"Function ExtractFile(DestinationDirectory As String, CreateDirectory As Boolean, OverwriteFile As Boolean) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Extracts the file to a directory, with options to create the directory and overwrite the file.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Extracts the file to a directory, with options to create the directory and overwrite the file.","inlinecomment":" \t &apos; Extracts the file to a directory, with options to create the directory and overwrite the file.","parentclassname":"ZipFile","codesamplehtml":"%REM&lt;br /&gt;    The following code Extracts top-level files only, putting them in the current directory&lt;br /&gt;%END REM&lt;br /&gt;Dim zip as New ZipArchive()&lt;br /&gt;Call zip.openArchive(CurDir &amp;amp; &amp;quot;/zip1.zip&amp;quot;)&lt;br /&gt;ForAll zipFile in zip&lt;br /&gt;   If Not zipFile.isDirectory Then zipFile.extractFile(CurDir, False, True)&lt;br /&gt;End ForAll", "signatureelements":["Function"], "arguments":[{"label":"DestinationDirectory","comment":"Directory into which to extract the file","valuetype":"String","filenamebase":"DestinationDirectory_ValuedElement","fqnprefix":"ZipVSEZipFileExtractFile","qn":"DestinationDirectory","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Directory into which to extract the file&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Directory into which to extract the file","inlinecomment":" \t &apos; Directory into which to extract the file"},{"label":"CreateDirectory","comment":"Whether to create the destination directory","valuetype":"Boolean","filenamebase":"CreateDirectory_ValuedElement","fqnprefix":"ZipVSEZipFileExtractFile","qn":"CreateDirectory","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether to create the destination directory&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether to create the destination directory","inlinecomment":" \t &apos; Whether to create the destination directory", "attributes":["BY_VAL"]},{"label":"OverwriteFile","comment":"Whether to overwrite if the destination includes a file with the same name. If false, the file will not be extracted.","valuetype":"Boolean","filenamebase":"OverwriteFile_ValuedElement","fqnprefix":"ZipVSEZipFileExtractFile","qn":"OverwriteFile","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether to overwrite if the destination includes a file with the same name. If false, the file will not be extracted.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether to overwrite if the destination includes a file with the same name. If false, the file will not be extracted.","inlinecomment":" \t &apos; Whether to overwrite if the destination includes a file with the same name. If false, the file will not be extracted.", "attributes":["BY_VAL"]}]},{"label":"New","comment":"Constructor, not exposed","valuetype":"ZipFile","filenamebase":"New_Method","fqnprefix":"ZipVSE.ZipFile","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As ZipFile","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor, not exposed&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor, not exposed","inlinecomment":" \t &apos; Constructor, not exposed","parentclassname":"ZipFile","codesamplehtml":"", "signatureelements":["Function"]},{"label":"CompressedSize","comment":"Size of the file within the zip archive when compressed.","valuetype":"Long-Signed","filenamebase":"CompressedSize_Method","fqnprefix":"ZipVSE.ZipFile","qn":"Get.CompressedSize","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get CompressedSize As Long","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Size of the file within the zip archive when compressed.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Size of the file within the zip archive when compressed.","inlinecomment":" \t &apos; Size of the file within the zip archive when compressed.","parentclassname":"ZipFile","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"FileComment","comment":"Comment allocated to the zip file when it was added to the zip archive.","valuetype":"String","filenamebase":"FileComment_Method","fqnprefix":"ZipVSE.ZipFile","qn":"Get.FileComment","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get FileComment As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Comment allocated to the zip file when it was added to the zip archive.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Comment allocated to the zip file when it was added to the zip archive.","inlinecomment":" \t &apos; Comment allocated to the zip file when it was added to the zip archive.","parentclassname":"ZipFile","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"FileName","comment":"Name of the file.","valuetype":"String","filenamebase":"FileName_Method","fqnprefix":"ZipVSE.ZipFile","qn":"Get.FileName","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get FileName As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the file.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the file.","inlinecomment":" \t &apos; Name of the file.","parentclassname":"ZipFile","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"IsDirectory","comment":"Whether this &amp;quot;file&amp;quot; in the zip archive is a directory, which could contain files and / or directories.","valuetype":"Boolean","filenamebase":"IsDirectory_Method","fqnprefix":"ZipVSE.ZipFile","qn":"Get.IsDirectory","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get IsDirectory As Boolean","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether this &amp;quot;file&amp;quot; in the zip archive is a directory, which could contain files and / or directories.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether this &amp;quot;file&amp;quot; in the zip archive is a directory, which could contain files and / or directories.","inlinecomment":" \t &apos; Whether this &amp;quot;file&amp;quot; in the zip archive is a directory, which could contain files and / or directories.","parentclassname":"ZipFile","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"ParentArchive","comment":"The zip archive this file is in.","valuetype":"ZipArchive","filenamebase":"ParentArchive_Method","fqnprefix":"ZipVSE.ZipFile","qn":"Get.ParentArchive","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ParentArchive As ZipArchive","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;The zip archive this file is in.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"The zip archive this file is in.","inlinecomment":" \t &apos; The zip archive this file is in.","parentclassname":"ZipFile","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"UncompressedSize","comment":"Size of the file within the zip archive when uncompressed.","valuetype":"Long-Signed","filenamebase":"UncompressedSize_Method","fqnprefix":"ZipVSE.ZipFile","qn":"Get.UncompressedSize","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get UncompressedSize As Long","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Size of the file within the zip archive when uncompressed.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Size of the file within the zip archive when uncompressed.","inlinecomment":" \t &apos; Size of the file within the zip archive when uncompressed.","parentclassname":"ZipFile","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"FileComment","comment":"Comment allocated to the zip file when it was added to the zip archive.","valuetype":"String","filenamebase":"FileComment_Method","fqnprefix":"ZipVSE.ZipFile","qn":"Set.FileComment","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set FileComment As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Comment allocated to the zip file when it was added to the zip archive.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Comment allocated to the zip file when it was added to the zip archive.","inlinecomment":" \t &apos; Comment allocated to the zip file when it was added to the zip archive.","parentclassname":"ZipFile","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]}]}], "platforms":["LINUX","W64"]}
