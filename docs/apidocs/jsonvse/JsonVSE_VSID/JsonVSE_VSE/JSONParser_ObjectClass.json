{"classname":"JSONParser","comment":"Class for parsing strings and files of JSON.","valuetype":"","filenamebase":"JSONParser_ObjectClass","fqnprefix":"JsonVSE","qn":"JSONParser","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"JSONObject","colindextype":"Integer","projectid":"85258A0800611BA4852587F200501561","version":3,"classid":"85258A0800611BA4852587F3006DF3B9","lsxclassid":3,"signature":"Public Class JSONParser","modifiers":"Public","classname":"JSONParser","parentclassname":"None","constructorsignature":"Function New() As JSONParser","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class for parsing strings and files of JSON.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class for parsing strings and files of JSON.","inlinecomment":" \t &apos; Class for parsing strings and files of JSON.","codesamplehtml":"", "methods":[{"label":"GetRootObject","comment":"Gets the parsed JSON as a JsonObject.","valuetype":"JSONObject","filenamebase":"GetRootObject_Method","fqnprefix":"JsonVSE.JSONParser","qn":"GetRootObject","codesample":"%REM\n    The following example loads a string of JSON and accesses the content as a JsonObject\n%END REM\nDim parser as New JSONParser()\nDim jsonObj as JSONObject\nCall parser.loadFromJson(|{&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}|)\nSet jsonObj = parser.getRootObject()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function GetRootObject() As JSONObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the parsed JSON as a JsonObject.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the parsed JSON as a JsonObject.","inlinecomment":" \t &apos; Gets the parsed JSON as a JsonObject.","parentclassname":"JSONParser","codesamplehtml":"%REM&lt;br /&gt;    The following example loads a string of JSON and accesses the content as a JsonObject&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New JSONParser()&lt;br /&gt;Dim jsonObj as JSONObject&lt;br /&gt;Call parser.loadFromJson(|{&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}|)&lt;br /&gt;Set jsonObj = parser.getRootObject()", "signatureelements":["Function"]},{"label":"IsValidJSON","comment":"Returns True if the input is valid JSON, otherwise returns False","valuetype":"Boolean","filenamebase":"IsValidJSON_Method","fqnprefix":"JsonVSE.JSONParser","qn":"IsValidJSON","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(JSON As String)","signature":"Function IsValidJSON(JSON As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns True if the input is valid JSON, otherwise returns False&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns True if the input is valid JSON, otherwise returns False","inlinecomment":" \t &apos; Returns True if the input is valid JSON, otherwise returns False","parentclassname":"JSONParser","codesamplehtml":"", "signatureelements":["Function"], "arguments":[{"label":"JSON","comment":"String to validate","valuetype":"String","filenamebase":"JSON_ValuedElement","fqnprefix":"JsonVSEJSONParserIsValidJSON","qn":"JSON","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to validate&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to validate","inlinecomment":" \t &apos; String to validate"}]},{"label":"LoadFromFile","comment":"Reads a file and parses it as JSON.","valuetype":"JSONParser","filenamebase":"LoadFromFile_Method","fqnprefix":"JsonVSE.JSONParser","qn":"LoadFromFile","codesample":"%REM\n    The following example loads JSOn from a file and returns it as a JSONObject\n%END REM\nDim parser as New JSONParser()\nDim jsonObj as JSONObject()\nCall parser.loadFromFile(CurDir &amp;amp; &amp;quot;atlas.json&amp;quot;)\nSet jsonObj = parser.getRootObject()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(FilePath As String)","signature":"Function LoadFromFile(FilePath As String) As JSONParser","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Reads a file and parses it as JSON.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Reads a file and parses it as JSON.","inlinecomment":" \t &apos; Reads a file and parses it as JSON.","parentclassname":"JSONParser","codesamplehtml":"%REM&lt;br /&gt;    The following example loads JSOn from a file and returns it as a JSONObject&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New JSONParser()&lt;br /&gt;Dim jsonObj as JSONObject()&lt;br /&gt;Call parser.loadFromFile(CurDir &amp;amp; &amp;quot;atlas.json&amp;quot;)&lt;br /&gt;Set jsonObj = parser.getRootObject()", "signatureelements":["Function"], "arguments":[{"label":"FilePath","comment":"File consisting of JSON.","valuetype":"String","filenamebase":"FilePath_ValuedElement","fqnprefix":"JsonVSEJSONParserLoadFromFile","qn":"FilePath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;File consisting of JSON.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"File consisting of JSON.","inlinecomment":" \t &apos; File consisting of JSON."}]},{"label":"LoadFromJSON","comment":"Parses a string of JSON. If the string passed is not valid JSON, th method throws an error 400, &amp;quot;JSON text is not valid&amp;quot;.","valuetype":"JSONParser","filenamebase":"LoadFromJSON_Method","fqnprefix":"JsonVSE.JSONParser","qn":"LoadFromJSON","codesample":"%REM\n    The following example parses a compact string of JSON and pretty-prints it\n%END REM\nDim parser as New JSONParser()\nCall parser.loadFromJson(|{&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}|)\nPrint parser.toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(JSON As String)","signature":"Function LoadFromJSON(JSON As String) As JSONParser","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Parses a string of JSON. If the string passed is not valid JSON, th method throws an error 400, &amp;quot;JSON text is not valid&amp;quot;.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Parses a string of JSON. If the string passed is not valid JSON, th method throws an error 400, &amp;quot;JSON text is not valid&amp;quot;.","inlinecomment":" \t &apos; Parses a string of JSON. If the string passed is not valid JSON, th method throws an error 400, &amp;quot;JSON text is not valid&amp;quot;.","parentclassname":"JSONParser","codesamplehtml":"%REM&lt;br /&gt;    The following example parses a compact string of JSON and pretty-prints it&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New JSONParser()&lt;br /&gt;Call parser.loadFromJson(|{&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}|)&lt;br /&gt;Print parser.toString(True)", "signatureelements":["Function"], "arguments":[{"label":"JSON","comment":"String of JSON to parse","valuetype":"String","filenamebase":"JSON_ValuedElement","fqnprefix":"JsonVSEJSONParserLoadFromJSON","qn":"JSON","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String of JSON to parse&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String of JSON to parse","inlinecomment":" \t &apos; String of JSON to parse"}]},{"label":"LoadFromObject","comment":"Parses a JSON object from a passed JsonObject.","valuetype":"JSONParser","filenamebase":"LoadFromObject_Method","fqnprefix":"JsonVSE.JSONParser","qn":"LoadFromObject","codesample":"%REM\n    The following code loads a specific JsonObject and passes it to another JsonObject.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as New JsonObject\nCall childObj.insertValue(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;)\nCall parser.loadfromObject(childObj)\nSet jsonObj = parser.getrootobject\nPrint jsonObj.toString(false)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Object As JSONObject)","signature":"Function LoadFromObject(Object As JSONObject) As JSONParser","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Parses a JSON object from a passed JsonObject.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Parses a JSON object from a passed JsonObject.","inlinecomment":" \t &apos; Parses a JSON object from a passed JsonObject.","parentclassname":"JSONParser","codesamplehtml":"%REM&lt;br /&gt;    The following code loads a specific JsonObject and passes it to another JsonObject.&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New JsonParser()&lt;br /&gt;Dim jsonObj as JsonObject&lt;br /&gt;Dim childObj as New JsonObject&lt;br /&gt;Call childObj.insertValue(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;)&lt;br /&gt;Call parser.loadfromObject(childObj)&lt;br /&gt;Set jsonObj = parser.getrootobject&lt;br /&gt;Print jsonObj.toString(false)", "signatureelements":["Function"], "arguments":[{"label":"Object","comment":"JsonObject to pass through the parser","valuetype":"JSONObject","filenamebase":"Object_ValuedElement","fqnprefix":"JsonVSEJSONParserLoadFromObject","qn":"Object","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JsonObject to pass through the parser&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JsonObject to pass through the parser","inlinecomment":" \t &apos; JsonObject to pass through the parser"}]},{"label":"New","comment":"Constructor","valuetype":"JSONParser","filenamebase":"New_Method","fqnprefix":"JsonVSE.JSONParser","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As JSONParser","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor","inlinecomment":" \t &apos; Constructor","parentclassname":"JSONParser","codesamplehtml":"", "signatureelements":["Function"]},{"label":"ToString","comment":"Outputs the root object of a JsonParser as a string, pretty-printed or compact.","valuetype":"String","filenamebase":"ToString_Method","fqnprefix":"JsonVSE.JSONParser","qn":"ToString","codesample":"%REM\n   The following example loads a compact string of JSON and pretty-prints it.\n%END REM\nDim parser as New JsonParser()\nCall parser.loadFromJson(|{&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}|)\nPrint parser.toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(PrettyPrint As Boolean)","signature":"Function ToString(PrettyPrint As Boolean) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Outputs the root object of a JsonParser as a string, pretty-printed or compact.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Outputs the root object of a JsonParser as a string, pretty-printed or compact.","inlinecomment":" \t &apos; Outputs the root object of a JsonParser as a string, pretty-printed or compact.","parentclassname":"JSONParser","codesamplehtml":"%REM&lt;br /&gt;   The following example loads a compact string of JSON and pretty-prints it.&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New JsonParser()&lt;br /&gt;Call parser.loadFromJson(|{&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}|)&lt;br /&gt;Print parser.toString(True)", "signatureelements":["Function"], "arguments":[{"label":"PrettyPrint","comment":"Whether or not to pretty-print the JSON","valuetype":"Boolean","filenamebase":"PrettyPrint_ValuedElement","fqnprefix":"JsonVSEJSONParserToString","qn":"PrettyPrint","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether or not to pretty-print the JSON&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether or not to pretty-print the JSON","inlinecomment":" \t &apos; Whether or not to pretty-print the JSON", "attributes":["BY_VAL"]}]},{"label":"VSEVersion","comment":"","valuetype":"String","filenamebase":"VSEVersion_Method","fqnprefix":"JsonVSE.JSONParser","qn":"Get.VSEVersion","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get VSEVersion As String","modifiers":"Get","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"JSONParser","codesamplehtml":"", "attributes":["READ_ONLY","GET_CONST","SET_CONST"], "signatureelements":["Property","Get"]}]}
