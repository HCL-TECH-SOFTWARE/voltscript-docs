{"classname":"WebRequest","comment":"Class for making a web request.","valuetype":"","filenamebase":"WebRequest_ObjectClass","fqnprefix":"WebVSE","qn":"WebRequest","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","classattribnewnotexposed":"UnexposedNew","projectid":"85258A080053C19485258833005FD0D9","version":3,"classid":"85258A080053C19485258833005FF240","lsxclassid":5,"signature":"Public Class WebRequest","modifiers":"Public","classname":"WebRequest","parentclassname":"None","constructorsignature":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class for making a web request.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class for making a web request.","inlinecomment":" \t &apos; Class for making a web request.","codesamplehtml":"", "methods":[{"label":"Warning","comment":"","valuetype":"","filenamebase":"Warning_Method","fqnprefix":"WebVSE.WebRequest","qn":"Warning","codesample":"","signaturecode":128,"instancecode":128,"f_returnsobject":"","argumentsuffix":"(Msg As String)","signature":"Event Warning(Msg As String)","modifiers":"","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"WebRequest","codesamplehtml":"", "signatureelements":["Event"], "arguments":[{"label":"Msg","comment":"","valuetype":"String","filenamebase":"Msg_ValuedElement","fqnprefix":"WebVSEWebRequestWarning","qn":"Msg","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"AddCookie","comment":"Adds a cookie to the WebRequest.","valuetype":"WebRequest","filenamebase":"AddCookie_Method","fqnprefix":"WebVSE.WebRequest","qn":"AddCookie","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String, Value As String)","signature":"Function AddCookie(Name As String, Value As String) As WebRequest","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds a cookie to the WebRequest.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds a cookie to the WebRequest.","inlinecomment":" \t &apos; Adds a cookie to the WebRequest.","parentclassname":"WebRequest","codesamplehtml":"", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"Cookie name","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"WebVSEWebRequestAddCookie","qn":"Name","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Cookie name&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Cookie name","inlinecomment":" \t &apos; Cookie name"},{"label":"Value","comment":"Cookie value","valuetype":"String","filenamebase":"Value_ValuedElement","fqnprefix":"WebVSEWebRequestAddCookie","qn":"Value","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Cookie value&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Cookie value","inlinecomment":" \t &apos; Cookie value"}]},{"label":"AddHeader","comment":"Adds an HTTP header for the WebRequest. Properties are available for easily setting the Authorization, Accept and Content-Type headers.","valuetype":"WebRequest","filenamebase":"AddHeader_Method","fqnprefix":"WebVSE.WebRequest","qn":"AddHeader","codesample":"%REM\n    The following code creates a WebServer and WebRequest, adds HTTP headers and sends the request.\n%END REM\nDim server as New WebServer()\nDim request as WebRequest\nserver.protocol = &amp;quot;HTTPS&amp;quot;\nserver.hostURL = &amp;quot;httpstat.us&amp;quot;\nSet request = server.createRequest()\nrequest.verb = &amp;quot;PUT&amp;quot;\nrequest.ContentType = &amp;quot;application/json&amp;quot;\nrequest.AcceptHeader = &amp;quot;application/json&amp;quot;\nCall request.addHeader(&amp;quot;X-HttpStatus-Response-Foo&amp;quot;, &amp;quot;Bar&amp;quot;)\nrequest.target = 418\nrequest.timeoutSeconds = 5\nrequest.requestBody = |{&amp;quot;Hello&amp;quot;:&amp;quot;World&amp;quot;}|\nReturn request.send()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String, Value As String)","signature":"Function AddHeader(Name As String, Value As String) As WebRequest","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds an HTTP header for the WebRequest. Properties are available for easily setting the Authorization, Accept and Content-Type headers.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds an HTTP header for the WebRequest. Properties are available for easily setting the Authorization, Accept and Content-Type headers.","inlinecomment":" \t &apos; Adds an HTTP header for the WebRequest. Properties are available for easily setting the Authorization, Accept and Content-Type headers.","parentclassname":"WebRequest","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a WebServer and WebRequest, adds HTTP headers and sends the request.&lt;br /&gt;%END REM&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;server.protocol = &amp;quot;HTTPS&amp;quot;&lt;br /&gt;server.hostURL = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;Set request = server.createRequest()&lt;br /&gt;request.verb = &amp;quot;PUT&amp;quot;&lt;br /&gt;request.ContentType = &amp;quot;application/json&amp;quot;&lt;br /&gt;request.AcceptHeader = &amp;quot;application/json&amp;quot;&lt;br /&gt;Call request.addHeader(&amp;quot;X-HttpStatus-Response-Foo&amp;quot;, &amp;quot;Bar&amp;quot;)&lt;br /&gt;request.target = 418&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;request.requestBody = |{&amp;quot;Hello&amp;quot;:&amp;quot;World&amp;quot;}|&lt;br /&gt;Return request.send()", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"HTTP Header name","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"WebVSEWebRequestAddHeader","qn":"Name","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;HTTP Header name&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"HTTP Header name","inlinecomment":" \t &apos; HTTP Header name"},{"label":"Value","comment":"Value for the HTTP header","valuetype":"String","filenamebase":"Value_ValuedElement","fqnprefix":"WebVSEWebRequestAddHeader","qn":"Value","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value for the HTTP header&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value for the HTTP header","inlinecomment":" \t &apos; Value for the HTTP header"}]},{"label":"Base64Encode","comment":"Base64 encodes a string, useful for manipulating body content.","valuetype":"String","filenamebase":"Base64Encode_Method","fqnprefix":"WebVSE.WebRequest","qn":"Base64Encode","codesample":"%REM\n    The following code creates a WebServer and WebRequest, base64-encoding the body.\n%END REM\nDim server as New WebServer()\nDim request as WebRequest\nserver.protocol = &amp;quot;HTTPS&amp;quot;\nserver.hostURL = &amp;quot;httpstat.us&amp;quot;\nSet request = server.createRequest()\nrequest.verb = &amp;quot;PUT&amp;quot;\nrequest.ContentType = &amp;quot;application/json&amp;quot;\nrequest.AcceptHeader = &amp;quot;application/json&amp;quot;\nCall request.addHeader(&amp;quot;X-HttpStatus-Response-Foo&amp;quot;, &amp;quot;Bar&amp;quot;)\nrequest.target = 418\nrequest.timeoutSeconds = 5\nrequest.requestBody = request.base64Encode(|{&amp;quot;Hello&amp;quot;:&amp;quot;World&amp;quot;}|)\nReturn request.send()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function Base64Encode(Input As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base64 encodes a string, useful for manipulating body content.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base64 encodes a string, useful for manipulating body content.","inlinecomment":" \t &apos; Base64 encodes a string, useful for manipulating body content.","parentclassname":"WebRequest","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a WebServer and WebRequest, base64-encoding the body.&lt;br /&gt;%END REM&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;server.protocol = &amp;quot;HTTPS&amp;quot;&lt;br /&gt;server.hostURL = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;Set request = server.createRequest()&lt;br /&gt;request.verb = &amp;quot;PUT&amp;quot;&lt;br /&gt;request.ContentType = &amp;quot;application/json&amp;quot;&lt;br /&gt;request.AcceptHeader = &amp;quot;application/json&amp;quot;&lt;br /&gt;Call request.addHeader(&amp;quot;X-HttpStatus-Response-Foo&amp;quot;, &amp;quot;Bar&amp;quot;)&lt;br /&gt;request.target = 418&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;request.requestBody = request.base64Encode(|{&amp;quot;Hello&amp;quot;:&amp;quot;World&amp;quot;}|)&lt;br /&gt;Return request.send()", "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"Content to base64 encode.","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"WebVSEWebRequestBase64Encode","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Content to base64 encode.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Content to base64 encode.","inlinecomment":" \t &apos; Content to base64 encode."}]},{"label":"FileDownload","comment":"Performs a synchronous download a file to a given path. If the request does not return HTTP status 200, the file will contain the body of the response.","valuetype":"WebResponse","filenamebase":"FileDownload_Method","fqnprefix":"WebVSE.WebRequest","qn":"FileDownload","codesample":"%REM\n    The following code downloads a viewicon from a locally installed Domino server\n%END REM\nDim dominoServer as New WebServer()\nDim request as WebRequest\nDim response as WebResponse\nDim path as String\ndominoServer.hostUrl = &amp;quot;localhost&amp;quot;\nSet request = dominoServer.createRequest()\nrequest.target = &amp;quot;icons/vwicn001.gif&amp;quot;\nrequest.timeoutSeconds = 5\npath = CurDir &amp;amp; &amp;quot;vwicon1.gif&amp;quot;\nSet response = request.fileDownload(path)\nIf response.responseCode = 200 Then Print &amp;quot;Successful download&amp;quot;","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DestinationPath As String, Overwrite As Boolean)","signature":"Function FileDownload(DestinationPath As String, Overwrite As Boolean) As WebResponse","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Performs a synchronous download a file to a given path. If the request does not return HTTP status 200, the file will contain the body of the response.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Performs a synchronous download a file to a given path. If the request does not return HTTP status 200, the file will contain the body of the response.","inlinecomment":" \t &apos; Performs a synchronous download a file to a given path. If the request does not return HTTP status 200, the file will contain the body of the response.","parentclassname":"WebRequest","codesamplehtml":"%REM&lt;br /&gt;    The following code downloads a viewicon from a locally installed Domino server&lt;br /&gt;%END REM&lt;br /&gt;Dim dominoServer as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;Dim path as String&lt;br /&gt;dominoServer.hostUrl = &amp;quot;localhost&amp;quot;&lt;br /&gt;Set request = dominoServer.createRequest()&lt;br /&gt;request.target = &amp;quot;icons/vwicn001.gif&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;path = CurDir &amp;amp; &amp;quot;vwicon1.gif&amp;quot;&lt;br /&gt;Set response = request.fileDownload(path)&lt;br /&gt;If response.responseCode = 200 Then Print &amp;quot;Successful download&amp;quot;", "signatureelements":["Function"], "arguments":[{"label":"DestinationPath","comment":"Path to download to","valuetype":"String","filenamebase":"DestinationPath_ValuedElement","fqnprefix":"WebVSEWebRequestFileDownload","qn":"DestinationPath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to download to&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to download to","inlinecomment":" \t &apos; Path to download to"},{"label":"Overwrite","comment":"","valuetype":"Boolean","filenamebase":"Overwrite_ValuedElement","fqnprefix":"WebVSEWebRequestFileDownload","qn":"Overwrite","argumentindex":2,"optionalvalue":"LSXFalse","commentblock":"","commenthtml":"","inlinecomment":"", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"FileDownloadNoWait","comment":"Performs an async download of a file. If the request does not return HTTP status 200, the file will contain the body of the response.","valuetype":"Completion","filenamebase":"FileDownloadNoWait_Method","fqnprefix":"WebVSE.WebRequest","qn":"FileDownloadNoWait","codesample":"%REM\n    The following code downloads two icons from a locally Domino server at the same time, waiting for them to complete and printing whether they were successful\n%END REM\nDim dominoServer as New WebServer()\nDim request as WebRequest\nDim arr(1) as Completion\nDim response as WebResponse\nDim i as Integer\nDim path as String\ndominoServer.hostUrl = &amp;quot;localhost&amp;quot;\nSet request = dominoServer.createRequest()\nrequest.target = &amp;quot;icons/vwicn001.gif&amp;quot;\nrequest.timeoutSeconds = 5\npath = CurDir &amp;amp; &amp;quot;vwicon1.gif&amp;quot;\nSet arr(0) = request.fileDownloadNoWait(path)\nSet request = dominoServer.createRequest()\nrequest.target = &amp;quot;icons/vwicn002.gif&amp;quot;\nrequest.timeoutSeconds = 5\npath = CurDir &amp;amp; &amp;quot;vwicon2.gif&amp;quot;\nSet arr(1) = request.fileDownloadNoWait(path)\nCall arr(0).wait()\nCall arr(1).wait()\nFor i = 0 to 1\n   Set response = arr(i).response\n   If response.responseCode = 200 Then Print &amp;quot;Successful download&amp;quot;\nNext","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DestinationPath As String, Overwrite As Boolean)","signature":"Function FileDownloadNoWait(DestinationPath As String, Overwrite As Boolean) As Completion","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Performs an async download of a file. If the request does not return HTTP status 200, the file will contain the body of the response.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Performs an async download of a file. If the request does not return HTTP status 200, the file will contain the body of the response.","inlinecomment":" \t &apos; Performs an async download of a file. If the request does not return HTTP status 200, the file will contain the body of the response.","parentclassname":"WebRequest","codesamplehtml":"%REM&lt;br /&gt;    The following code downloads two icons from a locally Domino server at the same time, waiting for them to complete and printing whether they were successful&lt;br /&gt;%END REM&lt;br /&gt;Dim dominoServer as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim arr(1) as Completion&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;Dim i as Integer&lt;br /&gt;Dim path as String&lt;br /&gt;dominoServer.hostUrl = &amp;quot;localhost&amp;quot;&lt;br /&gt;Set request = dominoServer.createRequest()&lt;br /&gt;request.target = &amp;quot;icons/vwicn001.gif&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;path = CurDir &amp;amp; &amp;quot;vwicon1.gif&amp;quot;&lt;br /&gt;Set arr(0) = request.fileDownloadNoWait(path)&lt;br /&gt;Set request = dominoServer.createRequest()&lt;br /&gt;request.target = &amp;quot;icons/vwicn002.gif&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;path = CurDir &amp;amp; &amp;quot;vwicon2.gif&amp;quot;&lt;br /&gt;Set arr(1) = request.fileDownloadNoWait(path)&lt;br /&gt;Call arr(0).wait()&lt;br /&gt;Call arr(1).wait()&lt;br /&gt;For i = 0 to 1&lt;br /&gt;   Set response = arr(i).response&lt;br /&gt;   If response.responseCode = 200 Then Print &amp;quot;Successful download&amp;quot;&lt;br /&gt;Next", "signatureelements":["Function"], "arguments":[{"label":"DestinationPath","comment":"Path in which to put the downloaded file","valuetype":"String","filenamebase":"DestinationPath_ValuedElement","fqnprefix":"WebVSEWebRequestFileDownloadNoWait","qn":"DestinationPath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path in which to put the downloaded file&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path in which to put the downloaded file","inlinecomment":" \t &apos; Path in which to put the downloaded file"},{"label":"Overwrite","comment":"","valuetype":"Boolean","filenamebase":"Overwrite_ValuedElement","fqnprefix":"WebVSEWebRequestFileDownloadNoWait","qn":"Overwrite","argumentindex":2,"optionalvalue":"LSXFalse","commentblock":"","commenthtml":"","inlinecomment":"", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"FileUpload","comment":"Performs a synchronous upload of a file at a given path.","valuetype":"WebResponse","filenamebase":"FileUpload_Method","fqnprefix":"WebVSE.WebRequest","qn":"FileUpload","codesample":"%REM\n    The following code uploads a file to a server. It assumes a server that can receive file uploads at an &amp;quot;upload&amp;quot; endpoint.\n%END REM\nFunction uploadFile(server as WebServer, filePath as String)\n    Dim request as WebRequest\n    Dim response as WebResponse\n    Set request = server.createRequest()\n    request.target = &amp;quot;upload&amp;quot;\n    Set response = request.FileUpload(filePath)\n    Print response.responseCode\nEnd Function","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(FilePath As String)","signature":"Function FileUpload(FilePath As String) As WebResponse","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Performs a synchronous upload of a file at a given path.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Performs a synchronous upload of a file at a given path.","inlinecomment":" \t &apos; Performs a synchronous upload of a file at a given path.","parentclassname":"WebRequest","codesamplehtml":"%REM&lt;br /&gt;    The following code uploads a file to a server. It assumes a server that can receive file uploads at an &amp;quot;upload&amp;quot; endpoint.&lt;br /&gt;%END REM&lt;br /&gt;Function uploadFile(server as WebServer, filePath as String)&lt;br /&gt;    Dim request as WebRequest&lt;br /&gt;    Dim response as WebResponse&lt;br /&gt;    Set request = server.createRequest()&lt;br /&gt;    request.target = &amp;quot;upload&amp;quot;&lt;br /&gt;    Set response = request.FileUpload(filePath)&lt;br /&gt;    Print response.responseCode&lt;br /&gt;End Function", "signatureelements":["Function"], "arguments":[{"label":"FilePath","comment":"Path to file to upload","valuetype":"String","filenamebase":"FilePath_ValuedElement","fqnprefix":"WebVSEWebRequestFileUpload","qn":"FilePath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to file to upload&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to file to upload","inlinecomment":" \t &apos; Path to file to upload"}]},{"label":"FileUploadNoWait","comment":"Performs an asynchronous file upload of a file at a given path.","valuetype":"Completion","filenamebase":"FileUploadNoWait_Method","fqnprefix":"WebVSE.WebRequest","qn":"FileUploadNoWait","codesample":"%REM\n    The following code uploads a file to a server. It assumes a server that can receive file uploads at an &amp;quot;upload&amp;quot; endpoint.\n%END REM\nFunction uploadFiles(server as WebServer, filePaths() as String)\n    Dim request as WebRequest\n    Dim arr() as Completion\n    Dim i as Integer\n    Redim arr(UBound(filePaths)\n    ForAll paths in FilePaths\n        Set request = server.createRequest()\n        request.target = &amp;quot;upload&amp;quot;\n        arr(i) = request.FileUploadNoWait(filePath)\n        arr(i++).wait\n    End ForAll\n    ForAll comp in arr\n        Print comp.completionCode\n    End ForAll\nEnd Function","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(FilePath As String)","signature":"Function FileUploadNoWait(FilePath As String) As Completion","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Performs an asynchronous file upload of a file at a given path.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Performs an asynchronous file upload of a file at a given path.","inlinecomment":" \t &apos; Performs an asynchronous file upload of a file at a given path.","parentclassname":"WebRequest","codesamplehtml":"%REM&lt;br /&gt;    The following code uploads a file to a server. It assumes a server that can receive file uploads at an &amp;quot;upload&amp;quot; endpoint.&lt;br /&gt;%END REM&lt;br /&gt;Function uploadFiles(server as WebServer, filePaths() as String)&lt;br /&gt;    Dim request as WebRequest&lt;br /&gt;    Dim arr() as Completion&lt;br /&gt;    Dim i as Integer&lt;br /&gt;    Redim arr(UBound(filePaths)&lt;br /&gt;    ForAll paths in FilePaths&lt;br /&gt;        Set request = server.createRequest()&lt;br /&gt;        request.target = &amp;quot;upload&amp;quot;&lt;br /&gt;        arr(i) = request.FileUploadNoWait(filePath)&lt;br /&gt;        arr(i++).wait&lt;br /&gt;    End ForAll&lt;br /&gt;    ForAll comp in arr&lt;br /&gt;        Print comp.completionCode&lt;br /&gt;    End ForAll&lt;br /&gt;End Function", "signatureelements":["Function"], "arguments":[{"label":"FilePath","comment":"Path to file to upload","valuetype":"String","filenamebase":"FilePath_ValuedElement","fqnprefix":"WebVSEWebRequestFileUploadNoWait","qn":"FilePath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to file to upload&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to file to upload","inlinecomment":" \t &apos; Path to file to upload"}]},{"label":"Send","comment":"Submits the WebRequest, performing the curl request.","valuetype":"WebResponse","filenamebase":"Send_Method","fqnprefix":"WebVSE.WebRequest","qn":"Send","codesample":"%REM\n    The following code creates a WebServer and WebRequest and sends the request.\n%END REM\nDim server as New WebServer()\nDim request as WebRequest\nserver.protocol = &amp;quot;HTTPS&amp;quot;\nserver.HostURL = &amp;quot;httpstat.us&amp;quot;\nSet request = server.createRequest()\nrequest.target = &amp;quot;200&amp;quot;\nrequest.timeoutSeconds = 5\nReturn request.send()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function Send() As WebResponse","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Submits the WebRequest, performing the curl request.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Submits the WebRequest, performing the curl request.","inlinecomment":" \t &apos; Submits the WebRequest, performing the curl request.","parentclassname":"WebRequest","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a WebServer and WebRequest and sends the request.&lt;br /&gt;%END REM&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;server.protocol = &amp;quot;HTTPS&amp;quot;&lt;br /&gt;server.HostURL = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;Set request = server.createRequest()&lt;br /&gt;request.target = &amp;quot;200&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;Return request.send()", "signatureelements":["Function"]},{"label":"SendAsync","comment":"Submits the WebRequest asynchronously, performing the curl request on another thread. This function returns immediately. Use the Completion object to determine if the request has completed, then inspect the response.","valuetype":"Completion","filenamebase":"SendAsync_Method","fqnprefix":"WebVSE.WebRequest","qn":"SendAsync","codesample":"%REM\n    The following code downloads two icons from a locally Domino server at the same time, waiting for them to complete and printing whether they were successful\n%END REM\nDim dominoServer as New WebServer()\nDim request as WebRequest\nDim arr(1) as Completion\nDim response as WebResponse\nDim i as Integer\nDim path as String\ndominoServer.hostUrl = &amp;quot;localhost&amp;quot;\nSet request = dominoServer.createRequest()\nrequest.target = &amp;quot;icons/vwicn001.gif&amp;quot;\nrequest.timeoutSeconds = 5\npath = CurDir &amp;amp; &amp;quot;vwicon1.gif&amp;quot;\nSet arr(0) = request.fileDownloadNoWait(path)\nSet request = dominoServer.createRequest()\nrequest.target = &amp;quot;icons/vwicn002.gif&amp;quot;\nrequest.timeoutSeconds = 5\npath = CurDir &amp;amp; &amp;quot;vwicon2.gif&amp;quot;\nSet arr(1) = request.fileDownloadNoWait(path)\nCall arr(0).wait()\nCall arr(1).wait()\nFor i = 0 to 1\n   Set response = arr(i).response\n   If response.responseCode = 200 Then Print &amp;quot;Successful download&amp;quot;\nNext","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function SendAsync() As Completion","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Submits the WebRequest asynchronously, performing the curl request on another thread. This function returns immediately. Use the Completion object to determine if the request has completed, then inspect the response.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Submits the WebRequest asynchronously, performing the curl request on another thread. This function returns immediately. Use the Completion object to determine if the request has completed, then inspect the response.","inlinecomment":" \t &apos; Submits the WebRequest asynchronously, performing the curl request on another thread. This function returns immediately. Use the Completion object to determine if the request has completed, then inspect the response.","parentclassname":"WebRequest","codesamplehtml":"%REM&lt;br /&gt;    The following code downloads two icons from a locally Domino server at the same time, waiting for them to complete and printing whether they were successful&lt;br /&gt;%END REM&lt;br /&gt;Dim dominoServer as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim arr(1) as Completion&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;Dim i as Integer&lt;br /&gt;Dim path as String&lt;br /&gt;dominoServer.hostUrl = &amp;quot;localhost&amp;quot;&lt;br /&gt;Set request = dominoServer.createRequest()&lt;br /&gt;request.target = &amp;quot;icons/vwicn001.gif&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;path = CurDir &amp;amp; &amp;quot;vwicon1.gif&amp;quot;&lt;br /&gt;Set arr(0) = request.fileDownloadNoWait(path)&lt;br /&gt;Set request = dominoServer.createRequest()&lt;br /&gt;request.target = &amp;quot;icons/vwicn002.gif&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;path = CurDir &amp;amp; &amp;quot;vwicon2.gif&amp;quot;&lt;br /&gt;Set arr(1) = request.fileDownloadNoWait(path)&lt;br /&gt;Call arr(0).wait()&lt;br /&gt;Call arr(1).wait()&lt;br /&gt;For i = 0 to 1&lt;br /&gt;   Set response = arr(i).response&lt;br /&gt;   If response.responseCode = 200 Then Print &amp;quot;Successful download&amp;quot;&lt;br /&gt;Next", "signatureelements":["Function"]},{"label":"AcceptHeader","comment":"Sets &amp;quot;Accept&amp;quot; HTTP header with relevant value, .g. &amp;quot;application/json&amp;quot;. Default value is &amp;quot;*/&amp;quot;.","valuetype":"String","filenamebase":"AcceptHeader_Method","fqnprefix":"WebVSE.WebRequest","qn":"Get.AcceptHeader","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get AcceptHeader As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets &amp;quot;Accept&amp;quot; HTTP header with relevant value, .g. &amp;quot;application/json&amp;quot;. Default value is &amp;quot;*/&amp;quot;.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets &amp;quot;Accept&amp;quot; HTTP header with relevant value, .g. &amp;quot;application/json&amp;quot;. Default value is &amp;quot;*/&amp;quot;.","inlinecomment":" \t &apos; Sets &amp;quot;Accept&amp;quot; HTTP header with relevant value, .g. &amp;quot;application/json&amp;quot;. Default value is &amp;quot;*/&amp;quot;.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"AuthorizationHeader","comment":"Sets the &amp;quot;Authorization&amp;quot; HTTP header.","valuetype":"String","filenamebase":"AuthorizationHeader_Method","fqnprefix":"WebVSE.WebRequest","qn":"Get.AuthorizationHeader","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get AuthorizationHeader As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the &amp;quot;Authorization&amp;quot; HTTP header.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the &amp;quot;Authorization&amp;quot; HTTP header.","inlinecomment":" \t &apos; Sets the &amp;quot;Authorization&amp;quot; HTTP header.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"ContentType","comment":"Sets the &amp;quot;Content-Type&amp;quot; HTTP header, for the content type being sent in the request, e.g. &amp;quot;application/json&amp;quot;.","valuetype":"String","filenamebase":"ContentType_Method","fqnprefix":"WebVSE.WebRequest","qn":"Get.ContentType","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ContentType As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the &amp;quot;Content-Type&amp;quot; HTTP header, for the content type being sent in the request, e.g. &amp;quot;application/json&amp;quot;.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the &amp;quot;Content-Type&amp;quot; HTTP header, for the content type being sent in the request, e.g. &amp;quot;application/json&amp;quot;.","inlinecomment":" \t &apos; Sets the &amp;quot;Content-Type&amp;quot; HTTP header, for the content type being sent in the request, e.g. &amp;quot;application/json&amp;quot;.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"RequestBody","comment":"Sets the body content for a POST / PUT / PATCH WebRequest.","valuetype":"String","filenamebase":"RequestBody_Method","fqnprefix":"WebVSE.WebRequest","qn":"Get.RequestBody","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get RequestBody As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the body content for a POST / PUT / PATCH WebRequest.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the body content for a POST / PUT / PATCH WebRequest.","inlinecomment":" \t &apos; Sets the body content for a POST / PUT / PATCH WebRequest.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Target","comment":"Sets the target URL to append to the HostURL of the WebServer. This allows multiple requests for the same base URL of the WebServer.","valuetype":"String","filenamebase":"Target_Method","fqnprefix":"WebVSE.WebRequest","qn":"Get.Target","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Target As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the target URL to append to the HostURL of the WebServer. This allows multiple requests for the same base URL of the WebServer.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the target URL to append to the HostURL of the WebServer. This allows multiple requests for the same base URL of the WebServer.","inlinecomment":" \t &apos; Sets the target URL to append to the HostURL of the WebServer. This allows multiple requests for the same base URL of the WebServer.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"TimeoutSeconds","comment":"Sets the numb of seconds after which to time out the WebRequest. Default is 0, for no timeout.","valuetype":"Long-Signed","filenamebase":"TimeoutSeconds_Method","fqnprefix":"WebVSE.WebRequest","qn":"Get.TimeoutSeconds","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get TimeoutSeconds As Long","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the numb of seconds after which to time out the WebRequest. Default is 0, for no timeout.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the numb of seconds after which to time out the WebRequest. Default is 0, for no timeout.","inlinecomment":" \t &apos; Sets the numb of seconds after which to time out the WebRequest. Default is 0, for no timeout.","parentclassname":"WebRequest","codesamplehtml":"", "signatureelements":["Property","Get"]},{"label":"Verb","comment":"Sets the HTTP verb for the request, defaulting to &amp;quot;GET&amp;quot;.","valuetype":"String","filenamebase":"Verb_Method","fqnprefix":"WebVSE.WebRequest","qn":"Get.Verb","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Verb As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the HTTP verb for the request, defaulting to &amp;quot;GET&amp;quot;.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the HTTP verb for the request, defaulting to &amp;quot;GET&amp;quot;.","inlinecomment":" \t &apos; Sets the HTTP verb for the request, defaulting to &amp;quot;GET&amp;quot;.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"VerboseLogging","comment":"Whether this Request should create a .log file with verbose logging output from libcurl. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","valuetype":"Boolean","filenamebase":"VerboseLogging_Method","fqnprefix":"WebVSE.WebRequest","qn":"Get.VerboseLogging","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get VerboseLogging As Boolean","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether this Request should create a .log file with verbose logging output from libcurl. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether this Request should create a .log file with verbose logging output from libcurl. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","inlinecomment":" \t &apos; Whether this Request should create a .log file with verbose logging output from libcurl. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"AcceptHeader","comment":"Sets &amp;quot;Accept&amp;quot; HTTP header with relevant value, .g. &amp;quot;application/json&amp;quot;. Default value is &amp;quot;*/&amp;quot;.","valuetype":"String","filenamebase":"AcceptHeader_Method","fqnprefix":"WebVSE.WebRequest","qn":"Set.AcceptHeader","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set AcceptHeader As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets &amp;quot;Accept&amp;quot; HTTP header with relevant value, .g. &amp;quot;application/json&amp;quot;. Default value is &amp;quot;*/&amp;quot;.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets &amp;quot;Accept&amp;quot; HTTP header with relevant value, .g. &amp;quot;application/json&amp;quot;. Default value is &amp;quot;*/&amp;quot;.","inlinecomment":" \t &apos; Sets &amp;quot;Accept&amp;quot; HTTP header with relevant value, .g. &amp;quot;application/json&amp;quot;. Default value is &amp;quot;*/&amp;quot;.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"AuthorizationHeader","comment":"Sets the &amp;quot;Authorization&amp;quot; HTTP header.","valuetype":"String","filenamebase":"AuthorizationHeader_Method","fqnprefix":"WebVSE.WebRequest","qn":"Set.AuthorizationHeader","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set AuthorizationHeader As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the &amp;quot;Authorization&amp;quot; HTTP header.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the &amp;quot;Authorization&amp;quot; HTTP header.","inlinecomment":" \t &apos; Sets the &amp;quot;Authorization&amp;quot; HTTP header.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"ContentType","comment":"Sets the &amp;quot;Content-Type&amp;quot; HTTP header, for the content type being sent in the request, e.g. &amp;quot;application/json&amp;quot;.","valuetype":"String","filenamebase":"ContentType_Method","fqnprefix":"WebVSE.WebRequest","qn":"Set.ContentType","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set ContentType As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the &amp;quot;Content-Type&amp;quot; HTTP header, for the content type being sent in the request, e.g. &amp;quot;application/json&amp;quot;.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the &amp;quot;Content-Type&amp;quot; HTTP header, for the content type being sent in the request, e.g. &amp;quot;application/json&amp;quot;.","inlinecomment":" \t &apos; Sets the &amp;quot;Content-Type&amp;quot; HTTP header, for the content type being sent in the request, e.g. &amp;quot;application/json&amp;quot;.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"RequestBody","comment":"Sets the body content for a POST / PUT / PATCH WebRequest.","valuetype":"String","filenamebase":"RequestBody_Method","fqnprefix":"WebVSE.WebRequest","qn":"Set.RequestBody","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set RequestBody As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the body content for a POST / PUT / PATCH WebRequest.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the body content for a POST / PUT / PATCH WebRequest.","inlinecomment":" \t &apos; Sets the body content for a POST / PUT / PATCH WebRequest.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"Target","comment":"Sets the target URL to append to the HostURL of the WebServer. This allows multiple requests for the same base URL of the WebServer.","valuetype":"String","filenamebase":"Target_Method","fqnprefix":"WebVSE.WebRequest","qn":"Set.Target","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set Target As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the target URL to append to the HostURL of the WebServer. This allows multiple requests for the same base URL of the WebServer.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the target URL to append to the HostURL of the WebServer. This allows multiple requests for the same base URL of the WebServer.","inlinecomment":" \t &apos; Sets the target URL to append to the HostURL of the WebServer. This allows multiple requests for the same base URL of the WebServer.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"TimeoutSeconds","comment":"Sets the numb of seconds after which to time out the WebRequest. Default is 0, for no timeout.","valuetype":"Long-Signed","filenamebase":"TimeoutSeconds_Method","fqnprefix":"WebVSE.WebRequest","qn":"Set.TimeoutSeconds","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set TimeoutSeconds As Long","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the numb of seconds after which to time out the WebRequest. Default is 0, for no timeout.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the numb of seconds after which to time out the WebRequest. Default is 0, for no timeout.","inlinecomment":" \t &apos; Sets the numb of seconds after which to time out the WebRequest. Default is 0, for no timeout.","parentclassname":"WebRequest","codesamplehtml":"", "signatureelements":["Property","Set"]},{"label":"Verb","comment":"Sets the HTTP verb for the request, defaulting to &amp;quot;GET&amp;quot;.","valuetype":"String","filenamebase":"Verb_Method","fqnprefix":"WebVSE.WebRequest","qn":"Set.Verb","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set Verb As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the HTTP verb for the request, defaulting to &amp;quot;GET&amp;quot;.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the HTTP verb for the request, defaulting to &amp;quot;GET&amp;quot;.","inlinecomment":" \t &apos; Sets the HTTP verb for the request, defaulting to &amp;quot;GET&amp;quot;.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"VerboseLogging","comment":"Whether this Request should create a .log file with verbose logging output from libcurl. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","valuetype":"Boolean","filenamebase":"VerboseLogging_Method","fqnprefix":"WebVSE.WebRequest","qn":"Set.VerboseLogging","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set VerboseLogging As Boolean","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether this Request should create a .log file with verbose logging output from libcurl. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether this Request should create a .log file with verbose logging output from libcurl. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","inlinecomment":" \t &apos; Whether this Request should create a .log file with verbose logging output from libcurl. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Set"]}]}
