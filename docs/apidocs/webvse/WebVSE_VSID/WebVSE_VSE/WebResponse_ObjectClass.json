{"classname":"WebResponse","comment":"Class for handling responses from web requests.","valuetype":"","filenamebase":"WebResponse_ObjectClass","fqnprefix":"WebVSE","qn":"WebResponse","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","classattribnewnotexposed":"UnexposedNew","projectid":"85258A080053C19485258833005FD0D9","version":3,"classid":"85258A080053C1948525883300600108","lsxclassid":6,"signature":"Public Class WebResponse","modifiers":"Public","classname":"WebResponse","parentclassname":"None","constructorsignature":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class for handling responses from web requests.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class for handling responses from web requests.","inlinecomment":" \t &apos; Class for handling responses from web requests.","codesamplehtml":"", "methods":[{"label":"Base64Decode","comment":"Decodes a base64-encoded string without needing to include HashVSE","valuetype":"String","filenamebase":"Base64Decode_Method","fqnprefix":"WebVSE.WebResponse","qn":"Base64Decode","codesample":"%REM\n    The following code creates a WebServer and WebRequest, sends the request and prints the cookies in the WebResponse.\n%END REM\nDim server as New WebServer()\nDim request as WebRequest\nDim response as WebResponse\nDim convertedResp as String\nserver.protocol = &amp;quot;HTTPS&amp;quot;\nserver.HostURL = &amp;quot;httpstat.us&amp;quot;\nSet request = server.createRequest()\nrequest.target = &amp;quot;200&amp;quot;\nrequest.timeoutSeconds = 5\nSet response = request.send()\nconvertedResp = response.base64Decode(response.contentBody)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function Base64Decode(Input As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Decodes a base64-encoded string without needing to include HashVSE&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Decodes a base64-encoded string without needing to include HashVSE","inlinecomment":" \t &apos; Decodes a base64-encoded string without needing to include HashVSE","parentclassname":"WebResponse","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a WebServer and WebRequest, sends the request and prints the cookies in the WebResponse.&lt;br /&gt;%END REM&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;Dim convertedResp as String&lt;br /&gt;server.protocol = &amp;quot;HTTPS&amp;quot;&lt;br /&gt;server.HostURL = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;Set request = server.createRequest()&lt;br /&gt;request.target = &amp;quot;200&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;Set response = request.send()&lt;br /&gt;convertedResp = response.base64Decode(response.contentBody)", "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"Base64-encoded string to convert","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"WebVSEWebResponseBase64Decode","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base64-encoded string to convert&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base64-encoded string to convert","inlinecomment":" \t &apos; Base64-encoded string to convert"}]},{"label":"AllCookies","comment":"Retrieves all cookies as an array of strings, where the value is a tab-separated cookie containing seven fields:\n- Domain name\n- Include subdomains\n- Path\n- Set over a secure transport\n- Expires at, either seconds since Jan 1st 1970 or 0\n- Name of the cookie\n- Value of the cookie","valuetype":"String","filenamebase":"AllCookies_Method","fqnprefix":"WebVSE.WebResponse","qn":"Get.AllCookies","codesample":"%REM\n    The following code creates a WebServer and WebRequest, sends the request and prints the cookies in the WebResponse.\n%END REM\nDim server as New WebServer()\nDim request as WebRequest\nDim response as WebResponse\nserver.protocol = &amp;quot;HTTPS&amp;quot;\nserver.HostURL = &amp;quot;httpstat.us&amp;quot;\nSet request = server.createRequest()\nrequest.target = &amp;quot;200&amp;quot;\nrequest.timeoutSeconds = 5\nSet response = request.send()\nForAll cookie in response.AllCookies\n    Print &amp;quot;Cookie is &amp;quot; &amp;amp; cookie\nEnd ForAll","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get AllCookies As String Array","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Retrieves all cookies as an array of strings, where the value is a tab-separated cookie containing seven fields:&lt;br /&gt;- Domain name&lt;br /&gt;- Include subdomains&lt;br /&gt;- Path&lt;br /&gt;- Set over a secure transport&lt;br /&gt;- Expires at, either seconds since Jan 1st 1970 or 0&lt;br /&gt;- Name of the cookie&lt;br /&gt;- Value of the cookie&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Retrieves all cookies as an array of strings, where the value is a tab-separated cookie containing seven fields:&lt;br /&gt;- Domain name&lt;br /&gt;- Include subdomains&lt;br /&gt;- Path&lt;br /&gt;- Set over a secure transport&lt;br /&gt;- Expires at, either seconds since Jan 1st 1970 or 0&lt;br /&gt;- Name of the cookie&lt;br /&gt;- Value of the cookie","inlinecomment":" \t &apos; Retrieves all cookies as an array of strings, where the value is a tab-separated cookie containing seven fields:\n- Domain name\n- Include subdomains\n- Path\n- Set over a secure transport\n- Expires at, either seconds since Jan 1st 1970 or 0\n- Name of the cookie\n- Value of the cookie","parentclassname":"WebResponse","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a WebServer and WebRequest, sends the request and prints the cookies in the WebResponse.&lt;br /&gt;%END REM&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;server.protocol = &amp;quot;HTTPS&amp;quot;&lt;br /&gt;server.HostURL = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;Set request = server.createRequest()&lt;br /&gt;request.target = &amp;quot;200&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;Set response = request.send()&lt;br /&gt;ForAll cookie in response.AllCookies&lt;br /&gt;    Print &amp;quot;Cookie is &amp;quot; &amp;amp; cookie&lt;br /&gt;End ForAll", "attributes":["READ_ONLY","Array"], "signatureelements":["Property","Get"]},{"label":"AllHeaders","comment":"Retrieves all HTTP headers as an array of strings, where the header is &amp;quot;NAME: VALUE&amp;quot;","valuetype":"String","filenamebase":"AllHeaders_Method","fqnprefix":"WebVSE.WebResponse","qn":"Get.AllHeaders","codesample":"%REM\n    The following code creates a WebServer and WebRequest, sends the request and prints the headers in the WebResponse.\n%END REM\nDim server as New WebServer()\nDim request as WebRequest\nDim response as WebResponse\nserver.protocol = &amp;quot;HTTPS&amp;quot;\nserver.HostURL = &amp;quot;httpstat.us&amp;quot;\nSet request = server.createRequest()\nrequest.target = &amp;quot;200&amp;quot;\nrequest.timeoutSeconds = 5\nSet response = request.send()\nForAll header in response.AllHeaders\n    Print &amp;quot;Header is &amp;quot; &amp;amp; header\nEnd ForAll","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get AllHeaders As String Array","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Retrieves all HTTP headers as an array of strings, where the header is &amp;quot;NAME: VALUE&amp;quot;&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Retrieves all HTTP headers as an array of strings, where the header is &amp;quot;NAME: VALUE&amp;quot;","inlinecomment":" \t &apos; Retrieves all HTTP headers as an array of strings, where the header is &amp;quot;NAME: VALUE&amp;quot;","parentclassname":"WebResponse","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a WebServer and WebRequest, sends the request and prints the headers in the WebResponse.&lt;br /&gt;%END REM&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;server.protocol = &amp;quot;HTTPS&amp;quot;&lt;br /&gt;server.HostURL = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;Set request = server.createRequest()&lt;br /&gt;request.target = &amp;quot;200&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;Set response = request.send()&lt;br /&gt;ForAll header in response.AllHeaders&lt;br /&gt;    Print &amp;quot;Header is &amp;quot; &amp;amp; header&lt;br /&gt;End ForAll", "attributes":["READ_ONLY","Array"], "signatureelements":["Property","Get"]},{"label":"ContentBody","comment":"Provides access to the response body from the WebResponse.","valuetype":"String","filenamebase":"ContentBody_Method","fqnprefix":"WebVSE.WebResponse","qn":"Get.ContentBody","codesample":"%REM\n    The following code creates a WebServer and WebRequest, sends the request and prints the body in the WebResponse.\n%END REM\nDim server as New WebServer()\nDim request as WebRequest\nDim response as WebResponse\nserver.protocol = &amp;quot;HTTPS&amp;quot;\nserver.HostURL = &amp;quot;httpstat.us&amp;quot;\nSet request = server.createRequest()\nrequest.target = &amp;quot;200&amp;quot;\nrequest.timeoutSeconds = 5\nSet response = request.send()\nPrint response.ContentBody","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ContentBody As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Provides access to the response body from the WebResponse.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Provides access to the response body from the WebResponse.","inlinecomment":" \t &apos; Provides access to the response body from the WebResponse.","parentclassname":"WebResponse","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a WebServer and WebRequest, sends the request and prints the body in the WebResponse.&lt;br /&gt;%END REM&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;server.protocol = &amp;quot;HTTPS&amp;quot;&lt;br /&gt;server.HostURL = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;Set request = server.createRequest()&lt;br /&gt;request.target = &amp;quot;200&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;Set response = request.send()&lt;br /&gt;Print response.ContentBody", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"ContentLength","comment":"Provides easy access to the Content-Length HTTP header of the WebResponse. For chunked encoding, the length will be -1.","valuetype":"Long-Signed","filenamebase":"ContentLength_Method","fqnprefix":"WebVSE.WebResponse","qn":"Get.ContentLength","codesample":"%REM\n    The following code creates a WebServer and WebRequest, sends the request and prints the length of the WebResponse body.\n%END REM\nDim server as New WebServer()\nDim request as WebRequest\nDim response as WebResponse\nserver.protocol = &amp;quot;HTTPS&amp;quot;\nserver.HostURL = &amp;quot;httpstat.us&amp;quot;\nSet request = server.createRequest()\nrequest.target = &amp;quot;200&amp;quot;\nrequest.timeoutSeconds = 5\nSet response = request.send()\nPrint response.ContentLength","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ContentLength As Long","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Provides easy access to the Content-Length HTTP header of the WebResponse. For chunked encoding, the length will be -1.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Provides easy access to the Content-Length HTTP header of the WebResponse. For chunked encoding, the length will be -1.","inlinecomment":" \t &apos; Provides easy access to the Content-Length HTTP header of the WebResponse. For chunked encoding, the length will be -1.","parentclassname":"WebResponse","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a WebServer and WebRequest, sends the request and prints the length of the WebResponse body.&lt;br /&gt;%END REM&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;server.protocol = &amp;quot;HTTPS&amp;quot;&lt;br /&gt;server.HostURL = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;Set request = server.createRequest()&lt;br /&gt;request.target = &amp;quot;200&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;Set response = request.send()&lt;br /&gt;Print response.ContentLength", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"ContentType","comment":"Provides easy access to the Content-Type HTTP header of the WebResponse.","valuetype":"String","filenamebase":"ContentType_Method","fqnprefix":"WebVSE.WebResponse","qn":"Get.ContentType","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ContentType As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Provides easy access to the Content-Type HTTP header of the WebResponse.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Provides easy access to the Content-Type HTTP header of the WebResponse.","inlinecomment":" \t &apos; Provides easy access to the Content-Type HTTP header of the WebResponse.","parentclassname":"WebResponse","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"ResponseCode","comment":"Provides access to the response code for the WebResponse.","valuetype":"Integer-Signed","filenamebase":"ResponseCode_Method","fqnprefix":"WebVSE.WebResponse","qn":"Get.ResponseCode","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ResponseCode As Integer","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Provides access to the response code for the WebResponse.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Provides access to the response code for the WebResponse.","inlinecomment":" \t &apos; Provides access to the response code for the WebResponse.","parentclassname":"WebResponse","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"TransactionMicroseconds","comment":"Provides access to the duration the WebRequest took to complete in milliseconds.","valuetype":"Double","filenamebase":"TransactionMicroseconds_Method","fqnprefix":"WebVSE.WebResponse","qn":"Get.TransactionMicroseconds","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get TransactionMicroseconds As Double","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Provides access to the duration the WebRequest took to complete in milliseconds.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Provides access to the duration the WebRequest took to complete in milliseconds.","inlinecomment":" \t &apos; Provides access to the duration the WebRequest took to complete in milliseconds.","parentclassname":"WebResponse","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]}]}
