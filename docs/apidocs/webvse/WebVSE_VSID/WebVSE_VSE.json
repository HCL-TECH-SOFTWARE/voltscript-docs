{"lsxname":"WebVSE","comment":"http stuff for BaliScript","valuetype":"","filenamebase":"WebVSE_VSE","fqnprefix":"WebVSE","qn":"WebVSE","codesample":"","signaturecode":32768,"instancecode":32768,"description":"","codesamplehtml":"","baseid":400,"baseguid":"D42D5080-EBCF-45A8-AD28-22E341953FC5","characterset":"UNICODE","lsxcreator":"Bob Balaban","signature":"VSE WebVSE","modifiers":"","lsxname":"WebVSE","summary":"http stuff for BaliScript","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;http stuff for BaliScript&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"http stuff for BaliScript","inlinecomment":" \t &apos; http stuff for BaliScript", "classes":[{"classname":"Completion","comment":"Class for handling completion of async web file requests.","valuetype":"","filenamebase":"Completion_ObjectClass","fqnprefix":"WebVSE","qn":"Completion","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","classattribnewnotexposed":"UnexposedNew","projectid":"85258A080053C19485258833005FD0D9","version":3,"classid":"85258A080053C1948525886C003F8C89","lsxclassid":3,"signature":"Public Class Completion","modifiers":"Public","classname":"Completion","parentclassname":"None","constructorsignature":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class for handling completion of async web file requests.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class for handling completion of async web file requests.","inlinecomment":" \t &apos; Class for handling completion of async web file requests.","codesamplehtml":"", "methods":[{"label":"IsComplete","comment":"Whether or not the upload/download is complete, with an optional number of seconds to wait.","valuetype":"Boolean","filenamebase":"IsComplete_Method","fqnprefix":"WebVSE.Completion","qn":"IsComplete","codesample":"%REM\n    The following code downloads two icons from a locally Domino server at the same time, waiting for them to complete and printing whether they were successful\n%END REM\nDim dominoServer as New WebServer()\nDim request as WebRequest\nDim arr(1) as Completion\nDim response as WebResponse\nDim i as Integer\nDim count as Integer\ndominoServer.hostUrl = &amp;quot;localhost&amp;quot;\nSet request = dominoServer.createRequest()\nrequest.target = &amp;quot;icons/vwicn001.gif&amp;quot;\nrequest.timeoutSeconds = 5\npath = CurDir &amp;amp; &amp;quot;vwicon1.gif&amp;quot;\nSet arr(0) = request.fileDownloadNoWait(path)\nSet request = dominoServer.createRequest()\nrequest.target = &amp;quot;icons/vwicn002.gif&amp;quot;\nrequest.timeoutSeconds = 5\npath = CurDir &amp;amp; &amp;quot;vwicon2.gif&amp;quot;\nSet arr(1) = request.fileDownloadNoWait(path)\nDo While count &amp;lt; 30\n    Sleep 2\n    count += 2\n    Print count\n    Print arr(0).isComplete\n    Print arr(1).isComplete\nLoop\nCall arr(0).wait()\nCall arr(1).wait()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(WaitTime As Integer)","signature":"Function IsComplete(WaitTime As Integer) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether or not the upload/download is complete, with an optional number of seconds to wait.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether or not the upload/download is complete, with an optional number of seconds to wait.","inlinecomment":" \t &apos; Whether or not the upload/download is complete, with an optional number of seconds to wait.","parentclassname":"Completion","codesamplehtml":"%REM&lt;br /&gt;    The following code downloads two icons from a locally Domino server at the same time, waiting for them to complete and printing whether they were successful&lt;br /&gt;%END REM&lt;br /&gt;Dim dominoServer as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim arr(1) as Completion&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;Dim i as Integer&lt;br /&gt;Dim count as Integer&lt;br /&gt;dominoServer.hostUrl = &amp;quot;localhost&amp;quot;&lt;br /&gt;Set request = dominoServer.createRequest()&lt;br /&gt;request.target = &amp;quot;icons/vwicn001.gif&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;path = CurDir &amp;amp; &amp;quot;vwicon1.gif&amp;quot;&lt;br /&gt;Set arr(0) = request.fileDownloadNoWait(path)&lt;br /&gt;Set request = dominoServer.createRequest()&lt;br /&gt;request.target = &amp;quot;icons/vwicn002.gif&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;path = CurDir &amp;amp; &amp;quot;vwicon2.gif&amp;quot;&lt;br /&gt;Set arr(1) = request.fileDownloadNoWait(path)&lt;br /&gt;Do While count &amp;lt; 30&lt;br /&gt;    Sleep 2&lt;br /&gt;    count += 2&lt;br /&gt;    Print count&lt;br /&gt;    Print arr(0).isComplete&lt;br /&gt;    Print arr(1).isComplete&lt;br /&gt;Loop&lt;br /&gt;Call arr(0).wait()&lt;br /&gt;Call arr(1).wait()", "signatureelements":["Function"], "arguments":[{"label":"WaitTime","comment":"Optional. Number of seconds to wait, defaulting to 5 if not set.","valuetype":"Integer-Unsigned","filenamebase":"WaitTime_ValuedElement","fqnprefix":"WebVSECompletionIsComplete","qn":"WaitTime","argumentindex":1,"optionalvalue":5,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Optional. Number of seconds to wait, defaulting to 5 if not set.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Optional. Number of seconds to wait, defaulting to 5 if not set.","inlinecomment":" \t &apos; Optional. Number of seconds to wait, defaulting to 5 if not set.", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"Wait","comment":"Waits for completion of the download / upload, taking an optional number of seconds to wait.","valuetype":"Boolean","filenamebase":"Wait_Method","fqnprefix":"WebVSE.Completion","qn":"Wait","codesample":"%REM\n    The following code downloads two icons from a locally Domino server at the same time, waiting for them to complete and printing whether they were successful\n%END REM\nDim dominoServer as New WebServer()\nDim request as WebRequest\nDim arr(1) as Completion\nDim response as WebResponse\nDim i as Integer\nDim count as Integer\ndominoServer.hostUrl = &amp;quot;localhost&amp;quot;\nSet request = dominoServer.createRequest()\nrequest.target = &amp;quot;icons/vwicn001.gif&amp;quot;\nrequest.timeoutSeconds = 5\npath = CurDir &amp;amp; &amp;quot;vwicon1.gif&amp;quot;\nSet arr(0) = request.fileDownloadNoWait(path)\nSet request = dominoServer.createRequest()\nrequest.target = &amp;quot;icons/vwicn002.gif&amp;quot;\nrequest.timeoutSeconds = 5\npath = CurDir &amp;amp; &amp;quot;vwicon2.gif&amp;quot;\nSet arr(1) = request.fileDownloadNoWait(path)\nDo While count &amp;lt; 30\n    Sleep 2\n    count += 2\n    Print count\n    Print arr(0).isComplete\n    Print arr(1).isComplete\nLoop\nCall arr(0).wait()\nCall arr(1).wait()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Timeout As Integer)","signature":"Function Wait(Timeout As Integer) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Waits for completion of the download / upload, taking an optional number of seconds to wait.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Waits for completion of the download / upload, taking an optional number of seconds to wait.","inlinecomment":" \t &apos; Waits for completion of the download / upload, taking an optional number of seconds to wait.","parentclassname":"Completion","codesamplehtml":"%REM&lt;br /&gt;    The following code downloads two icons from a locally Domino server at the same time, waiting for them to complete and printing whether they were successful&lt;br /&gt;%END REM&lt;br /&gt;Dim dominoServer as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim arr(1) as Completion&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;Dim i as Integer&lt;br /&gt;Dim count as Integer&lt;br /&gt;dominoServer.hostUrl = &amp;quot;localhost&amp;quot;&lt;br /&gt;Set request = dominoServer.createRequest()&lt;br /&gt;request.target = &amp;quot;icons/vwicn001.gif&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;path = CurDir &amp;amp; &amp;quot;vwicon1.gif&amp;quot;&lt;br /&gt;Set arr(0) = request.fileDownloadNoWait(path)&lt;br /&gt;Set request = dominoServer.createRequest()&lt;br /&gt;request.target = &amp;quot;icons/vwicn002.gif&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;path = CurDir &amp;amp; &amp;quot;vwicon2.gif&amp;quot;&lt;br /&gt;Set arr(1) = request.fileDownloadNoWait(path)&lt;br /&gt;Do While count &amp;lt; 30&lt;br /&gt;    Sleep 2&lt;br /&gt;    count += 2&lt;br /&gt;    Print count&lt;br /&gt;    Print arr(0).isComplete&lt;br /&gt;    Print arr(1).isComplete&lt;br /&gt;Loop&lt;br /&gt;Call arr(0).wait()&lt;br /&gt;Call arr(1).wait()", "signatureelements":["Function"], "arguments":[{"label":"Timeout","comment":"Optional. Number of seconds to wait and then timeout, defaulting to 30 seconds if not set","valuetype":"Integer-Unsigned","filenamebase":"Timeout_ValuedElement","fqnprefix":"WebVSECompletionWait","qn":"Timeout","argumentindex":1,"optionalvalue":30,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Optional. Number of seconds to wait and then timeout, defaulting to 30 seconds if not set&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Optional. Number of seconds to wait and then timeout, defaulting to 30 seconds if not set","inlinecomment":" \t &apos; Optional. Number of seconds to wait and then timeout, defaulting to 30 seconds if not set", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"CompletionCode","comment":"Response code for the associated WebResponse.","valuetype":"Integer-Signed","filenamebase":"CompletionCode_Method","fqnprefix":"WebVSE.Completion","qn":"Get.CompletionCode","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get CompletionCode As Integer","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Response code for the associated WebResponse.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Response code for the associated WebResponse.","inlinecomment":" \t &apos; Response code for the associated WebResponse.","parentclassname":"Completion","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"Response","comment":"The WebResponse that is the result of the download request.","valuetype":"WebResponse","filenamebase":"Response_Method","fqnprefix":"WebVSE.Completion","qn":"Get.Response","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Response As WebResponse","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;The WebResponse that is the result of the download request.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"The WebResponse that is the result of the download request.","inlinecomment":" \t &apos; The WebResponse that is the result of the download request.","parentclassname":"Completion","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]}]},{"classname":"URLBuilder","comment":"Class for building file and web URLs.","valuetype":"","filenamebase":"URLBuilder_ObjectClass","fqnprefix":"WebVSE","qn":"URLBuilder","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","projectid":"85258A080053C19485258833005FD0D9","version":3,"classid":"85258A080053C194802589C00020503B","lsxclassid":4,"signature":"Public Class URLBuilder","modifiers":"Public","classname":"URLBuilder","parentclassname":"None","constructorsignature":"Function New() As URLBuilder","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class for building file and web URLs.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class for building file and web URLs.","inlinecomment":" \t &apos; Class for building file and web URLs.","codesamplehtml":"", "methods":[{"label":"AddURLParameter","comment":"Adds a query string parameter to append to the TargetPath URL.","valuetype":"URLBuilder","filenamebase":"AddURLParameter_Method","fqnprefix":"WebVSE.URLBuilder","qn":"AddURLParameter","codesample":"%REM\n    The following code creates a web request using a URLBuilder\n%END REM\nDim response as WebResponse\nDim server as New WebServer()\nDim request as WebRequest\nDim builder as New URLBuilder()\nbuilder.isHttps = True\nbuilder.targetHost = &amp;quot;httpstat.us&amp;quot;\nbuilder.targetPath = &amp;quot;200&amp;quot;\nCall builder.addUrlParameter(&amp;quot;sleep&amp;quot;, &amp;quot;1000&amp;quot;)\nSet request = server.createRequestWithUrl(builder.toString(False))","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Key As String, Value As String)","signature":"Function AddURLParameter(Key As String, Value As String) As URLBuilder","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds a query string parameter to append to the TargetPath URL.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds a query string parameter to append to the TargetPath URL.","inlinecomment":" \t &apos; Adds a query string parameter to append to the TargetPath URL.","parentclassname":"URLBuilder","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a web request using a URLBuilder&lt;br /&gt;%END REM&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim builder as New URLBuilder()&lt;br /&gt;builder.isHttps = True&lt;br /&gt;builder.targetHost = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;builder.targetPath = &amp;quot;200&amp;quot;&lt;br /&gt;Call builder.addUrlParameter(&amp;quot;sleep&amp;quot;, &amp;quot;1000&amp;quot;)&lt;br /&gt;Set request = server.createRequestWithUrl(builder.toString(False))", "signatureelements":["Function"], "arguments":[{"label":"Key","comment":"Key of the URL parameter, e.g. &amp;quot;count&amp;quot;","valuetype":"String","filenamebase":"Key_ValuedElement","fqnprefix":"WebVSEURLBuilderAddURLParameter","qn":"Key","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Key of the URL parameter, e.g. &amp;quot;count&amp;quot;&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Key of the URL parameter, e.g. &amp;quot;count&amp;quot;","inlinecomment":" \t &apos; Key of the URL parameter, e.g. &amp;quot;count&amp;quot;"},{"label":"Value","comment":"Value of the URL parameter, e.g. &amp;quot;20&amp;quot;","valuetype":"String","filenamebase":"Value_ValuedElement","fqnprefix":"WebVSEURLBuilderAddURLParameter","qn":"Value","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value of the URL parameter, e.g. &amp;quot;20&amp;quot;&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value of the URL parameter, e.g. &amp;quot;20&amp;quot;","inlinecomment":" \t &apos; Value of the URL parameter, e.g. &amp;quot;20&amp;quot;", "attributes":["BY_VAL"]}]},{"label":"New","comment":"Constructor","valuetype":"URLBuilder","filenamebase":"New_Method","fqnprefix":"WebVSE.URLBuilder","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As URLBuilder","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor","inlinecomment":" \t &apos; Constructor","parentclassname":"URLBuilder","codesamplehtml":"", "signatureelements":["Function"]},{"label":"RemoveParameter","comment":"Removes a URL parameter. Note: parameters are an array of key/value pairs, so you cannot change a parameter. This would be done by removing the parameter and adding a new one. \nOne typical use case for this would be re-using the same URLBuilder for multiple calls with different query string arguments.","valuetype":"URLBuilder","filenamebase":"RemoveParameter_Method","fqnprefix":"WebVSE.URLBuilder","qn":"RemoveParameter","codesample":"%REM\n    The following code builds a URL, removes a non-existent query-string parameter and removes an actual query-string parameter.\n%END REM\nDim response as WebResponse\nDim server as New WebServer()\nDim request as WebRequest\nDim builder as New URLBuilder()\nbuilder.isHttps = True\nbuilder.targetHost = &amp;quot;httpstat.us&amp;quot;\nbuilder.targetPath = &amp;quot;200&amp;quot;\nCall builder.addUrlParameter(&amp;quot;sleep&amp;quot;, &amp;quot;1000&amp;quot;)\nCall builder.RemoveParameter(&amp;quot;Sleep&amp;quot;)    &amp;apos; Does nothing, parameter is &amp;quot;sleep&amp;quot;, not &amp;quot;Sleep&amp;quot;\nCall builder.removeParameter(&amp;quot;sleep&amp;quot;)   &amp;apos; Removes sleep query string parameter","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Key As String)","signature":"Function RemoveParameter(Key As String) As URLBuilder","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Removes a URL parameter. Note: parameters are an array of key/value pairs, so you cannot change a parameter. This would be done by removing the parameter and adding a new one. &lt;br /&gt;One typical use case for this would be re-using the same URLBuilder for multiple calls with different query string arguments.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Removes a URL parameter. Note: parameters are an array of key/value pairs, so you cannot change a parameter. This would be done by removing the parameter and adding a new one. &lt;br /&gt;One typical use case for this would be re-using the same URLBuilder for multiple calls with different query string arguments.","inlinecomment":" \t &apos; Removes a URL parameter. Note: parameters are an array of key/value pairs, so you cannot change a parameter. This would be done by removing the parameter and adding a new one. \nOne typical use case for this would be re-using the same URLBuilder for multiple calls with different query string arguments.","parentclassname":"URLBuilder","codesamplehtml":"%REM&lt;br /&gt;    The following code builds a URL, removes a non-existent query-string parameter and removes an actual query-string parameter.&lt;br /&gt;%END REM&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim builder as New URLBuilder()&lt;br /&gt;builder.isHttps = True&lt;br /&gt;builder.targetHost = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;builder.targetPath = &amp;quot;200&amp;quot;&lt;br /&gt;Call builder.addUrlParameter(&amp;quot;sleep&amp;quot;, &amp;quot;1000&amp;quot;)&lt;br /&gt;Call builder.RemoveParameter(&amp;quot;Sleep&amp;quot;)    &amp;apos; Does nothing, parameter is &amp;quot;sleep&amp;quot;, not &amp;quot;Sleep&amp;quot;&lt;br /&gt;Call builder.removeParameter(&amp;quot;sleep&amp;quot;)   &amp;apos; Removes sleep query string parameter", "signatureelements":["Function"], "arguments":[{"label":"Key","comment":"Key of URL parameter to be removed. If there is no parameter with the passed key, URL parameters are not changed and no error is raised.","valuetype":"String","filenamebase":"Key_ValuedElement","fqnprefix":"WebVSEURLBuilderRemoveParameter","qn":"Key","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Key of URL parameter to be removed. If there is no parameter with the passed key, URL parameters are not changed and no error is raised.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Key of URL parameter to be removed. If there is no parameter with the passed key, URL parameters are not changed and no error is raised.","inlinecomment":" \t &apos; Key of URL parameter to be removed. If there is no parameter with the passed key, URL parameters are not changed and no error is raised."}]},{"label":"ToString","comment":"Outputs the URL as a string, using Protocol + TargetHost + TargetPath + URL parameters. Protocol is file:///, http:// or https://, depending on which property is set. \nURL parameters are output in alphabetical order on key.","valuetype":"String","filenamebase":"ToString_Method","fqnprefix":"WebVSE.URLBuilder","qn":"ToString","codesample":"%REM\n    The following code builds a URL and returns it as a string.\n%END REM\nDim response as WebResponse\nDim server as New WebServer()\nDim request as WebRequest\nDim builder as New URLBuilder()\nbuilder.isHttps = True\nbuilder.targetHost = &amp;quot;httpstat.us&amp;quot;\nbuilder.targetPath = &amp;quot;200&amp;quot;\nCall builder.addUrlParameter(&amp;quot;sleep&amp;quot;, &amp;quot;1000&amp;quot;)\nPrint builder.toString(false)   &amp;apos;HTTPS://httpstat.us/200?sleep=1000","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(URLEncode As Boolean)","signature":"Function ToString(URLEncode As Boolean) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Outputs the URL as a string, using Protocol + TargetHost + TargetPath + URL parameters. Protocol is file:///, http:// or https://, depending on which property is set. &lt;br /&gt;URL parameters are output in alphabetical order on key.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Outputs the URL as a string, using Protocol + TargetHost + TargetPath + URL parameters. Protocol is file:///, http:// or https://, depending on which property is set. &lt;br /&gt;URL parameters are output in alphabetical order on key.","inlinecomment":" \t &apos; Outputs the URL as a string, using Protocol + TargetHost + TargetPath + URL parameters. Protocol is file:///, http:// or https://, depending on which property is set. \nURL parameters are output in alphabetical order on key.","parentclassname":"URLBuilder","codesamplehtml":"%REM&lt;br /&gt;    The following code builds a URL and returns it as a string.&lt;br /&gt;%END REM&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim builder as New URLBuilder()&lt;br /&gt;builder.isHttps = True&lt;br /&gt;builder.targetHost = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;builder.targetPath = &amp;quot;200&amp;quot;&lt;br /&gt;Call builder.addUrlParameter(&amp;quot;sleep&amp;quot;, &amp;quot;1000&amp;quot;)&lt;br /&gt;Print builder.toString(false)   &amp;apos;HTTPS://httpstat.us/200?sleep=1000", "signatureelements":["Function"], "arguments":[{"label":"URLEncode","comment":"Whether or not to URL encode the string","valuetype":"Boolean","filenamebase":"URLEncode_ValuedElement","fqnprefix":"WebVSEURLBuilderToString","qn":"URLEncode","argumentindex":1,"optionalvalue":"LSXTrue","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether or not to URL encode the string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether or not to URL encode the string","inlinecomment":" \t &apos; Whether or not to URL encode the string", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"IsFile","comment":"Sets this as a builder for file URIs, protocol will be file:///","valuetype":"Boolean","filenamebase":"IsFile_Method","fqnprefix":"WebVSE.URLBuilder","qn":"Get.IsFile","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get IsFile As Boolean","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets this as a builder for file URIs, protocol will be file:///&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets this as a builder for file URIs, protocol will be file:///","inlinecomment":" \t &apos; Sets this as a builder for file URIs, protocol will be file:///","parentclassname":"URLBuilder","codesamplehtml":"", "signatureelements":["Property","Get"]},{"label":"IsHTTP","comment":"Sets this as a builder for HTTP URIs, protocol will be http://","valuetype":"Boolean","filenamebase":"IsHTTP_Method","fqnprefix":"WebVSE.URLBuilder","qn":"Get.IsHTTP","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get IsHTTP As Boolean","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets this as a builder for HTTP URIs, protocol will be http://&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets this as a builder for HTTP URIs, protocol will be http://","inlinecomment":" \t &apos; Sets this as a builder for HTTP URIs, protocol will be http://","parentclassname":"URLBuilder","codesamplehtml":"", "signatureelements":["Property","Get"]},{"label":"IsHTTPS","comment":"Sets this as a builder for HTTPS URIs, protocol will be https://","valuetype":"Boolean","filenamebase":"IsHTTPS_Method","fqnprefix":"WebVSE.URLBuilder","qn":"Get.IsHTTPS","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get IsHTTPS As Boolean","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets this as a builder for HTTPS URIs, protocol will be https://&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets this as a builder for HTTPS URIs, protocol will be https://","inlinecomment":" \t &apos; Sets this as a builder for HTTPS URIs, protocol will be https://","parentclassname":"URLBuilder","codesamplehtml":"", "signatureelements":["Property","Get"]},{"label":"TargetHost","comment":"Host URL to conncet to. This will be used as the HostURL property of the WebServer created.","valuetype":"String","filenamebase":"TargetHost_Method","fqnprefix":"WebVSE.URLBuilder","qn":"Get.TargetHost","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get TargetHost As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Host URL to conncet to. This will be used as the HostURL property of the WebServer created.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Host URL to conncet to. This will be used as the HostURL property of the WebServer created.","inlinecomment":" \t &apos; Host URL to conncet to. This will be used as the HostURL property of the WebServer created.","parentclassname":"URLBuilder","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"TargetPath","comment":"Endpoint path relative to the TargetHost. This will be used as the Target for the WbRequest created.","valuetype":"String","filenamebase":"TargetPath_Method","fqnprefix":"WebVSE.URLBuilder","qn":"Get.TargetPath","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get TargetPath As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Endpoint path relative to the TargetHost. This will be used as the Target for the WbRequest created.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Endpoint path relative to the TargetHost. This will be used as the Target for the WbRequest created.","inlinecomment":" \t &apos; Endpoint path relative to the TargetHost. This will be used as the Target for the WbRequest created.","parentclassname":"URLBuilder","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"IsFile","comment":"Sets this as a builder for file URIs, protocol will be file:///","valuetype":"Boolean","filenamebase":"IsFile_Method","fqnprefix":"WebVSE.URLBuilder","qn":"Set.IsFile","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set IsFile As Boolean","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets this as a builder for file URIs, protocol will be file:///&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets this as a builder for file URIs, protocol will be file:///","inlinecomment":" \t &apos; Sets this as a builder for file URIs, protocol will be file:///","parentclassname":"URLBuilder","codesamplehtml":"", "signatureelements":["Property","Set"]},{"label":"IsHTTP","comment":"Sets this as a builder for HTTP URIs, protocol will be http://","valuetype":"Boolean","filenamebase":"IsHTTP_Method","fqnprefix":"WebVSE.URLBuilder","qn":"Set.IsHTTP","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set IsHTTP As Boolean","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets this as a builder for HTTP URIs, protocol will be http://&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets this as a builder for HTTP URIs, protocol will be http://","inlinecomment":" \t &apos; Sets this as a builder for HTTP URIs, protocol will be http://","parentclassname":"URLBuilder","codesamplehtml":"", "signatureelements":["Property","Set"]},{"label":"IsHTTPS","comment":"Sets this as a builder for HTTPS URIs, protocol will be https://","valuetype":"Boolean","filenamebase":"IsHTTPS_Method","fqnprefix":"WebVSE.URLBuilder","qn":"Set.IsHTTPS","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set IsHTTPS As Boolean","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets this as a builder for HTTPS URIs, protocol will be https://&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets this as a builder for HTTPS URIs, protocol will be https://","inlinecomment":" \t &apos; Sets this as a builder for HTTPS URIs, protocol will be https://","parentclassname":"URLBuilder","codesamplehtml":"", "signatureelements":["Property","Set"]},{"label":"TargetHost","comment":"Host URL to conncet to. This will be used as the HostURL property of the WebServer created.","valuetype":"String","filenamebase":"TargetHost_Method","fqnprefix":"WebVSE.URLBuilder","qn":"Set.TargetHost","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set TargetHost As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Host URL to conncet to. This will be used as the HostURL property of the WebServer created.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Host URL to conncet to. This will be used as the HostURL property of the WebServer created.","inlinecomment":" \t &apos; Host URL to conncet to. This will be used as the HostURL property of the WebServer created.","parentclassname":"URLBuilder","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"TargetPath","comment":"Endpoint path relative to the TargetHost. This will be used as the Target for the WbRequest created.","valuetype":"String","filenamebase":"TargetPath_Method","fqnprefix":"WebVSE.URLBuilder","qn":"Set.TargetPath","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set TargetPath As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Endpoint path relative to the TargetHost. This will be used as the Target for the WbRequest created.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Endpoint path relative to the TargetHost. This will be used as the Target for the WbRequest created.","inlinecomment":" \t &apos; Endpoint path relative to the TargetHost. This will be used as the Target for the WbRequest created.","parentclassname":"URLBuilder","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]}]},{"classname":"WebRequest","comment":"Class for making a web request.","valuetype":"","filenamebase":"WebRequest_ObjectClass","fqnprefix":"WebVSE","qn":"WebRequest","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","classattribnewnotexposed":"UnexposedNew","projectid":"85258A080053C19485258833005FD0D9","version":3,"classid":"85258A080053C19485258833005FF240","lsxclassid":5,"signature":"Public Class WebRequest","modifiers":"Public","classname":"WebRequest","parentclassname":"None","constructorsignature":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class for making a web request.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class for making a web request.","inlinecomment":" \t &apos; Class for making a web request.","codesamplehtml":"", "methods":[{"label":"Warning","comment":"","valuetype":"","filenamebase":"Warning_Method","fqnprefix":"WebVSE.WebRequest","qn":"Warning","codesample":"","signaturecode":128,"instancecode":128,"f_returnsobject":"","argumentsuffix":"(Msg As String)","signature":"Event Warning(Msg As String)","modifiers":"","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"WebRequest","codesamplehtml":"", "signatureelements":["Event"], "arguments":[{"label":"Msg","comment":"","valuetype":"String","filenamebase":"Msg_ValuedElement","fqnprefix":"WebVSEWebRequestWarning","qn":"Msg","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"AddCookie","comment":"Adds a cookie to the WebRequest.","valuetype":"WebRequest","filenamebase":"AddCookie_Method","fqnprefix":"WebVSE.WebRequest","qn":"AddCookie","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String, Value As String)","signature":"Function AddCookie(Name As String, Value As String) As WebRequest","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds a cookie to the WebRequest.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds a cookie to the WebRequest.","inlinecomment":" \t &apos; Adds a cookie to the WebRequest.","parentclassname":"WebRequest","codesamplehtml":"", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"Cookie name","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"WebVSEWebRequestAddCookie","qn":"Name","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Cookie name&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Cookie name","inlinecomment":" \t &apos; Cookie name"},{"label":"Value","comment":"Cookie value","valuetype":"String","filenamebase":"Value_ValuedElement","fqnprefix":"WebVSEWebRequestAddCookie","qn":"Value","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Cookie value&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Cookie value","inlinecomment":" \t &apos; Cookie value"}]},{"label":"AddHeader","comment":"Adds an HTTP header for the WebRequest. Properties are available for easily setting the Authorization, Accept and Content-Type headers.","valuetype":"WebRequest","filenamebase":"AddHeader_Method","fqnprefix":"WebVSE.WebRequest","qn":"AddHeader","codesample":"%REM\n    The following code creates a WebServer and WebRequest, adds HTTP headers and sends the request.\n%END REM\nDim server as New WebServer()\nDim request as WebRequest\nserver.protocol = &amp;quot;HTTPS&amp;quot;\nserver.hostURL = &amp;quot;httpstat.us&amp;quot;\nSet request = server.createRequest()\nrequest.verb = &amp;quot;PUT&amp;quot;\nrequest.ContentType = &amp;quot;application/json&amp;quot;\nrequest.AcceptHeader = &amp;quot;application/json&amp;quot;\nCall request.addHeader(&amp;quot;X-HttpStatus-Response-Foo&amp;quot;, &amp;quot;Bar&amp;quot;)\nrequest.target = 418\nrequest.timeoutSeconds = 5\nrequest.requestBody = |{&amp;quot;Hello&amp;quot;:&amp;quot;World&amp;quot;}|\nReturn request.send()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String, Value As String)","signature":"Function AddHeader(Name As String, Value As String) As WebRequest","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds an HTTP header for the WebRequest. Properties are available for easily setting the Authorization, Accept and Content-Type headers.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds an HTTP header for the WebRequest. Properties are available for easily setting the Authorization, Accept and Content-Type headers.","inlinecomment":" \t &apos; Adds an HTTP header for the WebRequest. Properties are available for easily setting the Authorization, Accept and Content-Type headers.","parentclassname":"WebRequest","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a WebServer and WebRequest, adds HTTP headers and sends the request.&lt;br /&gt;%END REM&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;server.protocol = &amp;quot;HTTPS&amp;quot;&lt;br /&gt;server.hostURL = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;Set request = server.createRequest()&lt;br /&gt;request.verb = &amp;quot;PUT&amp;quot;&lt;br /&gt;request.ContentType = &amp;quot;application/json&amp;quot;&lt;br /&gt;request.AcceptHeader = &amp;quot;application/json&amp;quot;&lt;br /&gt;Call request.addHeader(&amp;quot;X-HttpStatus-Response-Foo&amp;quot;, &amp;quot;Bar&amp;quot;)&lt;br /&gt;request.target = 418&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;request.requestBody = |{&amp;quot;Hello&amp;quot;:&amp;quot;World&amp;quot;}|&lt;br /&gt;Return request.send()", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"HTTP Header name","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"WebVSEWebRequestAddHeader","qn":"Name","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;HTTP Header name&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"HTTP Header name","inlinecomment":" \t &apos; HTTP Header name"},{"label":"Value","comment":"Value for the HTTP header","valuetype":"String","filenamebase":"Value_ValuedElement","fqnprefix":"WebVSEWebRequestAddHeader","qn":"Value","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value for the HTTP header&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value for the HTTP header","inlinecomment":" \t &apos; Value for the HTTP header"}]},{"label":"Base64Encode","comment":"Base64 encodes a string, useful for manipulating body content.","valuetype":"String","filenamebase":"Base64Encode_Method","fqnprefix":"WebVSE.WebRequest","qn":"Base64Encode","codesample":"%REM\n    The following code creates a WebServer and WebRequest, base64-encoding the body.\n%END REM\nDim server as New WebServer()\nDim request as WebRequest\nserver.protocol = &amp;quot;HTTPS&amp;quot;\nserver.hostURL = &amp;quot;httpstat.us&amp;quot;\nSet request = server.createRequest()\nrequest.verb = &amp;quot;PUT&amp;quot;\nrequest.ContentType = &amp;quot;application/json&amp;quot;\nrequest.AcceptHeader = &amp;quot;application/json&amp;quot;\nCall request.addHeader(&amp;quot;X-HttpStatus-Response-Foo&amp;quot;, &amp;quot;Bar&amp;quot;)\nrequest.target = 418\nrequest.timeoutSeconds = 5\nrequest.requestBody = request.base64Encode(|{&amp;quot;Hello&amp;quot;:&amp;quot;World&amp;quot;}|)\nReturn request.send()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function Base64Encode(Input As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base64 encodes a string, useful for manipulating body content.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base64 encodes a string, useful for manipulating body content.","inlinecomment":" \t &apos; Base64 encodes a string, useful for manipulating body content.","parentclassname":"WebRequest","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a WebServer and WebRequest, base64-encoding the body.&lt;br /&gt;%END REM&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;server.protocol = &amp;quot;HTTPS&amp;quot;&lt;br /&gt;server.hostURL = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;Set request = server.createRequest()&lt;br /&gt;request.verb = &amp;quot;PUT&amp;quot;&lt;br /&gt;request.ContentType = &amp;quot;application/json&amp;quot;&lt;br /&gt;request.AcceptHeader = &amp;quot;application/json&amp;quot;&lt;br /&gt;Call request.addHeader(&amp;quot;X-HttpStatus-Response-Foo&amp;quot;, &amp;quot;Bar&amp;quot;)&lt;br /&gt;request.target = 418&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;request.requestBody = request.base64Encode(|{&amp;quot;Hello&amp;quot;:&amp;quot;World&amp;quot;}|)&lt;br /&gt;Return request.send()", "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"Content to base64 encode.","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"WebVSEWebRequestBase64Encode","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Content to base64 encode.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Content to base64 encode.","inlinecomment":" \t &apos; Content to base64 encode."}]},{"label":"FileDownload","comment":"Performs a synchronous download a file to a given path. If the request does not return HTTP status 200, the file will contain the body of the response.","valuetype":"WebResponse","filenamebase":"FileDownload_Method","fqnprefix":"WebVSE.WebRequest","qn":"FileDownload","codesample":"%REM\n    The following code downloads a viewicon from a locally installed Domino server\n%END REM\nDim dominoServer as New WebServer()\nDim request as WebRequest\nDim response as WebResponse\nDim path as String\ndominoServer.hostUrl = &amp;quot;localhost&amp;quot;\nSet request = dominoServer.createRequest()\nrequest.target = &amp;quot;icons/vwicn001.gif&amp;quot;\nrequest.timeoutSeconds = 5\npath = CurDir &amp;amp; &amp;quot;vwicon1.gif&amp;quot;\nSet response = request.fileDownload(path)\nIf response.responseCode = 200 Then Print &amp;quot;Successful download&amp;quot;","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DestinationPath As String, Overwrite As Boolean)","signature":"Function FileDownload(DestinationPath As String, Overwrite As Boolean) As WebResponse","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Performs a synchronous download a file to a given path. If the request does not return HTTP status 200, the file will contain the body of the response.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Performs a synchronous download a file to a given path. If the request does not return HTTP status 200, the file will contain the body of the response.","inlinecomment":" \t &apos; Performs a synchronous download a file to a given path. If the request does not return HTTP status 200, the file will contain the body of the response.","parentclassname":"WebRequest","codesamplehtml":"%REM&lt;br /&gt;    The following code downloads a viewicon from a locally installed Domino server&lt;br /&gt;%END REM&lt;br /&gt;Dim dominoServer as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;Dim path as String&lt;br /&gt;dominoServer.hostUrl = &amp;quot;localhost&amp;quot;&lt;br /&gt;Set request = dominoServer.createRequest()&lt;br /&gt;request.target = &amp;quot;icons/vwicn001.gif&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;path = CurDir &amp;amp; &amp;quot;vwicon1.gif&amp;quot;&lt;br /&gt;Set response = request.fileDownload(path)&lt;br /&gt;If response.responseCode = 200 Then Print &amp;quot;Successful download&amp;quot;", "signatureelements":["Function"], "arguments":[{"label":"DestinationPath","comment":"Path to download to","valuetype":"String","filenamebase":"DestinationPath_ValuedElement","fqnprefix":"WebVSEWebRequestFileDownload","qn":"DestinationPath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to download to&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to download to","inlinecomment":" \t &apos; Path to download to"},{"label":"Overwrite","comment":"","valuetype":"Boolean","filenamebase":"Overwrite_ValuedElement","fqnprefix":"WebVSEWebRequestFileDownload","qn":"Overwrite","argumentindex":2,"optionalvalue":"LSXFalse","commentblock":"","commenthtml":"","inlinecomment":"", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"FileDownloadNoWait","comment":"Performs an async download of a file. If the request does not return HTTP status 200, the file will contain the body of the response.","valuetype":"Completion","filenamebase":"FileDownloadNoWait_Method","fqnprefix":"WebVSE.WebRequest","qn":"FileDownloadNoWait","codesample":"%REM\n    The following code downloads two icons from a locally Domino server at the same time, waiting for them to complete and printing whether they were successful\n%END REM\nDim dominoServer as New WebServer()\nDim request as WebRequest\nDim arr(1) as Completion\nDim response as WebResponse\nDim i as Integer\nDim path as String\ndominoServer.hostUrl = &amp;quot;localhost&amp;quot;\nSet request = dominoServer.createRequest()\nrequest.target = &amp;quot;icons/vwicn001.gif&amp;quot;\nrequest.timeoutSeconds = 5\npath = CurDir &amp;amp; &amp;quot;vwicon1.gif&amp;quot;\nSet arr(0) = request.fileDownloadNoWait(path)\nSet request = dominoServer.createRequest()\nrequest.target = &amp;quot;icons/vwicn002.gif&amp;quot;\nrequest.timeoutSeconds = 5\npath = CurDir &amp;amp; &amp;quot;vwicon2.gif&amp;quot;\nSet arr(1) = request.fileDownloadNoWait(path)\nCall arr(0).wait()\nCall arr(1).wait()\nFor i = 0 to 1\n   Set response = arr(i).response\n   If response.responseCode = 200 Then Print &amp;quot;Successful download&amp;quot;\nNext","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DestinationPath As String, Overwrite As Boolean)","signature":"Function FileDownloadNoWait(DestinationPath As String, Overwrite As Boolean) As Completion","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Performs an async download of a file. If the request does not return HTTP status 200, the file will contain the body of the response.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Performs an async download of a file. If the request does not return HTTP status 200, the file will contain the body of the response.","inlinecomment":" \t &apos; Performs an async download of a file. If the request does not return HTTP status 200, the file will contain the body of the response.","parentclassname":"WebRequest","codesamplehtml":"%REM&lt;br /&gt;    The following code downloads two icons from a locally Domino server at the same time, waiting for them to complete and printing whether they were successful&lt;br /&gt;%END REM&lt;br /&gt;Dim dominoServer as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim arr(1) as Completion&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;Dim i as Integer&lt;br /&gt;Dim path as String&lt;br /&gt;dominoServer.hostUrl = &amp;quot;localhost&amp;quot;&lt;br /&gt;Set request = dominoServer.createRequest()&lt;br /&gt;request.target = &amp;quot;icons/vwicn001.gif&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;path = CurDir &amp;amp; &amp;quot;vwicon1.gif&amp;quot;&lt;br /&gt;Set arr(0) = request.fileDownloadNoWait(path)&lt;br /&gt;Set request = dominoServer.createRequest()&lt;br /&gt;request.target = &amp;quot;icons/vwicn002.gif&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;path = CurDir &amp;amp; &amp;quot;vwicon2.gif&amp;quot;&lt;br /&gt;Set arr(1) = request.fileDownloadNoWait(path)&lt;br /&gt;Call arr(0).wait()&lt;br /&gt;Call arr(1).wait()&lt;br /&gt;For i = 0 to 1&lt;br /&gt;   Set response = arr(i).response&lt;br /&gt;   If response.responseCode = 200 Then Print &amp;quot;Successful download&amp;quot;&lt;br /&gt;Next", "signatureelements":["Function"], "arguments":[{"label":"DestinationPath","comment":"Path in which to put the downloaded file","valuetype":"String","filenamebase":"DestinationPath_ValuedElement","fqnprefix":"WebVSEWebRequestFileDownloadNoWait","qn":"DestinationPath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path in which to put the downloaded file&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path in which to put the downloaded file","inlinecomment":" \t &apos; Path in which to put the downloaded file"},{"label":"Overwrite","comment":"","valuetype":"Boolean","filenamebase":"Overwrite_ValuedElement","fqnprefix":"WebVSEWebRequestFileDownloadNoWait","qn":"Overwrite","argumentindex":2,"optionalvalue":"LSXFalse","commentblock":"","commenthtml":"","inlinecomment":"", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"FileUpload","comment":"Performs a synchronous upload of a file at a given path.","valuetype":"WebResponse","filenamebase":"FileUpload_Method","fqnprefix":"WebVSE.WebRequest","qn":"FileUpload","codesample":"%REM\n    The following code uploads a file to a server. It assumes a server that can receive file uploads at an &amp;quot;upload&amp;quot; endpoint.\n%END REM\nFunction uploadFile(server as WebServer, filePath as String)\n    Dim request as WebRequest\n    Dim response as WebResponse\n    Set request = server.createRequest()\n    request.target = &amp;quot;upload&amp;quot;\n    Set response = request.FileUpload(filePath)\n    Print response.responseCode\nEnd Function","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(FilePath As String)","signature":"Function FileUpload(FilePath As String) As WebResponse","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Performs a synchronous upload of a file at a given path.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Performs a synchronous upload of a file at a given path.","inlinecomment":" \t &apos; Performs a synchronous upload of a file at a given path.","parentclassname":"WebRequest","codesamplehtml":"%REM&lt;br /&gt;    The following code uploads a file to a server. It assumes a server that can receive file uploads at an &amp;quot;upload&amp;quot; endpoint.&lt;br /&gt;%END REM&lt;br /&gt;Function uploadFile(server as WebServer, filePath as String)&lt;br /&gt;    Dim request as WebRequest&lt;br /&gt;    Dim response as WebResponse&lt;br /&gt;    Set request = server.createRequest()&lt;br /&gt;    request.target = &amp;quot;upload&amp;quot;&lt;br /&gt;    Set response = request.FileUpload(filePath)&lt;br /&gt;    Print response.responseCode&lt;br /&gt;End Function", "signatureelements":["Function"], "arguments":[{"label":"FilePath","comment":"Path to file to upload","valuetype":"String","filenamebase":"FilePath_ValuedElement","fqnprefix":"WebVSEWebRequestFileUpload","qn":"FilePath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to file to upload&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to file to upload","inlinecomment":" \t &apos; Path to file to upload"}]},{"label":"FileUploadNoWait","comment":"Performs an asynchronous file upload of a file at a given path.","valuetype":"Completion","filenamebase":"FileUploadNoWait_Method","fqnprefix":"WebVSE.WebRequest","qn":"FileUploadNoWait","codesample":"%REM\n    The following code uploads a file to a server. It assumes a server that can receive file uploads at an &amp;quot;upload&amp;quot; endpoint.\n%END REM\nFunction uploadFiles(server as WebServer, filePaths() as String)\n    Dim request as WebRequest\n    Dim arr() as Completion\n    Dim i as Integer\n    Redim arr(UBound(filePaths)\n    ForAll paths in FilePaths\n        Set request = server.createRequest()\n        request.target = &amp;quot;upload&amp;quot;\n        arr(i) = request.FileUploadNoWait(filePath)\n        arr(i++).wait\n    End ForAll\n    ForAll comp in arr\n        Print comp.completionCode\n    End ForAll\nEnd Function","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(FilePath As String)","signature":"Function FileUploadNoWait(FilePath As String) As Completion","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Performs an asynchronous file upload of a file at a given path.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Performs an asynchronous file upload of a file at a given path.","inlinecomment":" \t &apos; Performs an asynchronous file upload of a file at a given path.","parentclassname":"WebRequest","codesamplehtml":"%REM&lt;br /&gt;    The following code uploads a file to a server. It assumes a server that can receive file uploads at an &amp;quot;upload&amp;quot; endpoint.&lt;br /&gt;%END REM&lt;br /&gt;Function uploadFiles(server as WebServer, filePaths() as String)&lt;br /&gt;    Dim request as WebRequest&lt;br /&gt;    Dim arr() as Completion&lt;br /&gt;    Dim i as Integer&lt;br /&gt;    Redim arr(UBound(filePaths)&lt;br /&gt;    ForAll paths in FilePaths&lt;br /&gt;        Set request = server.createRequest()&lt;br /&gt;        request.target = &amp;quot;upload&amp;quot;&lt;br /&gt;        arr(i) = request.FileUploadNoWait(filePath)&lt;br /&gt;        arr(i++).wait&lt;br /&gt;    End ForAll&lt;br /&gt;    ForAll comp in arr&lt;br /&gt;        Print comp.completionCode&lt;br /&gt;    End ForAll&lt;br /&gt;End Function", "signatureelements":["Function"], "arguments":[{"label":"FilePath","comment":"Path to file to upload","valuetype":"String","filenamebase":"FilePath_ValuedElement","fqnprefix":"WebVSEWebRequestFileUploadNoWait","qn":"FilePath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to file to upload&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to file to upload","inlinecomment":" \t &apos; Path to file to upload"}]},{"label":"Send","comment":"Submits the WebRequest, performing the curl request.","valuetype":"WebResponse","filenamebase":"Send_Method","fqnprefix":"WebVSE.WebRequest","qn":"Send","codesample":"%REM\n    The following code creates a WebServer and WebRequest and sends the request.\n%END REM\nDim server as New WebServer()\nDim request as WebRequest\nserver.protocol = &amp;quot;HTTPS&amp;quot;\nserver.HostURL = &amp;quot;httpstat.us&amp;quot;\nSet request = server.createRequest()\nrequest.target = &amp;quot;200&amp;quot;\nrequest.timeoutSeconds = 5\nReturn request.send()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function Send() As WebResponse","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Submits the WebRequest, performing the curl request.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Submits the WebRequest, performing the curl request.","inlinecomment":" \t &apos; Submits the WebRequest, performing the curl request.","parentclassname":"WebRequest","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a WebServer and WebRequest and sends the request.&lt;br /&gt;%END REM&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;server.protocol = &amp;quot;HTTPS&amp;quot;&lt;br /&gt;server.HostURL = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;Set request = server.createRequest()&lt;br /&gt;request.target = &amp;quot;200&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;Return request.send()", "signatureelements":["Function"]},{"label":"SendAsync","comment":"Submits the WebRequest asynchronously, performing the curl request on another thread. This function returns immediately. Use the Completion object to determine if the request has completed, then inspect the response.","valuetype":"Completion","filenamebase":"SendAsync_Method","fqnprefix":"WebVSE.WebRequest","qn":"SendAsync","codesample":"%REM\n    The following code downloads two icons from a locally Domino server at the same time, waiting for them to complete and printing whether they were successful\n%END REM\nDim dominoServer as New WebServer()\nDim request as WebRequest\nDim arr(1) as Completion\nDim response as WebResponse\nDim i as Integer\nDim path as String\ndominoServer.hostUrl = &amp;quot;localhost&amp;quot;\nSet request = dominoServer.createRequest()\nrequest.target = &amp;quot;icons/vwicn001.gif&amp;quot;\nrequest.timeoutSeconds = 5\npath = CurDir &amp;amp; &amp;quot;vwicon1.gif&amp;quot;\nSet arr(0) = request.fileDownloadNoWait(path)\nSet request = dominoServer.createRequest()\nrequest.target = &amp;quot;icons/vwicn002.gif&amp;quot;\nrequest.timeoutSeconds = 5\npath = CurDir &amp;amp; &amp;quot;vwicon2.gif&amp;quot;\nSet arr(1) = request.fileDownloadNoWait(path)\nCall arr(0).wait()\nCall arr(1).wait()\nFor i = 0 to 1\n   Set response = arr(i).response\n   If response.responseCode = 200 Then Print &amp;quot;Successful download&amp;quot;\nNext","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function SendAsync() As Completion","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Submits the WebRequest asynchronously, performing the curl request on another thread. This function returns immediately. Use the Completion object to determine if the request has completed, then inspect the response.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Submits the WebRequest asynchronously, performing the curl request on another thread. This function returns immediately. Use the Completion object to determine if the request has completed, then inspect the response.","inlinecomment":" \t &apos; Submits the WebRequest asynchronously, performing the curl request on another thread. This function returns immediately. Use the Completion object to determine if the request has completed, then inspect the response.","parentclassname":"WebRequest","codesamplehtml":"%REM&lt;br /&gt;    The following code downloads two icons from a locally Domino server at the same time, waiting for them to complete and printing whether they were successful&lt;br /&gt;%END REM&lt;br /&gt;Dim dominoServer as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim arr(1) as Completion&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;Dim i as Integer&lt;br /&gt;Dim path as String&lt;br /&gt;dominoServer.hostUrl = &amp;quot;localhost&amp;quot;&lt;br /&gt;Set request = dominoServer.createRequest()&lt;br /&gt;request.target = &amp;quot;icons/vwicn001.gif&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;path = CurDir &amp;amp; &amp;quot;vwicon1.gif&amp;quot;&lt;br /&gt;Set arr(0) = request.fileDownloadNoWait(path)&lt;br /&gt;Set request = dominoServer.createRequest()&lt;br /&gt;request.target = &amp;quot;icons/vwicn002.gif&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;path = CurDir &amp;amp; &amp;quot;vwicon2.gif&amp;quot;&lt;br /&gt;Set arr(1) = request.fileDownloadNoWait(path)&lt;br /&gt;Call arr(0).wait()&lt;br /&gt;Call arr(1).wait()&lt;br /&gt;For i = 0 to 1&lt;br /&gt;   Set response = arr(i).response&lt;br /&gt;   If response.responseCode = 200 Then Print &amp;quot;Successful download&amp;quot;&lt;br /&gt;Next", "signatureelements":["Function"]},{"label":"AcceptHeader","comment":"Sets &amp;quot;Accept&amp;quot; HTTP header with relevant value, .g. &amp;quot;application/json&amp;quot;. Default value is &amp;quot;*/&amp;quot;.","valuetype":"String","filenamebase":"AcceptHeader_Method","fqnprefix":"WebVSE.WebRequest","qn":"Get.AcceptHeader","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get AcceptHeader As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets &amp;quot;Accept&amp;quot; HTTP header with relevant value, .g. &amp;quot;application/json&amp;quot;. Default value is &amp;quot;*/&amp;quot;.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets &amp;quot;Accept&amp;quot; HTTP header with relevant value, .g. &amp;quot;application/json&amp;quot;. Default value is &amp;quot;*/&amp;quot;.","inlinecomment":" \t &apos; Sets &amp;quot;Accept&amp;quot; HTTP header with relevant value, .g. &amp;quot;application/json&amp;quot;. Default value is &amp;quot;*/&amp;quot;.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"AuthorizationHeader","comment":"Sets the &amp;quot;Authorization&amp;quot; HTTP header.","valuetype":"String","filenamebase":"AuthorizationHeader_Method","fqnprefix":"WebVSE.WebRequest","qn":"Get.AuthorizationHeader","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get AuthorizationHeader As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the &amp;quot;Authorization&amp;quot; HTTP header.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the &amp;quot;Authorization&amp;quot; HTTP header.","inlinecomment":" \t &apos; Sets the &amp;quot;Authorization&amp;quot; HTTP header.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"ContentType","comment":"Sets the &amp;quot;Content-Type&amp;quot; HTTP header, for the content type being sent in the request, e.g. &amp;quot;application/json&amp;quot;.","valuetype":"String","filenamebase":"ContentType_Method","fqnprefix":"WebVSE.WebRequest","qn":"Get.ContentType","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ContentType As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the &amp;quot;Content-Type&amp;quot; HTTP header, for the content type being sent in the request, e.g. &amp;quot;application/json&amp;quot;.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the &amp;quot;Content-Type&amp;quot; HTTP header, for the content type being sent in the request, e.g. &amp;quot;application/json&amp;quot;.","inlinecomment":" \t &apos; Sets the &amp;quot;Content-Type&amp;quot; HTTP header, for the content type being sent in the request, e.g. &amp;quot;application/json&amp;quot;.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"RequestBody","comment":"Sets the body content for a POST / PUT / PATCH WebRequest.","valuetype":"String","filenamebase":"RequestBody_Method","fqnprefix":"WebVSE.WebRequest","qn":"Get.RequestBody","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get RequestBody As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the body content for a POST / PUT / PATCH WebRequest.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the body content for a POST / PUT / PATCH WebRequest.","inlinecomment":" \t &apos; Sets the body content for a POST / PUT / PATCH WebRequest.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Target","comment":"Sets the target URL to append to the HostURL of the WebServer. This allows multiple requests for the same base URL of the WebServer.","valuetype":"String","filenamebase":"Target_Method","fqnprefix":"WebVSE.WebRequest","qn":"Get.Target","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Target As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the target URL to append to the HostURL of the WebServer. This allows multiple requests for the same base URL of the WebServer.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the target URL to append to the HostURL of the WebServer. This allows multiple requests for the same base URL of the WebServer.","inlinecomment":" \t &apos; Sets the target URL to append to the HostURL of the WebServer. This allows multiple requests for the same base URL of the WebServer.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"TimeoutSeconds","comment":"Sets the numb of seconds after which to time out the WebRequest. Default is 0, for no timeout.","valuetype":"Long-Signed","filenamebase":"TimeoutSeconds_Method","fqnprefix":"WebVSE.WebRequest","qn":"Get.TimeoutSeconds","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get TimeoutSeconds As Long","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the numb of seconds after which to time out the WebRequest. Default is 0, for no timeout.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the numb of seconds after which to time out the WebRequest. Default is 0, for no timeout.","inlinecomment":" \t &apos; Sets the numb of seconds after which to time out the WebRequest. Default is 0, for no timeout.","parentclassname":"WebRequest","codesamplehtml":"", "signatureelements":["Property","Get"]},{"label":"Verb","comment":"Sets the HTTP verb for the request, defaulting to &amp;quot;GET&amp;quot;.","valuetype":"String","filenamebase":"Verb_Method","fqnprefix":"WebVSE.WebRequest","qn":"Get.Verb","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Verb As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the HTTP verb for the request, defaulting to &amp;quot;GET&amp;quot;.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the HTTP verb for the request, defaulting to &amp;quot;GET&amp;quot;.","inlinecomment":" \t &apos; Sets the HTTP verb for the request, defaulting to &amp;quot;GET&amp;quot;.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"VerboseLogging","comment":"Whether this Request should create a .log file with verbose logging output from libcurl. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","valuetype":"Boolean","filenamebase":"VerboseLogging_Method","fqnprefix":"WebVSE.WebRequest","qn":"Get.VerboseLogging","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get VerboseLogging As Boolean","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether this Request should create a .log file with verbose logging output from libcurl. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether this Request should create a .log file with verbose logging output from libcurl. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","inlinecomment":" \t &apos; Whether this Request should create a .log file with verbose logging output from libcurl. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"AcceptHeader","comment":"Sets &amp;quot;Accept&amp;quot; HTTP header with relevant value, .g. &amp;quot;application/json&amp;quot;. Default value is &amp;quot;*/&amp;quot;.","valuetype":"String","filenamebase":"AcceptHeader_Method","fqnprefix":"WebVSE.WebRequest","qn":"Set.AcceptHeader","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set AcceptHeader As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets &amp;quot;Accept&amp;quot; HTTP header with relevant value, .g. &amp;quot;application/json&amp;quot;. Default value is &amp;quot;*/&amp;quot;.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets &amp;quot;Accept&amp;quot; HTTP header with relevant value, .g. &amp;quot;application/json&amp;quot;. Default value is &amp;quot;*/&amp;quot;.","inlinecomment":" \t &apos; Sets &amp;quot;Accept&amp;quot; HTTP header with relevant value, .g. &amp;quot;application/json&amp;quot;. Default value is &amp;quot;*/&amp;quot;.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"AuthorizationHeader","comment":"Sets the &amp;quot;Authorization&amp;quot; HTTP header.","valuetype":"String","filenamebase":"AuthorizationHeader_Method","fqnprefix":"WebVSE.WebRequest","qn":"Set.AuthorizationHeader","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set AuthorizationHeader As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the &amp;quot;Authorization&amp;quot; HTTP header.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the &amp;quot;Authorization&amp;quot; HTTP header.","inlinecomment":" \t &apos; Sets the &amp;quot;Authorization&amp;quot; HTTP header.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"ContentType","comment":"Sets the &amp;quot;Content-Type&amp;quot; HTTP header, for the content type being sent in the request, e.g. &amp;quot;application/json&amp;quot;.","valuetype":"String","filenamebase":"ContentType_Method","fqnprefix":"WebVSE.WebRequest","qn":"Set.ContentType","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set ContentType As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the &amp;quot;Content-Type&amp;quot; HTTP header, for the content type being sent in the request, e.g. &amp;quot;application/json&amp;quot;.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the &amp;quot;Content-Type&amp;quot; HTTP header, for the content type being sent in the request, e.g. &amp;quot;application/json&amp;quot;.","inlinecomment":" \t &apos; Sets the &amp;quot;Content-Type&amp;quot; HTTP header, for the content type being sent in the request, e.g. &amp;quot;application/json&amp;quot;.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"RequestBody","comment":"Sets the body content for a POST / PUT / PATCH WebRequest.","valuetype":"String","filenamebase":"RequestBody_Method","fqnprefix":"WebVSE.WebRequest","qn":"Set.RequestBody","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set RequestBody As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the body content for a POST / PUT / PATCH WebRequest.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the body content for a POST / PUT / PATCH WebRequest.","inlinecomment":" \t &apos; Sets the body content for a POST / PUT / PATCH WebRequest.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"Target","comment":"Sets the target URL to append to the HostURL of the WebServer. This allows multiple requests for the same base URL of the WebServer.","valuetype":"String","filenamebase":"Target_Method","fqnprefix":"WebVSE.WebRequest","qn":"Set.Target","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set Target As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the target URL to append to the HostURL of the WebServer. This allows multiple requests for the same base URL of the WebServer.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the target URL to append to the HostURL of the WebServer. This allows multiple requests for the same base URL of the WebServer.","inlinecomment":" \t &apos; Sets the target URL to append to the HostURL of the WebServer. This allows multiple requests for the same base URL of the WebServer.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"TimeoutSeconds","comment":"Sets the numb of seconds after which to time out the WebRequest. Default is 0, for no timeout.","valuetype":"Long-Signed","filenamebase":"TimeoutSeconds_Method","fqnprefix":"WebVSE.WebRequest","qn":"Set.TimeoutSeconds","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set TimeoutSeconds As Long","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the numb of seconds after which to time out the WebRequest. Default is 0, for no timeout.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the numb of seconds after which to time out the WebRequest. Default is 0, for no timeout.","inlinecomment":" \t &apos; Sets the numb of seconds after which to time out the WebRequest. Default is 0, for no timeout.","parentclassname":"WebRequest","codesamplehtml":"", "signatureelements":["Property","Set"]},{"label":"Verb","comment":"Sets the HTTP verb for the request, defaulting to &amp;quot;GET&amp;quot;.","valuetype":"String","filenamebase":"Verb_Method","fqnprefix":"WebVSE.WebRequest","qn":"Set.Verb","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set Verb As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets the HTTP verb for the request, defaulting to &amp;quot;GET&amp;quot;.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets the HTTP verb for the request, defaulting to &amp;quot;GET&amp;quot;.","inlinecomment":" \t &apos; Sets the HTTP verb for the request, defaulting to &amp;quot;GET&amp;quot;.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"VerboseLogging","comment":"Whether this Request should create a .log file with verbose logging output from libcurl. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","valuetype":"Boolean","filenamebase":"VerboseLogging_Method","fqnprefix":"WebVSE.WebRequest","qn":"Set.VerboseLogging","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set VerboseLogging As Boolean","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether this Request should create a .log file with verbose logging output from libcurl. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether this Request should create a .log file with verbose logging output from libcurl. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","inlinecomment":" \t &apos; Whether this Request should create a .log file with verbose logging output from libcurl. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","parentclassname":"WebRequest","codesamplehtml":"", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Set"]}]},{"classname":"WebResponse","comment":"Class for handling responses from web requests.","valuetype":"","filenamebase":"WebResponse_ObjectClass","fqnprefix":"WebVSE","qn":"WebResponse","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","classattribnewnotexposed":"UnexposedNew","projectid":"85258A080053C19485258833005FD0D9","version":3,"classid":"85258A080053C1948525883300600108","lsxclassid":6,"signature":"Public Class WebResponse","modifiers":"Public","classname":"WebResponse","parentclassname":"None","constructorsignature":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class for handling responses from web requests.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class for handling responses from web requests.","inlinecomment":" \t &apos; Class for handling responses from web requests.","codesamplehtml":"", "methods":[{"label":"Base64Decode","comment":"Decodes a base64-encoded string without needing to include HashVSE","valuetype":"String","filenamebase":"Base64Decode_Method","fqnprefix":"WebVSE.WebResponse","qn":"Base64Decode","codesample":"%REM\n    The following code creates a WebServer and WebRequest, sends the request and prints the cookies in the WebResponse.\n%END REM\nDim server as New WebServer()\nDim request as WebRequest\nDim response as WebResponse\nDim convertedResp as String\nserver.protocol = &amp;quot;HTTPS&amp;quot;\nserver.HostURL = &amp;quot;httpstat.us&amp;quot;\nSet request = server.createRequest()\nrequest.target = &amp;quot;200&amp;quot;\nrequest.timeoutSeconds = 5\nSet response = request.send()\nconvertedResp = response.base64Decode(response.contentBody)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function Base64Decode(Input As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Decodes a base64-encoded string without needing to include HashVSE&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Decodes a base64-encoded string without needing to include HashVSE","inlinecomment":" \t &apos; Decodes a base64-encoded string without needing to include HashVSE","parentclassname":"WebResponse","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a WebServer and WebRequest, sends the request and prints the cookies in the WebResponse.&lt;br /&gt;%END REM&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;Dim convertedResp as String&lt;br /&gt;server.protocol = &amp;quot;HTTPS&amp;quot;&lt;br /&gt;server.HostURL = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;Set request = server.createRequest()&lt;br /&gt;request.target = &amp;quot;200&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;Set response = request.send()&lt;br /&gt;convertedResp = response.base64Decode(response.contentBody)", "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"Base64-encoded string to convert","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"WebVSEWebResponseBase64Decode","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base64-encoded string to convert&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base64-encoded string to convert","inlinecomment":" \t &apos; Base64-encoded string to convert"}]},{"label":"AllCookies","comment":"Retrieves all cookies as an array of strings, where the value is a tab-separated cookie containing seven fields:\n- Domain name\n- Include subdomains\n- Path\n- Set over a secure transport\n- Expires at, either seconds since Jan 1st 1970 or 0\n- Name of the cookie\n- Value of the cookie","valuetype":"String","filenamebase":"AllCookies_Method","fqnprefix":"WebVSE.WebResponse","qn":"Get.AllCookies","codesample":"%REM\n    The following code creates a WebServer and WebRequest, sends the request and prints the cookies in the WebResponse.\n%END REM\nDim server as New WebServer()\nDim request as WebRequest\nDim response as WebResponse\nserver.protocol = &amp;quot;HTTPS&amp;quot;\nserver.HostURL = &amp;quot;httpstat.us&amp;quot;\nSet request = server.createRequest()\nrequest.target = &amp;quot;200&amp;quot;\nrequest.timeoutSeconds = 5\nSet response = request.send()\nForAll cookie in response.AllCookies\n    Print &amp;quot;Cookie is &amp;quot; &amp;amp; cookie\nEnd ForAll","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get AllCookies As String Array","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Retrieves all cookies as an array of strings, where the value is a tab-separated cookie containing seven fields:&lt;br /&gt;- Domain name&lt;br /&gt;- Include subdomains&lt;br /&gt;- Path&lt;br /&gt;- Set over a secure transport&lt;br /&gt;- Expires at, either seconds since Jan 1st 1970 or 0&lt;br /&gt;- Name of the cookie&lt;br /&gt;- Value of the cookie&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Retrieves all cookies as an array of strings, where the value is a tab-separated cookie containing seven fields:&lt;br /&gt;- Domain name&lt;br /&gt;- Include subdomains&lt;br /&gt;- Path&lt;br /&gt;- Set over a secure transport&lt;br /&gt;- Expires at, either seconds since Jan 1st 1970 or 0&lt;br /&gt;- Name of the cookie&lt;br /&gt;- Value of the cookie","inlinecomment":" \t &apos; Retrieves all cookies as an array of strings, where the value is a tab-separated cookie containing seven fields:\n- Domain name\n- Include subdomains\n- Path\n- Set over a secure transport\n- Expires at, either seconds since Jan 1st 1970 or 0\n- Name of the cookie\n- Value of the cookie","parentclassname":"WebResponse","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a WebServer and WebRequest, sends the request and prints the cookies in the WebResponse.&lt;br /&gt;%END REM&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;server.protocol = &amp;quot;HTTPS&amp;quot;&lt;br /&gt;server.HostURL = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;Set request = server.createRequest()&lt;br /&gt;request.target = &amp;quot;200&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;Set response = request.send()&lt;br /&gt;ForAll cookie in response.AllCookies&lt;br /&gt;    Print &amp;quot;Cookie is &amp;quot; &amp;amp; cookie&lt;br /&gt;End ForAll", "attributes":["READ_ONLY","Array"], "signatureelements":["Property","Get"]},{"label":"AllHeaders","comment":"Retrieves all HTTP headers as an array of strings, where the header is &amp;quot;NAME: VALUE&amp;quot;","valuetype":"String","filenamebase":"AllHeaders_Method","fqnprefix":"WebVSE.WebResponse","qn":"Get.AllHeaders","codesample":"%REM\n    The following code creates a WebServer and WebRequest, sends the request and prints the headers in the WebResponse.\n%END REM\nDim server as New WebServer()\nDim request as WebRequest\nDim response as WebResponse\nserver.protocol = &amp;quot;HTTPS&amp;quot;\nserver.HostURL = &amp;quot;httpstat.us&amp;quot;\nSet request = server.createRequest()\nrequest.target = &amp;quot;200&amp;quot;\nrequest.timeoutSeconds = 5\nSet response = request.send()\nForAll header in response.AllHeaders\n    Print &amp;quot;Header is &amp;quot; &amp;amp; header\nEnd ForAll","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get AllHeaders As String Array","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Retrieves all HTTP headers as an array of strings, where the header is &amp;quot;NAME: VALUE&amp;quot;&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Retrieves all HTTP headers as an array of strings, where the header is &amp;quot;NAME: VALUE&amp;quot;","inlinecomment":" \t &apos; Retrieves all HTTP headers as an array of strings, where the header is &amp;quot;NAME: VALUE&amp;quot;","parentclassname":"WebResponse","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a WebServer and WebRequest, sends the request and prints the headers in the WebResponse.&lt;br /&gt;%END REM&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;server.protocol = &amp;quot;HTTPS&amp;quot;&lt;br /&gt;server.HostURL = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;Set request = server.createRequest()&lt;br /&gt;request.target = &amp;quot;200&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;Set response = request.send()&lt;br /&gt;ForAll header in response.AllHeaders&lt;br /&gt;    Print &amp;quot;Header is &amp;quot; &amp;amp; header&lt;br /&gt;End ForAll", "attributes":["READ_ONLY","Array"], "signatureelements":["Property","Get"]},{"label":"ContentBody","comment":"Provides access to the response body from the WebResponse.","valuetype":"String","filenamebase":"ContentBody_Method","fqnprefix":"WebVSE.WebResponse","qn":"Get.ContentBody","codesample":"%REM\n    The following code creates a WebServer and WebRequest, sends the request and prints the body in the WebResponse.\n%END REM\nDim server as New WebServer()\nDim request as WebRequest\nDim response as WebResponse\nserver.protocol = &amp;quot;HTTPS&amp;quot;\nserver.HostURL = &amp;quot;httpstat.us&amp;quot;\nSet request = server.createRequest()\nrequest.target = &amp;quot;200&amp;quot;\nrequest.timeoutSeconds = 5\nSet response = request.send()\nPrint response.ContentBody","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ContentBody As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Provides access to the response body from the WebResponse.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Provides access to the response body from the WebResponse.","inlinecomment":" \t &apos; Provides access to the response body from the WebResponse.","parentclassname":"WebResponse","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a WebServer and WebRequest, sends the request and prints the body in the WebResponse.&lt;br /&gt;%END REM&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;server.protocol = &amp;quot;HTTPS&amp;quot;&lt;br /&gt;server.HostURL = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;Set request = server.createRequest()&lt;br /&gt;request.target = &amp;quot;200&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;Set response = request.send()&lt;br /&gt;Print response.ContentBody", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"ContentLength","comment":"Provides easy access to the Content-Length HTTP header of the WebResponse. For chunked encoding, the length will be -1.","valuetype":"Long-Signed","filenamebase":"ContentLength_Method","fqnprefix":"WebVSE.WebResponse","qn":"Get.ContentLength","codesample":"%REM\n    The following code creates a WebServer and WebRequest, sends the request and prints the length of the WebResponse body.\n%END REM\nDim server as New WebServer()\nDim request as WebRequest\nDim response as WebResponse\nserver.protocol = &amp;quot;HTTPS&amp;quot;\nserver.HostURL = &amp;quot;httpstat.us&amp;quot;\nSet request = server.createRequest()\nrequest.target = &amp;quot;200&amp;quot;\nrequest.timeoutSeconds = 5\nSet response = request.send()\nPrint response.ContentLength","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ContentLength As Long","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Provides easy access to the Content-Length HTTP header of the WebResponse. For chunked encoding, the length will be -1.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Provides easy access to the Content-Length HTTP header of the WebResponse. For chunked encoding, the length will be -1.","inlinecomment":" \t &apos; Provides easy access to the Content-Length HTTP header of the WebResponse. For chunked encoding, the length will be -1.","parentclassname":"WebResponse","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a WebServer and WebRequest, sends the request and prints the length of the WebResponse body.&lt;br /&gt;%END REM&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;server.protocol = &amp;quot;HTTPS&amp;quot;&lt;br /&gt;server.HostURL = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;Set request = server.createRequest()&lt;br /&gt;request.target = &amp;quot;200&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;Set response = request.send()&lt;br /&gt;Print response.ContentLength", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"ContentType","comment":"Provides easy access to the Content-Type HTTP header of the WebResponse.","valuetype":"String","filenamebase":"ContentType_Method","fqnprefix":"WebVSE.WebResponse","qn":"Get.ContentType","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ContentType As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Provides easy access to the Content-Type HTTP header of the WebResponse.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Provides easy access to the Content-Type HTTP header of the WebResponse.","inlinecomment":" \t &apos; Provides easy access to the Content-Type HTTP header of the WebResponse.","parentclassname":"WebResponse","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"ResponseCode","comment":"Provides access to the response code for the WebResponse.","valuetype":"Integer-Signed","filenamebase":"ResponseCode_Method","fqnprefix":"WebVSE.WebResponse","qn":"Get.ResponseCode","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ResponseCode As Integer","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Provides access to the response code for the WebResponse.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Provides access to the response code for the WebResponse.","inlinecomment":" \t &apos; Provides access to the response code for the WebResponse.","parentclassname":"WebResponse","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"TransactionMicroseconds","comment":"Provides access to the duration the WebRequest took to complete in milliseconds.","valuetype":"Double","filenamebase":"TransactionMicroseconds_Method","fqnprefix":"WebVSE.WebResponse","qn":"Get.TransactionMicroseconds","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get TransactionMicroseconds As Double","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Provides access to the duration the WebRequest took to complete in milliseconds.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Provides access to the duration the WebRequest took to complete in milliseconds.","inlinecomment":" \t &apos; Provides access to the duration the WebRequest took to complete in milliseconds.","parentclassname":"WebResponse","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]}]},{"classname":"WebServer","comment":"Class for holding generic server information for web requests.","valuetype":"","filenamebase":"WebServer_ObjectClass","fqnprefix":"WebVSE","qn":"WebServer","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","projectid":"85258A080053C19485258833005FD0D9","version":3,"classid":"85258A080053C19485258833005FE4B9","lsxclassid":2,"signature":"Public Class WebServer","modifiers":"Public","classname":"WebServer","parentclassname":"None","constructorsignature":"Function New() As WebServer","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class for holding generic server information for web requests.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class for holding generic server information for web requests.","inlinecomment":" \t &apos; Class for holding generic server information for web requests.","codesamplehtml":"", "methods":[{"label":"CreateRequest","comment":"Creates a WebRequest for individual requests to this WebServer&amp;apos;s HostURL","valuetype":"WebRequest","filenamebase":"CreateRequest_Method","fqnprefix":"WebVSE.WebServer","qn":"CreateRequest","codesample":"%REM\n    The following code creates a WebServer, WebRequest and makes the call, returning a WebResponse.\n%END REM\nDim server as New WebServer()\nDim request as WebRequest\nserver.protocol = &amp;quot;HTTPS&amp;quot;\nserver.HostURL = &amp;quot;httpstat.us&amp;quot;\nSet request = server.createRequest()\nrequest.target = &amp;quot;200&amp;quot;\nrequest.timeoutSeconds = 5\nReturn request.send()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function CreateRequest() As WebRequest","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a WebRequest for individual requests to this WebServer&amp;apos;s HostURL&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a WebRequest for individual requests to this WebServer&amp;apos;s HostURL","inlinecomment":" \t &apos; Creates a WebRequest for individual requests to this WebServer&amp;apos;s HostURL","parentclassname":"WebServer","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a WebServer, WebRequest and makes the call, returning a WebResponse.&lt;br /&gt;%END REM&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;server.protocol = &amp;quot;HTTPS&amp;quot;&lt;br /&gt;server.HostURL = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;Set request = server.createRequest()&lt;br /&gt;request.target = &amp;quot;200&amp;quot;&lt;br /&gt;request.timeoutSeconds = 5&lt;br /&gt;Return request.send()", "signatureelements":["Function"]},{"label":"CreateRequestWithURL","comment":"Populates a WebRequest and WebServer with a full URL including protocol, host URL, target path and query string.","valuetype":"WebRequest","filenamebase":"CreateRequestWithURL_Method","fqnprefix":"WebVSE.WebServer","qn":"CreateRequestWithURL","codesample":"%REM\n    The following code creates a WebServer an URLBuilder, then creates a WebRequest from the URLBuilder.\n%END REM\nDim response as WebResponse\nDim server as New WebServer()\nDim request as WebRequest\nDim builder as New URLBuilder()\nbuilder.isHttps = True\nbuilder.targetHost = &amp;quot;httpstat.us&amp;quot;\nbuilder.targetPath = &amp;quot;200&amp;quot;\nCall builder.addUrlParameter(&amp;quot;sleep&amp;quot;, &amp;quot;1000&amp;quot;)\nSet request = server.createRequestWithUrl(builder.toString(False))","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(FullURL As String)","signature":"Function CreateRequestWithURL(FullURL As String) As WebRequest","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Populates a WebRequest and WebServer with a full URL including protocol, host URL, target path and query string.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Populates a WebRequest and WebServer with a full URL including protocol, host URL, target path and query string.","inlinecomment":" \t &apos; Populates a WebRequest and WebServer with a full URL including protocol, host URL, target path and query string.","parentclassname":"WebServer","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a WebServer an URLBuilder, then creates a WebRequest from the URLBuilder.&lt;br /&gt;%END REM&lt;br /&gt;Dim response as WebResponse&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Dim request as WebRequest&lt;br /&gt;Dim builder as New URLBuilder()&lt;br /&gt;builder.isHttps = True&lt;br /&gt;builder.targetHost = &amp;quot;httpstat.us&amp;quot;&lt;br /&gt;builder.targetPath = &amp;quot;200&amp;quot;&lt;br /&gt;Call builder.addUrlParameter(&amp;quot;sleep&amp;quot;, &amp;quot;1000&amp;quot;)&lt;br /&gt;Set request = server.createRequestWithUrl(builder.toString(False))", "signatureelements":["Function"], "arguments":[{"label":"FullURL","comment":"URL to create WebRequest with","valuetype":"String","filenamebase":"FullURL_ValuedElement","fqnprefix":"WebVSEWebServerCreateRequestWithURL","qn":"FullURL","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;URL to create WebRequest with&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"URL to create WebRequest with","inlinecomment":" \t &apos; URL to create WebRequest with"}]},{"label":"New","comment":"","valuetype":"WebServer","filenamebase":"New_Method","fqnprefix":"WebVSE.WebServer","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As WebServer","modifiers":"","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"WebServer","codesamplehtml":"", "signatureelements":["Function"]},{"label":"RegisterVSEPath","comment":"Internal method used to register the VSE with the runtime registry.","valuetype":"Boolean","filenamebase":"RegisterVSEPath_Method","fqnprefix":"WebVSE.WebServer","qn":"RegisterVSEPath","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function RegisterVSEPath() As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Internal method used to register the VSE with the runtime registry.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Internal method used to register the VSE with the runtime registry.","inlinecomment":" \t &apos; Internal method used to register the VSE with the runtime registry.","parentclassname":"WebServer","codesamplehtml":"", "signatureelements":["Function"]},{"label":"URLdecode","comment":"URL decodes a string.","valuetype":"String","filenamebase":"URLdecode_Method","fqnprefix":"WebVSE.WebServer","qn":"URLdecode","codesample":"%REM\n    The following code decodes a URL-encoded string.\n%END REM\nDim WebServer as New WebServer()\nPrint WebServer.URLDecode(&amp;quot;Hello+World&amp;quot;)   &amp;apos;Prints &amp;quot;Hello World&amp;quot;","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function URLdecode(Input As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;URL decodes a string.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"URL decodes a string.","inlinecomment":" \t &apos; URL decodes a string.","parentclassname":"WebServer","codesamplehtml":"%REM&lt;br /&gt;    The following code decodes a URL-encoded string.&lt;br /&gt;%END REM&lt;br /&gt;Dim WebServer as New WebServer()&lt;br /&gt;Print WebServer.URLDecode(&amp;quot;Hello+World&amp;quot;)   &amp;apos;Prints &amp;quot;Hello World&amp;quot;", "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"String to decode","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"WebVSEWebServerURLdecode","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to decode&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to decode","inlinecomment":" \t &apos; String to decode"}]},{"label":"URLencode","comment":"URL encodes a string. This method does not encode alphanumerics or - _ . ~ / ? = &amp;amp; :","valuetype":"String","filenamebase":"URLencode_Method","fqnprefix":"WebVSE.WebServer","qn":"URLencode","codesample":"%REM\n    The following code URL-encodes a string.\n%END REM\nDim server as New WebServer()\nPrint server.URLEncode(&amp;quot;Hello World&amp;quot;)   &amp;apos; Prints &amp;quot;Hello+World&amp;quot;","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function URLencode(Input As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;URL encodes a string. This method does not encode alphanumerics or - _ . ~ / ? = &amp;amp; :&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"URL encodes a string. This method does not encode alphanumerics or - _ . ~ / ? = &amp;amp; :","inlinecomment":" \t &apos; URL encodes a string. This method does not encode alphanumerics or - _ . ~ / ? = &amp;amp; :","parentclassname":"WebServer","codesamplehtml":"%REM&lt;br /&gt;    The following code URL-encodes a string.&lt;br /&gt;%END REM&lt;br /&gt;Dim server as New WebServer()&lt;br /&gt;Print server.URLEncode(&amp;quot;Hello World&amp;quot;)   &amp;apos; Prints &amp;quot;Hello+World&amp;quot;", "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"String to URL encode","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"WebVSEWebServerURLencode","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to URL encode&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to URL encode","inlinecomment":" \t &apos; String to URL encode"}]},{"label":"CertificatePath","comment":"Path to a .crt file containing certificates for the server to connect to, if not on the PATH. Without a valid certificate or unless SSLHostValidationOn is set to False, the request will return a status 0, if the server requires SSL verification.","valuetype":"String","filenamebase":"CertificatePath_Method","fqnprefix":"WebVSE.WebServer","qn":"Get.CertificatePath","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get CertificatePath As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to a .crt file containing certificates for the server to connect to, if not on the PATH. Without a valid certificate or unless SSLHostValidationOn is set to False, the request will return a status 0, if the server requires SSL verification.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to a .crt file containing certificates for the server to connect to, if not on the PATH. Without a valid certificate or unless SSLHostValidationOn is set to False, the request will return a status 0, if the server requires SSL verification.","inlinecomment":" \t &apos; Path to a .crt file containing certificates for the server to connect to, if not on the PATH. Without a valid certificate or unless SSLHostValidationOn is set to False, the request will return a status 0, if the server requires SSL verification.","parentclassname":"WebServer","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"HostURL","comment":"Base URL to use for all WebRequests created from this WebServer object. This gets set from a URLBuilder when calling WebServer.createRequestWithUrl().","valuetype":"String","filenamebase":"HostURL_Method","fqnprefix":"WebVSE.WebServer","qn":"Get.HostURL","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get HostURL As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base URL to use for all WebRequests created from this WebServer object. This gets set from a URLBuilder when calling WebServer.createRequestWithUrl().&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base URL to use for all WebRequests created from this WebServer object. This gets set from a URLBuilder when calling WebServer.createRequestWithUrl().","inlinecomment":" \t &apos; Base URL to use for all WebRequests created from this WebServer object. This gets set from a URLBuilder when calling WebServer.createRequestWithUrl().","parentclassname":"WebServer","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"LibCurlVersion","comment":"The version of Libcurl used by this VSE","valuetype":"String","filenamebase":"LibCurlVersion_Method","fqnprefix":"WebVSE.WebServer","qn":"Get.LibCurlVersion","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get LibCurlVersion As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;The version of Libcurl used by this VSE&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"The version of Libcurl used by this VSE","inlinecomment":" \t &apos; The version of Libcurl used by this VSE","parentclassname":"WebServer","codesamplehtml":"", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"PreserveCookies","comment":"Whether or not cookies received from WebResponses should be preserved between WebRequests made from this WebServer. Default value is False.","valuetype":"Boolean","filenamebase":"PreserveCookies_Method","fqnprefix":"WebVSE.WebServer","qn":"Get.PreserveCookies","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get PreserveCookies As Boolean","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether or not cookies received from WebResponses should be preserved between WebRequests made from this WebServer. Default value is False.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether or not cookies received from WebResponses should be preserved between WebRequests made from this WebServer. Default value is False.","inlinecomment":" \t &apos; Whether or not cookies received from WebResponses should be preserved between WebRequests made from this WebServer. Default value is False.","parentclassname":"WebServer","codesamplehtml":"", "signatureelements":["Property","Get"]},{"label":"Protocol","comment":"Protocol to use when making WebRequests. Default is &amp;quot;HTTP&amp;quot;.","valuetype":"String","filenamebase":"Protocol_Method","fqnprefix":"WebVSE.WebServer","qn":"Get.Protocol","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Protocol As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Protocol to use when making WebRequests. Default is &amp;quot;HTTP&amp;quot;.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Protocol to use when making WebRequests. Default is &amp;quot;HTTP&amp;quot;.","inlinecomment":" \t &apos; Protocol to use when making WebRequests. Default is &amp;quot;HTTP&amp;quot;.","parentclassname":"WebServer","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"SSLHostValidationOn","comment":"Turn on or off SSL host validation. Without a valid certificate or unless SSLHostValidationOn is set to False, the request will return a status 0, if the server requires SSL verification. Settng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.\nDefault value is True.","valuetype":"Boolean","filenamebase":"SSLHostValidationOn_Method","fqnprefix":"WebVSE.WebServer","qn":"Get.SSLHostValidationOn","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get SSLHostValidationOn As Boolean","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Turn on or off SSL host validation. Without a valid certificate or unless SSLHostValidationOn is set to False, the request will return a status 0, if the server requires SSL verification. Settng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.&lt;br /&gt;Default value is True.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Turn on or off SSL host validation. Without a valid certificate or unless SSLHostValidationOn is set to False, the request will return a status 0, if the server requires SSL verification. Settng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.&lt;br /&gt;Default value is True.","inlinecomment":" \t &apos; Turn on or off SSL host validation. Without a valid certificate or unless SSLHostValidationOn is set to False, the request will return a status 0, if the server requires SSL verification. Settng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.\nDefault value is True.","parentclassname":"WebServer","codesamplehtml":"", "signatureelements":["Property","Get"]},{"label":"VSEVersion","comment":"Returns VSE version","valuetype":"String","filenamebase":"VSEVersion_Method","fqnprefix":"WebVSE.WebServer","qn":"Get.VSEVersion","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get VSEVersion As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns VSE version&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns VSE version","inlinecomment":" \t &apos; Returns VSE version","parentclassname":"WebServer","codesamplehtml":"", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"CertificatePath","comment":"Path to a .crt file containing certificates for the server to connect to, if not on the PATH. Without a valid certificate or unless SSLHostValidationOn is set to False, the request will return a status 0, if the server requires SSL verification.","valuetype":"String","filenamebase":"CertificatePath_Method","fqnprefix":"WebVSE.WebServer","qn":"Set.CertificatePath","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set CertificatePath As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to a .crt file containing certificates for the server to connect to, if not on the PATH. Without a valid certificate or unless SSLHostValidationOn is set to False, the request will return a status 0, if the server requires SSL verification.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to a .crt file containing certificates for the server to connect to, if not on the PATH. Without a valid certificate or unless SSLHostValidationOn is set to False, the request will return a status 0, if the server requires SSL verification.","inlinecomment":" \t &apos; Path to a .crt file containing certificates for the server to connect to, if not on the PATH. Without a valid certificate or unless SSLHostValidationOn is set to False, the request will return a status 0, if the server requires SSL verification.","parentclassname":"WebServer","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"HostURL","comment":"Base URL to use for all WebRequests created from this WebServer object. This gets set from a URLBuilder when calling WebServer.createRequestWithUrl().","valuetype":"String","filenamebase":"HostURL_Method","fqnprefix":"WebVSE.WebServer","qn":"Set.HostURL","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set HostURL As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base URL to use for all WebRequests created from this WebServer object. This gets set from a URLBuilder when calling WebServer.createRequestWithUrl().&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base URL to use for all WebRequests created from this WebServer object. This gets set from a URLBuilder when calling WebServer.createRequestWithUrl().","inlinecomment":" \t &apos; Base URL to use for all WebRequests created from this WebServer object. This gets set from a URLBuilder when calling WebServer.createRequestWithUrl().","parentclassname":"WebServer","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"PreserveCookies","comment":"Whether or not cookies received from WebResponses should be preserved between WebRequests made from this WebServer. Default value is False.","valuetype":"Boolean","filenamebase":"PreserveCookies_Method","fqnprefix":"WebVSE.WebServer","qn":"Set.PreserveCookies","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set PreserveCookies As Boolean","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether or not cookies received from WebResponses should be preserved between WebRequests made from this WebServer. Default value is False.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether or not cookies received from WebResponses should be preserved between WebRequests made from this WebServer. Default value is False.","inlinecomment":" \t &apos; Whether or not cookies received from WebResponses should be preserved between WebRequests made from this WebServer. Default value is False.","parentclassname":"WebServer","codesamplehtml":"", "signatureelements":["Property","Set"]},{"label":"Protocol","comment":"Protocol to use when making WebRequests. Default is &amp;quot;HTTP&amp;quot;.","valuetype":"String","filenamebase":"Protocol_Method","fqnprefix":"WebVSE.WebServer","qn":"Set.Protocol","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set Protocol As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Protocol to use when making WebRequests. Default is &amp;quot;HTTP&amp;quot;.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Protocol to use when making WebRequests. Default is &amp;quot;HTTP&amp;quot;.","inlinecomment":" \t &apos; Protocol to use when making WebRequests. Default is &amp;quot;HTTP&amp;quot;.","parentclassname":"WebServer","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"SSLHostValidationOn","comment":"Turn on or off SSL host validation. Without a valid certificate or unless SSLHostValidationOn is set to False, the request will return a status 0, if the server requires SSL verification. Settng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.\nDefault value is True.","valuetype":"Boolean","filenamebase":"SSLHostValidationOn_Method","fqnprefix":"WebVSE.WebServer","qn":"Set.SSLHostValidationOn","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set SSLHostValidationOn As Boolean","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Turn on or off SSL host validation. Without a valid certificate or unless SSLHostValidationOn is set to False, the request will return a status 0, if the server requires SSL verification. Settng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.&lt;br /&gt;Default value is True.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Turn on or off SSL host validation. Without a valid certificate or unless SSLHostValidationOn is set to False, the request will return a status 0, if the server requires SSL verification. Settng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.&lt;br /&gt;Default value is True.","inlinecomment":" \t &apos; Turn on or off SSL host validation. Without a valid certificate or unless SSLHostValidationOn is set to False, the request will return a status 0, if the server requires SSL verification. Settng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.\nDefault value is True.","parentclassname":"WebServer","codesamplehtml":"", "signatureelements":["Property","Set"]}]}], "platforms":["LINUX","W64"]}
