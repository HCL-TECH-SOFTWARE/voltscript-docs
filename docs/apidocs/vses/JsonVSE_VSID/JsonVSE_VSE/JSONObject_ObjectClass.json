{"classname":"JSONObject","comment":"Object for holding JSON objects, JSON arrays or scalars","valuetype":"","filenamebase":"JSONObject_ObjectClass","fqnprefix":"JsonVSE","qn":"JSONObject","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"JSONObject","colindextype":"Integer","projectid":"85258A0800611BA4852587F200501561","version":3,"classid":"85258A0800611BA4852587F2005023B9","lsxclassid":2,"signature":"Public Class JSONObject","modifiers":"Public","classname":"JSONObject","parentclassname":"None","constructorsignature":"Function New(IsArray As Boolean) As JSONObject","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Object for holding JSON objects, JSON arrays or scalars&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Object for holding JSON objects, JSON arrays or scalars","inlinecomment":" \t &apos; Object for holding JSON objects, JSON arrays or scalars","codesamplehtml":"", "methods":[{"label":"AppendToJSONArray","comment":"For JsonObjects that are arrays, appends a value to the array. For new JsonObjects, it appends the value to the array and defines it as an array. Returns the current JsonObject instance for fluid coding.","valuetype":"JSONObject","filenamebase":"AppendToJSONArray_Method","fqnprefix":"JsonVSE.JSONObject","qn":"AppendToJSONArray","codesample":"%REM\n    The following code appends a string of JSON arrays into an existing JsonObject.\n%END REM\nDim jp as new JsonParser\nCall jp.loadFromJson(|[]|)\nDim arrayjo as JsonObject\nSet arrayJo = jp.getrootobject()\nCall arrayJo.appendToJsonArray(&amp;quot;Hello&amp;quot;)\nCall arrayJo.appendToJsonArray(&amp;quot;New&amp;quot;)\nCall arrayJo.appendToJsonArray(&amp;quot;World&amp;quot;)\nPrint arrayJo.toString(false)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Value As Variant)","signature":"Function AppendToJSONArray(Value As Variant) As JSONObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;For JsonObjects that are arrays, appends a value to the array. For new JsonObjects, it appends the value to the array and defines it as an array. Returns the current JsonObject instance for fluid coding.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"For JsonObjects that are arrays, appends a value to the array. For new JsonObjects, it appends the value to the array and defines it as an array. Returns the current JsonObject instance for fluid coding.","inlinecomment":" \t &apos; For JsonObjects that are arrays, appends a value to the array. For new JsonObjects, it appends the value to the array and defines it as an array. Returns the current JsonObject instance for fluid coding.","parentclassname":"JSONObject","codesamplehtml":"%REM&lt;br /&gt;    The following code appends a string of JSON arrays into an existing JsonObject.&lt;br /&gt;%END REM&lt;br /&gt;Dim jp as new JsonParser&lt;br /&gt;Call jp.loadFromJson(|[]|)&lt;br /&gt;Dim arrayjo as JsonObject&lt;br /&gt;Set arrayJo = jp.getrootobject()&lt;br /&gt;Call arrayJo.appendToJsonArray(&amp;quot;Hello&amp;quot;)&lt;br /&gt;Call arrayJo.appendToJsonArray(&amp;quot;New&amp;quot;)&lt;br /&gt;Call arrayJo.appendToJsonArray(&amp;quot;World&amp;quot;)&lt;br /&gt;Print arrayJo.toString(false)", "signatureelements":["Function"], "arguments":[{"label":"Value","comment":"Value to add to the array","valuetype":"Variant","filenamebase":"Value_ValuedElement","fqnprefix":"JsonVSEJSONObjectAppendToJSONArray","qn":"Value","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value to add to the array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value to add to the array","inlinecomment":" \t &apos; Value to add to the array"}]},{"label":"FindObjectByPath","comment":"Finds a JsonObject within the current JsonObject using an array of labels to navigate down the hierarchy.","valuetype":"JSONObject","filenamebase":"FindObjectByPath_Method","fqnprefix":"JsonVSE.JSONObject","qn":"FindObjectByPath","codesample":"%REM\n    The following example loads a string of JSON and finds the element at &amp;quot;address/addr1&amp;quot;\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as JsonObject\nDim json as String\nDim path(1) as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\npath(0) = &amp;quot;address&amp;quot;\npath(1) = &amp;quot;add1&amp;quot;\nSet childObj = jsonObj.findObjectByPath(path)\nPrint childObj.toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Labels As String Array)","signature":"Function FindObjectByPath(Labels As String Array) As JSONObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Finds a JsonObject within the current JsonObject using an array of labels to navigate down the hierarchy.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Finds a JsonObject within the current JsonObject using an array of labels to navigate down the hierarchy.","inlinecomment":" \t &apos; Finds a JsonObject within the current JsonObject using an array of labels to navigate down the hierarchy.","parentclassname":"JSONObject","codesamplehtml":"%REM&lt;br /&gt;    The following example loads a string of JSON and finds the element at &amp;quot;address/addr1&amp;quot;&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New JsonParser()&lt;br /&gt;Dim jsonObj as JsonObject&lt;br /&gt;Dim childObj as JsonObject&lt;br /&gt;Dim json as String&lt;br /&gt;Dim path(1) as String&lt;br /&gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&lt;br /&gt;Call parser.loadFromJson(json)&lt;br /&gt;Set jsonObj = parser.getRootObject()&lt;br /&gt;path(0) = &amp;quot;address&amp;quot;&lt;br /&gt;path(1) = &amp;quot;add1&amp;quot;&lt;br /&gt;Set childObj = jsonObj.findObjectByPath(path)&lt;br /&gt;Print childObj.toString(True)", "signatureelements":["Function"], "arguments":[{"label":"Labels","comment":"Array of labels to use to find the JsonObject","valuetype":"String","filenamebase":"Labels_ValuedElement","fqnprefix":"JsonVSEJSONObjectFindObjectByPath","qn":"Labels","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array of labels to use to find the JsonObject&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array of labels to use to find the JsonObject","inlinecomment":" \t &apos; Array of labels to use to find the JsonObject", "attributes":["Array"]}]},{"label":"GetChild","comment":"Gets a child from the current JsonObject using its label. Returns an error 404 if the child JsonObject cannot be found.","valuetype":"JSONObject","filenamebase":"GetChild_Method","fqnprefix":"JsonVSE.JSONObject","qn":"GetChild","codesample":"%REM\n   The following example loads a string of JSON, gets the &amp;quot;children&amp;quot; element and pretty-prints it.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim json as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nPrint jsonObj.getChild(&amp;quot;children&amp;quot;).toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Label As String)","signature":"Function GetChild(Label As String) As JSONObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets a child from the current JsonObject using its label. Returns an error 404 if the child JsonObject cannot be found.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets a child from the current JsonObject using its label. Returns an error 404 if the child JsonObject cannot be found.","inlinecomment":" \t &apos; Gets a child from the current JsonObject using its label. Returns an error 404 if the child JsonObject cannot be found.","parentclassname":"JSONObject","codesamplehtml":"%REM&lt;br /&gt;   The following example loads a string of JSON, gets the &amp;quot;children&amp;quot; element and pretty-prints it.&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New JsonParser()&lt;br /&gt;Dim jsonObj as JsonObject&lt;br /&gt;Dim json as String&lt;br /&gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&lt;br /&gt;Call parser.loadFromJson(json)&lt;br /&gt;Set jsonObj = parser.getRootObject()&lt;br /&gt;Print jsonObj.getChild(&amp;quot;children&amp;quot;).toString(True)", "signatureelements":["Function"], "arguments":[{"label":"Label","comment":"Label of child","valuetype":"String","filenamebase":"Label_ValuedElement","fqnprefix":"JsonVSEJSONObjectGetChild","qn":"Label","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Label of child&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Label of child","inlinecomment":" \t &apos; Label of child"}]},{"label":"GetChildren","comment":"Gets all the children of the current JsonObject, as an array of JsonObjects. Only valid is the JsonObject is an object or an array.","valuetype":"JSONObject","filenamebase":"GetChildren_Method","fqnprefix":"JsonVSE.JSONObject","qn":"GetChildren","codesample":"%REM\n    The following code loads a string of JSON and prints the type of all direct children.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim json as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nForAll child in jsonObj.getChildren()\n   Print child.jsonType\nEnd ForAll","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function GetChildren() As JSONObject Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets all the children of the current JsonObject, as an array of JsonObjects. Only valid is the JsonObject is an object or an array.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets all the children of the current JsonObject, as an array of JsonObjects. Only valid is the JsonObject is an object or an array.","inlinecomment":" \t &apos; Gets all the children of the current JsonObject, as an array of JsonObjects. Only valid is the JsonObject is an object or an array.","parentclassname":"JSONObject","codesamplehtml":"%REM&lt;br /&gt;    The following code loads a string of JSON and prints the type of all direct children.&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New JsonParser()&lt;br /&gt;Dim jsonObj as JsonObject&lt;br /&gt;Dim json as String&lt;br /&gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&lt;br /&gt;Call parser.loadFromJson(json)&lt;br /&gt;Set jsonObj = parser.getRootObject()&lt;br /&gt;ForAll child in jsonObj.getChildren()&lt;br /&gt;   Print child.jsonType&lt;br /&gt;End ForAll", "attributes":["Array"], "signatureelements":["Function"]},{"label":"GetDescendantPath","comment":"Retrieves a descendent JSONObject from another JSONObject using a specified path to the child object. ","valuetype":"JSONObject","filenamebase":"GetDescendantPath_Method","fqnprefix":"JsonVSE.JSONObject","qn":"GetDescendantPath","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Path As String, Delimiter As String)","signature":"Function GetDescendantPath(Path As String, Delimiter As String) As JSONObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Retrieves a descendent JSONObject from another JSONObject using a specified path to the child object. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Retrieves a descendent JSONObject from another JSONObject using a specified path to the child object. ","inlinecomment":" \t &apos; Retrieves a descendent JSONObject from another JSONObject using a specified path to the child object. ","parentclassname":"JSONObject","codesamplehtml":"", "signatureelements":["Function"], "arguments":[{"label":"Path","comment":"Delimited path to the desired item","valuetype":"String","filenamebase":"Path_ValuedElement","fqnprefix":"JsonVSEJSONObjectGetDescendantPath","qn":"Path","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Delimited path to the desired item&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Delimited path to the desired item","inlinecomment":" \t &apos; Delimited path to the desired item"},{"label":"Delimiter","comment":"Character used as a delimiter in Path. Defaults to &amp;quot;/&amp;quot;","valuetype":"String","filenamebase":"Delimiter_ValuedElement","fqnprefix":"JsonVSEJSONObjectGetDescendantPath","qn":"Delimiter","argumentindex":2,"optionalvalue":"LIT_STR(&quot;/&quot;)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Character used as a delimiter in Path. Defaults to &amp;quot;/&amp;quot;&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Character used as a delimiter in Path. Defaults to &amp;quot;/&amp;quot;","inlinecomment":" \t &apos; Character used as a delimiter in Path. Defaults to &amp;quot;/&amp;quot;", "attributes":["CONST","OPTIONAL"]}]},{"label":"InsertObject","comment":"Inserts another JsonObject into an existing JsonObject, with an optional label. If no label is provided, the label of the JsonObject is used. Returns the current JsonObject instance for fluid coding.","valuetype":"JSONObject","filenamebase":"InsertObject_Method","fqnprefix":"JsonVSE.JSONObject","qn":"InsertObject","codesample":"%REM\n    The following code inserts a certain JsonObject into another JsonObject.\n%END REM\nDim jo as New JsonObject\nDim childJo as New JsonObject\nCall childJo.insertValue(&amp;quot;boolean&amp;quot;, true)\nCall jo.insertObject(childJo, &amp;quot;childObj&amp;quot;)\nPrint jo.toString(false)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Object As JSONObject, Label As String)","signature":"Function InsertObject(Object As JSONObject, Label As String) As JSONObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Inserts another JsonObject into an existing JsonObject, with an optional label. If no label is provided, the label of the JsonObject is used. Returns the current JsonObject instance for fluid coding.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Inserts another JsonObject into an existing JsonObject, with an optional label. If no label is provided, the label of the JsonObject is used. Returns the current JsonObject instance for fluid coding.","inlinecomment":" \t &apos; Inserts another JsonObject into an existing JsonObject, with an optional label. If no label is provided, the label of the JsonObject is used. Returns the current JsonObject instance for fluid coding.","parentclassname":"JSONObject","codesamplehtml":"%REM&lt;br /&gt;    The following code inserts a certain JsonObject into another JsonObject.&lt;br /&gt;%END REM&lt;br /&gt;Dim jo as New JsonObject&lt;br /&gt;Dim childJo as New JsonObject&lt;br /&gt;Call childJo.insertValue(&amp;quot;boolean&amp;quot;, true)&lt;br /&gt;Call jo.insertObject(childJo, &amp;quot;childObj&amp;quot;)&lt;br /&gt;Print jo.toString(false)", "signatureelements":["Function"], "arguments":[{"label":"Object","comment":"JsonObject to insert","valuetype":"JSONObject","filenamebase":"Object_ValuedElement","fqnprefix":"JsonVSEJSONObjectInsertObject","qn":"Object","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JsonObject to insert&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JsonObject to insert","inlinecomment":" \t &apos; JsonObject to insert"},{"label":"Label","comment":"Label to use when inserting","valuetype":"String","filenamebase":"Label_ValuedElement","fqnprefix":"JsonVSEJSONObjectInsertObject","qn":"Label","argumentindex":2,"optionalvalue":"LIT_STR(&quot;&quot;)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Label to use when inserting&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Label to use when inserting","inlinecomment":" \t &apos; Label to use when inserting", "attributes":["CONST","OPTIONAL"]}]},{"label":"InsertValue","comment":"Inserts a value into a JsonObject using th label defined. Returns the current JsonObject instance for fluid coding.","valuetype":"JSONObject","filenamebase":"InsertValue_Method","fqnprefix":"JsonVSE.JSONObject","qn":"InsertValue","codesample":"%REM\n    The following code inserts a value that corresponds to the defined label into an existing JsonObect.\n%END REM\nDim jo as New JsonObject\nDim jp as New JSONParser\nDim jsonStr as String\njsonStr = |{&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}|\nCall jp.loadFromJSON(helloWorld)\nSet jo = jp.getrootobject\nCall jo.insertValue(&amp;quot;John&amp;quot;, &amp;quot;Doe&amp;quot;)\nPrint jo.toString(false)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Label As String, Value As Variant)","signature":"Function InsertValue(Label As String, Value As Variant) As JSONObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Inserts a value into a JsonObject using th label defined. Returns the current JsonObject instance for fluid coding.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Inserts a value into a JsonObject using th label defined. Returns the current JsonObject instance for fluid coding.","inlinecomment":" \t &apos; Inserts a value into a JsonObject using th label defined. Returns the current JsonObject instance for fluid coding.","parentclassname":"JSONObject","codesamplehtml":"%REM&lt;br /&gt;    The following code inserts a value that corresponds to the defined label into an existing JsonObect.&lt;br /&gt;%END REM&lt;br /&gt;Dim jo as New JsonObject&lt;br /&gt;Dim jp as New JSONParser&lt;br /&gt;Dim jsonStr as String&lt;br /&gt;jsonStr = |{&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}|&lt;br /&gt;Call jp.loadFromJSON(helloWorld)&lt;br /&gt;Set jo = jp.getrootobject&lt;br /&gt;Call jo.insertValue(&amp;quot;John&amp;quot;, &amp;quot;Doe&amp;quot;)&lt;br /&gt;Print jo.toString(false)", "signatureelements":["Function"], "arguments":[{"label":"Label","comment":"Label to insert as","valuetype":"String","filenamebase":"Label_ValuedElement","fqnprefix":"JsonVSEJSONObjectInsertValue","qn":"Label","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Label to insert as&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Label to insert as","inlinecomment":" \t &apos; Label to insert as"},{"label":"Value","comment":"Value to add, either a scalar or another JsonObject","valuetype":"Variant","filenamebase":"Value_ValuedElement","fqnprefix":"JsonVSEJSONObjectInsertValue","qn":"Value","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value to add, either a scalar or another JsonObject&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value to add, either a scalar or another JsonObject","inlinecomment":" \t &apos; Value to add, either a scalar or another JsonObject"}]},{"label":"IsArray","comment":"Returns whether or not a given JsonObject is an array.","valuetype":"Boolean","filenamebase":"IsArray_Method","fqnprefix":"JsonVSE.JSONObject","qn":"IsArray","codesample":"%REM\n    The following code loads a string of JSON and checks whether elements are arrays.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim json as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nPrint jsonObj.isArray()                        &amp;apos;False\nPrint jsonObj.getChild(&amp;quot;children&amp;quot;).isArray()   &amp;apos;True","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function IsArray() As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns whether or not a given JsonObject is an array.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns whether or not a given JsonObject is an array.","inlinecomment":" \t &apos; Returns whether or not a given JsonObject is an array.","parentclassname":"JSONObject","codesamplehtml":"%REM&lt;br /&gt;    The following code loads a string of JSON and checks whether elements are arrays.&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New JsonParser()&lt;br /&gt;Dim jsonObj as JsonObject&lt;br /&gt;Dim json as String&lt;br /&gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&lt;br /&gt;Call parser.loadFromJson(json)&lt;br /&gt;Set jsonObj = parser.getRootObject()&lt;br /&gt;Print jsonObj.isArray()                        &amp;apos;False&lt;br /&gt;Print jsonObj.getChild(&amp;quot;children&amp;quot;).isArray()   &amp;apos;True", "signatureelements":["Function"]},{"label":"IsBoolean","comment":"Returns whether or not a JsonObject is a boolean.","valuetype":"Boolean","filenamebase":"IsBoolean_Method","fqnprefix":"JsonVSE.JSONObject","qn":"IsBoolean","codesample":"%REM\n    The following code loads a string of JSON and checks whether elements are booleans.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as JsonObject\nDim json as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nPrint jsonObj.isBoolean()                    &amp;apos; False\nPrint jsonObj.getChild(&amp;quot;living&amp;quot;).isBoolean() &amp;apos; True","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function IsBoolean() As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns whether or not a JsonObject is a boolean.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns whether or not a JsonObject is a boolean.","inlinecomment":" \t &apos; Returns whether or not a JsonObject is a boolean.","parentclassname":"JSONObject","codesamplehtml":"%REM&lt;br /&gt;    The following code loads a string of JSON and checks whether elements are booleans.&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New JsonParser()&lt;br /&gt;Dim jsonObj as JsonObject&lt;br /&gt;Dim childObj as JsonObject&lt;br /&gt;Dim json as String&lt;br /&gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&lt;br /&gt;Call parser.loadFromJson(json)&lt;br /&gt;Set jsonObj = parser.getRootObject()&lt;br /&gt;Print jsonObj.isBoolean()                    &amp;apos; False&lt;br /&gt;Print jsonObj.getChild(&amp;quot;living&amp;quot;).isBoolean() &amp;apos; True", "signatureelements":["Function"]},{"label":"IsChild","comment":"Returns whether or not the JsonObject has a child with the specified label.","valuetype":"Boolean","filenamebase":"IsChild_Method","fqnprefix":"JsonVSE.JSONObject","qn":"IsChild","codesample":"%REM\n    The following code loads a string of JSON and checks whether specific children exist.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as JsonObject\nDim json as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nPrint jsonObj.isChild(&amp;quot;address&amp;quot;) &amp;apos; True\nPrint jsonObj.isChild(&amp;quot;hobbies&amp;quot;) &amp;apos; False","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Label As String)","signature":"Function IsChild(Label As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns whether or not the JsonObject has a child with the specified label.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns whether or not the JsonObject has a child with the specified label.","inlinecomment":" \t &apos; Returns whether or not the JsonObject has a child with the specified label.","parentclassname":"JSONObject","codesamplehtml":"%REM&lt;br /&gt;    The following code loads a string of JSON and checks whether specific children exist.&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New JsonParser()&lt;br /&gt;Dim jsonObj as JsonObject&lt;br /&gt;Dim childObj as JsonObject&lt;br /&gt;Dim json as String&lt;br /&gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&lt;br /&gt;Call parser.loadFromJson(json)&lt;br /&gt;Set jsonObj = parser.getRootObject()&lt;br /&gt;Print jsonObj.isChild(&amp;quot;address&amp;quot;) &amp;apos; True&lt;br /&gt;Print jsonObj.isChild(&amp;quot;hobbies&amp;quot;) &amp;apos; False", "signatureelements":["Function"], "arguments":[{"label":"Label","comment":"Label within this JsonObject","valuetype":"String","filenamebase":"Label_ValuedElement","fqnprefix":"JsonVSEJSONObjectIsChild","qn":"Label","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Label within this JsonObject&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Label within this JsonObject","inlinecomment":" \t &apos; Label within this JsonObject"}]},{"label":"IsDescendant","comment":"Checks if there is a JsonObject within the current JsonObject, using an array of labels to navigate down the hierarchy.","valuetype":"Boolean","filenamebase":"IsDescendant_Method","fqnprefix":"JsonVSE.JSONObject","qn":"IsDescendant","codesample":"%REM\n    The following code loads a string of JSON and checks whether descendants exist.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as JsonObject\nDim json as String\nDim path(1) as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\npath(0) = &amp;quot;address&amp;quot;\npath(1) = &amp;quot;addr1&amp;quot;\nPrint jsonObj.isDescendant(path)   &amp;apos; True\npath(1) = &amp;quot;addr3&amp;quot;\nPrint jsonObj.isDescendant(path)   &amp;apos; False","signaturecode":64,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(Path As String Array)","signature":"Function IsDescendant(Path As String Array) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks if there is a JsonObject within the current JsonObject, using an array of labels to navigate down the hierarchy.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks if there is a JsonObject within the current JsonObject, using an array of labels to navigate down the hierarchy.","inlinecomment":" \t &apos; Checks if there is a JsonObject within the current JsonObject, using an array of labels to navigate down the hierarchy.","parentclassname":"JSONObject","codesamplehtml":"%REM&lt;br /&gt;    The following code loads a string of JSON and checks whether descendants exist.&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New JsonParser()&lt;br /&gt;Dim jsonObj as JsonObject&lt;br /&gt;Dim childObj as JsonObject&lt;br /&gt;Dim json as String&lt;br /&gt;Dim path(1) as String&lt;br /&gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&lt;br /&gt;Call parser.loadFromJson(json)&lt;br /&gt;Set jsonObj = parser.getRootObject()&lt;br /&gt;path(0) = &amp;quot;address&amp;quot;&lt;br /&gt;path(1) = &amp;quot;addr1&amp;quot;&lt;br /&gt;Print jsonObj.isDescendant(path)   &amp;apos; True&lt;br /&gt;path(1) = &amp;quot;addr3&amp;quot;&lt;br /&gt;Print jsonObj.isDescendant(path)   &amp;apos; False", "signatureelements":["Function"], "arguments":[{"label":"Path","comment":"Array of labels to use to check for the JsonObject","valuetype":"String","filenamebase":"Path_ValuedElement","fqnprefix":"JsonVSEJSONObjectIsDescendant","qn":"Path","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array of labels to use to check for the JsonObject&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array of labels to use to check for the JsonObject","inlinecomment":" \t &apos; Array of labels to use to check for the JsonObject", "attributes":["Array"]}]},{"label":"IsDescendantPath","comment":"","valuetype":"Boolean","filenamebase":"IsDescendantPath_Method","fqnprefix":"JsonVSE.JSONObject","qn":"IsDescendantPath","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(Path As String, Delimiter As String)","signature":"Function IsDescendantPath(Path As String, Delimiter As String) As Boolean","modifiers":"","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"JSONObject","codesamplehtml":"", "signatureelements":["Function"], "arguments":[{"label":"Path","comment":"","valuetype":"String","filenamebase":"Path_ValuedElement","fqnprefix":"JsonVSEJSONObjectIsDescendantPath","qn":"Path","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""},{"label":"Delimiter","comment":"","valuetype":"String","filenamebase":"Delimiter_ValuedElement","fqnprefix":"JsonVSEJSONObjectIsDescendantPath","qn":"Delimiter","argumentindex":2,"optionalvalue":"LIT_STR(&quot;/&quot;)","commentblock":"","commenthtml":"","inlinecomment":"", "attributes":["CONST","OPTIONAL"]}]},{"label":"IsNull","comment":"Returns TRUE if the current JsonObject has a null value","valuetype":"Boolean","filenamebase":"IsNull_Method","fqnprefix":"JsonVSE.JSONObject","qn":"IsNull","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"()","signature":"Function IsNull() As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns TRUE if the current JsonObject has a null value&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns TRUE if the current JsonObject has a null value","inlinecomment":" \t &apos; Returns TRUE if the current JsonObject has a null value","parentclassname":"JSONObject","codesamplehtml":"", "signatureelements":["Function"]},{"label":"IsNumber","comment":"Returns whether or not a JsonObject is a number.","valuetype":"Boolean","filenamebase":"IsNumber_Method","fqnprefix":"JsonVSE.JSONObject","qn":"IsNumber","codesample":"%REM\n    The following code loads a string of JSON and checks whether elements are numbers.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as JsonObject\nDim json as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nPrint jsonObj.isNumber()                 &amp;apos; False\nPrint jsonObj.getChild(&amp;quot;age&amp;quot;).isNumber() &amp;apos; True","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function IsNumber() As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns whether or not a JsonObject is a number.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns whether or not a JsonObject is a number.","inlinecomment":" \t &apos; Returns whether or not a JsonObject is a number.","parentclassname":"JSONObject","codesamplehtml":"%REM&lt;br /&gt;    The following code loads a string of JSON and checks whether elements are numbers.&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New JsonParser()&lt;br /&gt;Dim jsonObj as JsonObject&lt;br /&gt;Dim childObj as JsonObject&lt;br /&gt;Dim json as String&lt;br /&gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&lt;br /&gt;Call parser.loadFromJson(json)&lt;br /&gt;Set jsonObj = parser.getRootObject()&lt;br /&gt;Print jsonObj.isNumber()                 &amp;apos; False&lt;br /&gt;Print jsonObj.getChild(&amp;quot;age&amp;quot;).isNumber() &amp;apos; True", "signatureelements":["Function"]},{"label":"IsObject","comment":"Returns whether or not a JsonObject is an object.","valuetype":"Boolean","filenamebase":"IsObject_Method","fqnprefix":"JsonVSE.JSONObject","qn":"IsObject","codesample":"%REM\n    The following code loads a string of JSON and checks whether elements are JSON objects.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as JsonObject\nDim json as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nPrint jsonObj.isObject()                    &amp;apos; True\nPrint jsonObj.getChild(&amp;quot;living&amp;quot;).isObject() &amp;apos; False","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function IsObject() As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns whether or not a JsonObject is an object.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns whether or not a JsonObject is an object.","inlinecomment":" \t &apos; Returns whether or not a JsonObject is an object.","parentclassname":"JSONObject","codesamplehtml":"%REM&lt;br /&gt;    The following code loads a string of JSON and checks whether elements are JSON objects.&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New JsonParser()&lt;br /&gt;Dim jsonObj as JsonObject&lt;br /&gt;Dim childObj as JsonObject&lt;br /&gt;Dim json as String&lt;br /&gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&lt;br /&gt;Call parser.loadFromJson(json)&lt;br /&gt;Set jsonObj = parser.getRootObject()&lt;br /&gt;Print jsonObj.isObject()                    &amp;apos; True&lt;br /&gt;Print jsonObj.getChild(&amp;quot;living&amp;quot;).isObject() &amp;apos; False", "signatureelements":["Function"]},{"label":"IsScalar","comment":"Returns whether or not a JsonObject is a scalar value (string, number, boolean).","valuetype":"Boolean","filenamebase":"IsScalar_Method","fqnprefix":"JsonVSE.JSONObject","qn":"IsScalar","codesample":"%REM\n    The following code loads a string of JSON and checks whether elements are scalars.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as JsonObject\nDim json as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nPrint jsonObj.isScalar()                    &amp;apos; False\nPrint jsonObj.getChild(&amp;quot;living&amp;quot;).isScalar() &amp;apos; True","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function IsScalar() As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns whether or not a JsonObject is a scalar value (string, number, boolean).&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns whether or not a JsonObject is a scalar value (string, number, boolean).","inlinecomment":" \t &apos; Returns whether or not a JsonObject is a scalar value (string, number, boolean).","parentclassname":"JSONObject","codesamplehtml":"%REM&lt;br /&gt;    The following code loads a string of JSON and checks whether elements are scalars.&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New JsonParser()&lt;br /&gt;Dim jsonObj as JsonObject&lt;br /&gt;Dim childObj as JsonObject&lt;br /&gt;Dim json as String&lt;br /&gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&lt;br /&gt;Call parser.loadFromJson(json)&lt;br /&gt;Set jsonObj = parser.getRootObject()&lt;br /&gt;Print jsonObj.isScalar()                    &amp;apos; False&lt;br /&gt;Print jsonObj.getChild(&amp;quot;living&amp;quot;).isScalar() &amp;apos; True", "signatureelements":["Function"]},{"label":"IsString","comment":"Returns whether or not a JsonObject is a string.","valuetype":"Boolean","filenamebase":"IsString_Method","fqnprefix":"JsonVSE.JSONObject","qn":"IsString","codesample":"%REM\n    The following code loads a string of JSON and checks whether elements are strings.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as JsonObject\nDim json as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nPrint jsonObj.isString()                       &amp;apos; False\nPrint jsonObj.getChild(&amp;quot;firstName&amp;quot;).isString() &amp;apos; True","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function IsString() As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns whether or not a JsonObject is a string.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns whether or not a JsonObject is a string.","inlinecomment":" \t &apos; Returns whether or not a JsonObject is a string.","parentclassname":"JSONObject","codesamplehtml":"%REM&lt;br /&gt;    The following code loads a string of JSON and checks whether elements are strings.&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New JsonParser()&lt;br /&gt;Dim jsonObj as JsonObject&lt;br /&gt;Dim childObj as JsonObject&lt;br /&gt;Dim json as String&lt;br /&gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&lt;br /&gt;Call parser.loadFromJson(json)&lt;br /&gt;Set jsonObj = parser.getRootObject()&lt;br /&gt;Print jsonObj.isString()                       &amp;apos; False&lt;br /&gt;Print jsonObj.getChild(&amp;quot;firstName&amp;quot;).isString() &amp;apos; True", "signatureelements":["Function"]},{"label":"New","comment":"Constructor","valuetype":"JSONObject","filenamebase":"New_Method","fqnprefix":"JsonVSE.JSONObject","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(IsArray As Boolean)","signature":"Function New(IsArray As Boolean) As JSONObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor","inlinecomment":" \t &apos; Constructor","parentclassname":"JSONObject","codesamplehtml":"", "signatureelements":["Function"], "arguments":[{"label":"IsArray","comment":"If IsArray is T, creates an empty array object ([]), otherwise an empty JSON object ({})","valuetype":"Boolean","filenamebase":"IsArray_ValuedElement","fqnprefix":"JsonVSEJSONObjectNew","qn":"IsArray","argumentindex":1,"optionalvalue":"LSXFalse","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;If IsArray is T, creates an empty array object ([]), otherwise an empty JSON object ({})&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"If IsArray is T, creates an empty array object ([]), otherwise an empty JSON object ({})","inlinecomment":" \t &apos; If IsArray is T, creates an empty array object ([]), otherwise an empty JSON object ({})", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"RemoveArrayEntry","comment":"For a JsonObject that is an array, remove the array entry at the provided index (0 being the first entry)","valuetype":"JSONObject","filenamebase":"RemoveArrayEntry_Method","fqnprefix":"JsonVSE.JSONObject","qn":"RemoveArrayEntry","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Index As Integer)","signature":"Function RemoveArrayEntry(Index As Integer) As JSONObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;For a JsonObject that is an array, remove the array entry at the provided index (0 being the first entry)&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"For a JsonObject that is an array, remove the array entry at the provided index (0 being the first entry)","inlinecomment":" \t &apos; For a JsonObject that is an array, remove the array entry at the provided index (0 being the first entry)","parentclassname":"JSONObject","codesamplehtml":"", "signatureelements":["Function"], "arguments":[{"label":"Index","comment":"The position in the array (0-based) of the entry to remove","valuetype":"Integer-Unsigned","filenamebase":"Index_ValuedElement","fqnprefix":"JsonVSEJSONObjectRemoveArrayEntry","qn":"Index","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;The position in the array (0-based) of the entry to remove&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"The position in the array (0-based) of the entry to remove","inlinecomment":" \t &apos; The position in the array (0-based) of the entry to remove", "attributes":["BY_VAL"]}]},{"label":"RemoveChild","comment":"Removes a child from a JsonObject.","valuetype":"JSONObject","filenamebase":"RemoveChild_Method","fqnprefix":"JsonVSE.JSONObject","qn":"RemoveChild","codesample":"%REM\n    The following code removes the child using the defined label from the specified JsonObject.\n%END REM\nDim jo as New JsonObject\nDim jp as New JSONParser\nDim jsonStr as String\njsonStr = |{&amp;quot;John&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}}|\nCall jp.loadFromJSON(helloWorld)\nSet jo = jp.getrootobject\nCall jo.removeChild(&amp;quot;John&amp;quot;)\nPrint jo.toString(false)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Label As String)","signature":"Function RemoveChild(Label As String) As JSONObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Removes a child from a JsonObject.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Removes a child from a JsonObject.","inlinecomment":" \t &apos; Removes a child from a JsonObject.","parentclassname":"JSONObject","codesamplehtml":"%REM&lt;br /&gt;    The following code removes the child using the defined label from the specified JsonObject.&lt;br /&gt;%END REM&lt;br /&gt;Dim jo as New JsonObject&lt;br /&gt;Dim jp as New JSONParser&lt;br /&gt;Dim jsonStr as String&lt;br /&gt;jsonStr = |{&amp;quot;John&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}}|&lt;br /&gt;Call jp.loadFromJSON(helloWorld)&lt;br /&gt;Set jo = jp.getrootobject&lt;br /&gt;Call jo.removeChild(&amp;quot;John&amp;quot;)&lt;br /&gt;Print jo.toString(false)", "signatureelements":["Function"], "arguments":[{"label":"Label","comment":"Label of the child to remove","valuetype":"String","filenamebase":"Label_ValuedElement","fqnprefix":"JsonVSEJSONObjectRemoveChild","qn":"Label","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Label of the child to remove&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Label of the child to remove","inlinecomment":" \t &apos; Label of the child to remove"}]},{"label":"toString","comment":"Converts a JsonObject to a string, either pretty-printed or as compact JSON.","valuetype":"String","filenamebase":"toString_Method","fqnprefix":"JsonVSE.JSONObject","qn":"toString","codesample":"%REM\n    The following code loads a string of JSON and pretty-prints the address element.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as JsonObject\nDim json as String\nDim path(1) as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nCall jsonObj.getChild(&amp;quot;address&amp;quot;).toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(PrettyPrint As Boolean)","signature":"Function toString(PrettyPrint As Boolean) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Converts a JsonObject to a string, either pretty-printed or as compact JSON.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Converts a JsonObject to a string, either pretty-printed or as compact JSON.","inlinecomment":" \t &apos; Converts a JsonObject to a string, either pretty-printed or as compact JSON.","parentclassname":"JSONObject","codesamplehtml":"%REM&lt;br /&gt;    The following code loads a string of JSON and pretty-prints the address element.&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New JsonParser()&lt;br /&gt;Dim jsonObj as JsonObject&lt;br /&gt;Dim childObj as JsonObject&lt;br /&gt;Dim json as String&lt;br /&gt;Dim path(1) as String&lt;br /&gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&lt;br /&gt;Call parser.loadFromJson(json)&lt;br /&gt;Set jsonObj = parser.getRootObject()&lt;br /&gt;Call jsonObj.getChild(&amp;quot;address&amp;quot;).toString(True)", "signatureelements":["Function"], "arguments":[{"label":"PrettyPrint","comment":"Whether or not to pretty-print","valuetype":"Boolean","filenamebase":"PrettyPrint_ValuedElement","fqnprefix":"JsonVSEJSONObjecttoString","qn":"PrettyPrint","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether or not to pretty-print&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether or not to pretty-print","inlinecomment":" \t &apos; Whether or not to pretty-print", "attributes":["BY_VAL"]}]},{"label":"ChildCount","comment":"Number of child elements within this JsonObject.","valuetype":"Integer-Unsigned","filenamebase":"ChildCount_Method","fqnprefix":"JsonVSE.JSONObject","qn":"Get.ChildCount","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ChildCount As Integer","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Number of child elements within this JsonObject.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Number of child elements within this JsonObject.","inlinecomment":" \t &apos; Number of child elements within this JsonObject.","parentclassname":"JSONObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"JSONType","comment":"Type of the JsonObject as a string. Useful for logging. To check the JsonObject type in conditionals use the corresponding is... methods.\nValues are:\n- string\n- number\n- array\n- boolean\n- object","valuetype":"String","filenamebase":"JSONType_Method","fqnprefix":"JsonVSE.JSONObject","qn":"Get.JSONType","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get JSONType As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Type of the JsonObject as a string. Useful for logging. To check the JsonObject type in conditionals use the corresponding is... methods.&lt;br /&gt;Values are:&lt;br /&gt;- string&lt;br /&gt;- number&lt;br /&gt;- array&lt;br /&gt;- boolean&lt;br /&gt;- object&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Type of the JsonObject as a string. Useful for logging. To check the JsonObject type in conditionals use the corresponding is... methods.&lt;br /&gt;Values are:&lt;br /&gt;- string&lt;br /&gt;- number&lt;br /&gt;- array&lt;br /&gt;- boolean&lt;br /&gt;- object","inlinecomment":" \t &apos; Type of the JsonObject as a string. Useful for logging. To check the JsonObject type in conditionals use the corresponding is... methods.\nValues are:\n- string\n- number\n- array\n- boolean\n- object","parentclassname":"JSONObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"Label","comment":"Label for the JsonObject, blank for a JsonObject that is an array.","valuetype":"String","filenamebase":"Label_Method","fqnprefix":"JsonVSE.JSONObject","qn":"Get.Label","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Label As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Label for the JsonObject, blank for a JsonObject that is an array.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Label for the JsonObject, blank for a JsonObject that is an array.","inlinecomment":" \t &apos; Label for the JsonObject, blank for a JsonObject that is an array.","parentclassname":"JSONObject","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"ParentObject","comment":"JsonObject that contains this JsonObject, if available.","valuetype":"JSONObject","filenamebase":"ParentObject_Method","fqnprefix":"JsonVSE.JSONObject","qn":"Get.ParentObject","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ParentObject As JSONObject","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JsonObject that contains this JsonObject, if available.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JsonObject that contains this JsonObject, if available.","inlinecomment":" \t &apos; JsonObject that contains this JsonObject, if available.","parentclassname":"JSONObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"ScalarValue","comment":"String, number or boolean value of this JsonObject. Only valid for JsonObjects where isScalar is true. Not valid for arrays or objects.","valuetype":"Variant","filenamebase":"ScalarValue_Method","fqnprefix":"JsonVSE.JSONObject","qn":"Get.ScalarValue","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ScalarValue As Variant","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String, number or boolean value of this JsonObject. Only valid for JsonObjects where isScalar is true. Not valid for arrays or objects.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String, number or boolean value of this JsonObject. Only valid for JsonObjects where isScalar is true. Not valid for arrays or objects.","inlinecomment":" \t &apos; String, number or boolean value of this JsonObject. Only valid for JsonObjects where isScalar is true. Not valid for arrays or objects.","parentclassname":"JSONObject","codesamplehtml":"", "signatureelements":["Property","Get"]},{"label":"ShortValue","comment":"First 16 characters of the toString() value of this JsonObject. Useful for debugging or logging purposes to easly identify the current JsonObject from a larger string of JSON.","valuetype":"String","filenamebase":"ShortValue_Method","fqnprefix":"JsonVSE.JSONObject","qn":"Get.ShortValue","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ShortValue As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;First 16 characters of the toString() value of this JsonObject. Useful for debugging or logging purposes to easly identify the current JsonObject from a larger string of JSON.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"First 16 characters of the toString() value of this JsonObject. Useful for debugging or logging purposes to easly identify the current JsonObject from a larger string of JSON.","inlinecomment":" \t &apos; First 16 characters of the toString() value of this JsonObject. Useful for debugging or logging purposes to easly identify the current JsonObject from a larger string of JSON.","parentclassname":"JSONObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"ValueArray","comment":"Only valid for a JsonObject that contains an array of scalars. Returns a Variant array of the values.","valuetype":"Variant","filenamebase":"ValueArray_Method","fqnprefix":"JsonVSE.JSONObject","qn":"Get.ValueArray","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ValueArray As Variant","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Only valid for a JsonObject that contains an array of scalars. Returns a Variant array of the values.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Only valid for a JsonObject that contains an array of scalars. Returns a Variant array of the values.","inlinecomment":" \t &apos; Only valid for a JsonObject that contains an array of scalars. Returns a Variant array of the values.","parentclassname":"JSONObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"Label","comment":"Label for the JsonObject, blank for a JsonObject that is an array.","valuetype":"String","filenamebase":"Label_Method","fqnprefix":"JsonVSE.JSONObject","qn":"Set.Label","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set Label As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Label for the JsonObject, blank for a JsonObject that is an array.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Label for the JsonObject, blank for a JsonObject that is an array.","inlinecomment":" \t &apos; Label for the JsonObject, blank for a JsonObject that is an array.","parentclassname":"JSONObject","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"ScalarValue","comment":"String, number or boolean value of this JsonObject. Only valid for JsonObjects where isScalar is true. Not valid for arrays or objects.","valuetype":"Variant","filenamebase":"ScalarValue_Method","fqnprefix":"JsonVSE.JSONObject","qn":"Set.ScalarValue","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set ScalarValue As Variant","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String, number or boolean value of this JsonObject. Only valid for JsonObjects where isScalar is true. Not valid for arrays or objects.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String, number or boolean value of this JsonObject. Only valid for JsonObjects where isScalar is true. Not valid for arrays or objects.","inlinecomment":" \t &apos; String, number or boolean value of this JsonObject. Only valid for JsonObjects where isScalar is true. Not valid for arrays or objects.","parentclassname":"JSONObject","codesamplehtml":"", "signatureelements":["Property","Set"]}]}
