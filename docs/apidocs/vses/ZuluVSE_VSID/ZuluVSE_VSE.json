{"lsxname":"ZuluVSE","comment":"advanced time/date manipulation","valuetype":"","filenamebase":"ZuluVSE_VSE","fqnprefix":"ZuluVSE","qn":"ZuluVSE","codesample":"","signaturecode":32768,"instancecode":32768,"description":"","codesamplehtml":"","baseid":900,"baseguid":"6B39D06E-CC6A-40BF-B75F-C576A80C13AA","characterset":"UNICODE","lsxcreator":"Bob Balaban","signature":"VSE ZuluVSE","modifiers":"","lsxname":"ZuluVSE","summary":"advanced time/date manipulation","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;advanced time/date manipulation&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"advanced time/date manipulation","inlinecomment":" \t &apos; advanced time/date manipulation", "classes":[{"classname":"DateTimeObject","comment":"","valuetype":"","filenamebase":"DateTimeObject_ObjectClass","fqnprefix":"ZuluVSE","qn":"DateTimeObject","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","classattribnewnotexposed":"UnexposedNew","projectid":"85258A080068C86D85258803005C5E81","version":3,"classid":"85258A080068C86D85258803005CE670","lsxclassid":3,"signature":"Public Class DateTimeObject","modifiers":"Public","classname":"DateTimeObject","parentclassname":"None","constructorsignature":"Function New() As DateTimeObject","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "methods":[{"label":"IsAfter","comment":"Checks whether a passed DateTimeObject is after this DateTimeObject.","valuetype":"Boolean","filenamebase":"IsAfter_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"IsAfter","codesample":"    %REM \n        This checks the DateTimeObject isAfter() method. In this case,\n        It should print something like &amp;quot;Now (2023-09-13T17:38:51Z) isAfter (2023-02-20T20:49:13Z): True&amp;quot;\n    %END REM\n    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser\n    Dim nowObj as DateTimeObject\n    Dim testISOStr as String, testEpoch as Long\n    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;\n    testEpoch = 1676926153\n    Set dtObj = dtParser.ParseISOString(testISOStr)\n    Set nowObj = dtParser.getNow()\n    &amp;apos; Print Test Results\n    Print &amp;quot;Now (&amp;quot; &amp;amp; nowObj.ToISODateTime &amp;amp; &amp;quot;) isAfter (&amp;quot; &amp;amp; dtObj.ToISODateTime &amp;amp; &amp;quot;): &amp;quot; &amp;amp; Cstr(nowObj.isAfter(dtObj))","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DateTime As DateTimeObject)","signature":"Function IsAfter(DateTime As DateTimeObject) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks whether a passed DateTimeObject is after this DateTimeObject.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks whether a passed DateTimeObject is after this DateTimeObject.","inlinecomment":" \t &apos; Checks whether a passed DateTimeObject is after this DateTimeObject.","parentclassname":"DateTimeObject","codesamplehtml":"    %REM &lt;br /&gt;        This checks the DateTimeObject isAfter() method. In this case,&lt;br /&gt;        It should print something like &amp;quot;Now (2023-09-13T17:38:51Z) isAfter (2023-02-20T20:49:13Z): True&amp;quot;&lt;br /&gt;    %END REM&lt;br /&gt;    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser&lt;br /&gt;    Dim nowObj as DateTimeObject&lt;br /&gt;    Dim testISOStr as String, testEpoch as Long&lt;br /&gt;    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;&lt;br /&gt;    testEpoch = 1676926153&lt;br /&gt;    Set dtObj = dtParser.ParseISOString(testISOStr)&lt;br /&gt;    Set nowObj = dtParser.getNow()&lt;br /&gt;    &amp;apos; Print Test Results&lt;br /&gt;    Print &amp;quot;Now (&amp;quot; &amp;amp; nowObj.ToISODateTime &amp;amp; &amp;quot;) isAfter (&amp;quot; &amp;amp; dtObj.ToISODateTime &amp;amp; &amp;quot;): &amp;quot; &amp;amp; Cstr(nowObj.isAfter(dtObj))", "signatureelements":["Function"], "arguments":[{"label":"DateTime","comment":"DateTimeObject to compare to this","valuetype":"DateTimeObject","filenamebase":"DateTime_ValuedElement","fqnprefix":"ZuluVSEDateTimeObjectIsAfter","qn":"DateTime","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;DateTimeObject to compare to this&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"DateTimeObject to compare to this","inlinecomment":" \t &apos; DateTimeObject to compare to this"}]},{"label":"IsBefore","comment":"Checks whether a passed DateTimeObject is before this DateTimeObject.","valuetype":"Boolean","filenamebase":"IsBefore_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"IsBefore","codesample":"    %REM \n        This checks the DateTimeObject isBefore() method. In this case,\n        It should print something like &amp;quot;DateTime (2023-02-20T20:49:13Z) isBefore (2023-09-13T17:38:51Z): True&amp;quot;\n    %END REM\n    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser\n    Dim nowObj as DateTimeObject\n    Dim testISOStr as String, testEpoch as Long\n    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;\n    testEpoch = 1676926153\n    Set dtObj = dtParser.ParseISOString(testISOStr)\n    Set nowObj = dtParser.getNow()\n    &amp;apos; Print Test Results\n    Print &amp;quot;DateTime (&amp;quot; &amp;amp; dtObj.ToISODateTime &amp;amp; &amp;quot;) isBefore (&amp;quot; &amp;amp; nowObj.ToISODateTime &amp;amp; &amp;quot;): &amp;quot; &amp;amp; Cstr(dtObj.isBefore(nowObj))","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DateTime As DateTimeObject)","signature":"Function IsBefore(DateTime As DateTimeObject) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks whether a passed DateTimeObject is before this DateTimeObject.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks whether a passed DateTimeObject is before this DateTimeObject.","inlinecomment":" \t &apos; Checks whether a passed DateTimeObject is before this DateTimeObject.","parentclassname":"DateTimeObject","codesamplehtml":"    %REM &lt;br /&gt;        This checks the DateTimeObject isBefore() method. In this case,&lt;br /&gt;        It should print something like &amp;quot;DateTime (2023-02-20T20:49:13Z) isBefore (2023-09-13T17:38:51Z): True&amp;quot;&lt;br /&gt;    %END REM&lt;br /&gt;    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser&lt;br /&gt;    Dim nowObj as DateTimeObject&lt;br /&gt;    Dim testISOStr as String, testEpoch as Long&lt;br /&gt;    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;&lt;br /&gt;    testEpoch = 1676926153&lt;br /&gt;    Set dtObj = dtParser.ParseISOString(testISOStr)&lt;br /&gt;    Set nowObj = dtParser.getNow()&lt;br /&gt;    &amp;apos; Print Test Results&lt;br /&gt;    Print &amp;quot;DateTime (&amp;quot; &amp;amp; dtObj.ToISODateTime &amp;amp; &amp;quot;) isBefore (&amp;quot; &amp;amp; nowObj.ToISODateTime &amp;amp; &amp;quot;): &amp;quot; &amp;amp; Cstr(dtObj.isBefore(nowObj))", "signatureelements":["Function"], "arguments":[{"label":"DateTime","comment":"DateTimeObject to compare to this","valuetype":"DateTimeObject","filenamebase":"DateTime_ValuedElement","fqnprefix":"ZuluVSEDateTimeObjectIsBefore","qn":"DateTime","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;DateTimeObject to compare to this&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"DateTimeObject to compare to this","inlinecomment":" \t &apos; DateTimeObject to compare to this"}]},{"label":"IsEqual","comment":"Checks whether a passed DateTimeObject is identical to this DateTimeObject.","valuetype":"Boolean","filenamebase":"IsEqual_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"IsEqual","codesample":"    %REM \n        This checks the DateTimeObject isEqual() method. In this case,\n        It should print something like &amp;quot;Test (2023-02-20T20:49:13Z) isEqual (2023-02-20T20:49:13Z): True&amp;quot;\n    %END REM\n    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser\n    Dim testObj as DateTimeObject\n    Dim testISOStr as String, testEpoch as Long\n    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;\n    testEpoch = 1676926153\n    Set dtObj = dtParser.ParseISOString(testISOStr)\n    Set testObj = dtParser.BuildDateTimeFromEpoch(testEpoch)\n    &amp;apos; Print Test Results\n    Print &amp;quot;Test (&amp;quot; &amp;amp; testObj.ToISODateTime &amp;amp; &amp;quot;) isEqual (&amp;quot; &amp;amp; dtObj.ToISODateTime &amp;amp; &amp;quot;): &amp;quot; &amp;amp; Cstr(testObj.isEqual(dtObj))","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DateTime As DateTimeObject)","signature":"Function IsEqual(DateTime As DateTimeObject) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks whether a passed DateTimeObject is identical to this DateTimeObject.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks whether a passed DateTimeObject is identical to this DateTimeObject.","inlinecomment":" \t &apos; Checks whether a passed DateTimeObject is identical to this DateTimeObject.","parentclassname":"DateTimeObject","codesamplehtml":"    %REM &lt;br /&gt;        This checks the DateTimeObject isEqual() method. In this case,&lt;br /&gt;        It should print something like &amp;quot;Test (2023-02-20T20:49:13Z) isEqual (2023-02-20T20:49:13Z): True&amp;quot;&lt;br /&gt;    %END REM&lt;br /&gt;    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser&lt;br /&gt;    Dim testObj as DateTimeObject&lt;br /&gt;    Dim testISOStr as String, testEpoch as Long&lt;br /&gt;    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;&lt;br /&gt;    testEpoch = 1676926153&lt;br /&gt;    Set dtObj = dtParser.ParseISOString(testISOStr)&lt;br /&gt;    Set testObj = dtParser.BuildDateTimeFromEpoch(testEpoch)&lt;br /&gt;    &amp;apos; Print Test Results&lt;br /&gt;    Print &amp;quot;Test (&amp;quot; &amp;amp; testObj.ToISODateTime &amp;amp; &amp;quot;) isEqual (&amp;quot; &amp;amp; dtObj.ToISODateTime &amp;amp; &amp;quot;): &amp;quot; &amp;amp; Cstr(testObj.isEqual(dtObj))", "signatureelements":["Function"], "arguments":[{"label":"DateTime","comment":"DateTimeObject to compare to this","valuetype":"DateTimeObject","filenamebase":"DateTime_ValuedElement","fqnprefix":"ZuluVSEDateTimeObjectIsEqual","qn":"DateTime","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;DateTimeObject to compare to this&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"DateTimeObject to compare to this","inlinecomment":" \t &apos; DateTimeObject to compare to this"}]},{"label":"New","comment":"","valuetype":"DateTimeObject","filenamebase":"New_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As DateTimeObject","modifiers":"","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"DateTimeObject","codesamplehtml":"", "signatureelements":["Function"]},{"label":"ToISODateTime","comment":"Returns this DateTimeObject as a string in ISO 8601 date-time format.","valuetype":"String","filenamebase":"ToISODateTime_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"ToISODateTime","codesample":"    %REM \n        This checks the DateTimeObject toISODateTime() method. In this case,\n        It should print something like &amp;quot;DateTimeObject.toISODateTime is 2023-02-20T20:49:13Z&amp;quot;\n    %END REM\n    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser\n    Dim testISOStr as String\n    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;\n    Set dtObj = dtParser.ParseISOString(testISOStr)\n    &amp;apos; Print Test Results\n    Print &amp;quot;DateTimeObject.toISODateTime is &amp;quot; &amp;amp; dtObj.toISODateTime","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function ToISODateTime() As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns this DateTimeObject as a string in ISO 8601 date-time format.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns this DateTimeObject as a string in ISO 8601 date-time format.","inlinecomment":" \t &apos; Returns this DateTimeObject as a string in ISO 8601 date-time format.","parentclassname":"DateTimeObject","codesamplehtml":"    %REM &lt;br /&gt;        This checks the DateTimeObject toISODateTime() method. In this case,&lt;br /&gt;        It should print something like &amp;quot;DateTimeObject.toISODateTime is 2023-02-20T20:49:13Z&amp;quot;&lt;br /&gt;    %END REM&lt;br /&gt;    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser&lt;br /&gt;    Dim testISOStr as String&lt;br /&gt;    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;&lt;br /&gt;    Set dtObj = dtParser.ParseISOString(testISOStr)&lt;br /&gt;    &amp;apos; Print Test Results&lt;br /&gt;    Print &amp;quot;DateTimeObject.toISODateTime is &amp;quot; &amp;amp; dtObj.toISODateTime", "signatureelements":["Function"]},{"label":"ToString","comment":"Returns this DateTimeObject as a string uses C/C++ formatting codes and locale.","valuetype":"String","filenamebase":"ToString_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"ToString","codesample":"    %REM \n        This checks the DateTimeObject toString() method. In this case,\n        It should print something like &amp;quot;DateTimeObject.toString(%B %d %Y %T %Z, C) is February 20 2023 20:49:13 UTC&amp;quot;\n    %END REM\n    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser\n    Dim testISOStr as String, testFmtPattern as String, testFmtLocale as String\n    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;\n    testFmtPattern = &amp;quot;%B %d %Y %T %Z&amp;quot;\n    testFmtLocale = &amp;quot;C&amp;quot;\n    Set dtObj = dtParser.ParseISOString(testISOStr)\n    &amp;apos; Print Test Results\n    Print &amp;quot;DateTimeObject.toString(&amp;quot; &amp;amp; testFmtPattern &amp;amp; &amp;quot;, &amp;quot; &amp;amp; testFmtLocale &amp;amp; &amp;quot;) is &amp;quot; &amp;amp; dtObj.toString(testFmtPattern, testFmtLocale)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Format As String, Locale As String)","signature":"Function ToString(Format As String, Locale As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns this DateTimeObject as a string uses C/C++ formatting codes and locale.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns this DateTimeObject as a string uses C/C++ formatting codes and locale.","inlinecomment":" \t &apos; Returns this DateTimeObject as a string uses C/C++ formatting codes and locale.","parentclassname":"DateTimeObject","codesamplehtml":"    %REM &lt;br /&gt;        This checks the DateTimeObject toString() method. In this case,&lt;br /&gt;        It should print something like &amp;quot;DateTimeObject.toString(%B %d %Y %T %Z, C) is February 20 2023 20:49:13 UTC&amp;quot;&lt;br /&gt;    %END REM&lt;br /&gt;    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser&lt;br /&gt;    Dim testISOStr as String, testFmtPattern as String, testFmtLocale as String&lt;br /&gt;    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;&lt;br /&gt;    testFmtPattern = &amp;quot;%B %d %Y %T %Z&amp;quot;&lt;br /&gt;    testFmtLocale = &amp;quot;C&amp;quot;&lt;br /&gt;    Set dtObj = dtParser.ParseISOString(testISOStr)&lt;br /&gt;    &amp;apos; Print Test Results&lt;br /&gt;    Print &amp;quot;DateTimeObject.toString(&amp;quot; &amp;amp; testFmtPattern &amp;amp; &amp;quot;, &amp;quot; &amp;amp; testFmtLocale &amp;amp; &amp;quot;) is &amp;quot; &amp;amp; dtObj.toString(testFmtPattern, testFmtLocale)", "signatureelements":["Function"], "arguments":[{"label":"Format","comment":"Formatter comprising C/C++ format codes, see https://en.cppreference.com/w/c/chrono/strftime","valuetype":"String","filenamebase":"Format_ValuedElement","fqnprefix":"ZuluVSEDateTimeObjectToString","qn":"Format","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Formatter comprising C/C++ format codes, see https://en.cppreference.com/w/c/chrono/strftime&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Formatter comprising C/C++ format codes, see https://en.cppreference.com/w/c/chrono/strftime","inlinecomment":" \t &apos; Formatter comprising C/C++ format codes, see https://en.cppreference.com/w/c/chrono/strftime"},{"label":"Locale","comment":"Locale to return, e.g. fr_FR.UTF8. See https://saimana.com/list-of-country-locale-code/","valuetype":"String","filenamebase":"Locale_ValuedElement","fqnprefix":"ZuluVSEDateTimeObjectToString","qn":"Locale","argumentindex":2,"optionalvalue":"LIT_STR(&quot;&quot;)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Locale to return, e.g. fr_FR.UTF8. See https://saimana.com/list-of-country-locale-code/&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Locale to return, e.g. fr_FR.UTF8. See https://saimana.com/list-of-country-locale-code/","inlinecomment":" \t &apos; Locale to return, e.g. fr_FR.UTF8. See https://saimana.com/list-of-country-locale-code/", "attributes":["CONST","OPTIONAL"]}]},{"label":"Day","comment":"Day of the month portion of DateTimeObject","valuetype":"Integer-Unsigned","filenamebase":"Day_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"Get.Day","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Day As Integer","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Day of the month portion of DateTimeObject&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Day of the month portion of DateTimeObject","inlinecomment":" \t &apos; Day of the month portion of DateTimeObject","parentclassname":"DateTimeObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"DefaultFormat","comment":"","valuetype":"String","filenamebase":"DefaultFormat_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"Get.DefaultFormat","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get DefaultFormat As String","modifiers":"Get","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"DateTimeObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"EpochTime","comment":"Milliseconds from Jan 1 1970 midnight UTC","valuetype":"Long-Unsigned","filenamebase":"EpochTime_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"Get.EpochTime","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get EpochTime As Long","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Milliseconds from Jan 1 1970 midnight UTC&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Milliseconds from Jan 1 1970 midnight UTC","inlinecomment":" \t &apos; Milliseconds from Jan 1 1970 midnight UTC","parentclassname":"DateTimeObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"EpochTimeMS","comment":"epoch time in milliseconds","valuetype":"Double","filenamebase":"EpochTimeMS_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"Get.EpochTimeMS","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get EpochTimeMS As Double","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;epoch time in milliseconds&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"epoch time in milliseconds","inlinecomment":" \t &apos; epoch time in milliseconds","parentclassname":"DateTimeObject","codesamplehtml":"", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Hours","comment":"Hour of the day portion of DateTimeObject","valuetype":"Integer-Unsigned","filenamebase":"Hours_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"Get.Hours","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Hours As Integer","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Hour of the day portion of DateTimeObject&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Hour of the day portion of DateTimeObject","inlinecomment":" \t &apos; Hour of the day portion of DateTimeObject","parentclassname":"DateTimeObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"Minutes","comment":"Minute of the day portion of DateTimeObject","valuetype":"Integer-Unsigned","filenamebase":"Minutes_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"Get.Minutes","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Minutes As Integer","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Minute of the day portion of DateTimeObject&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Minute of the day portion of DateTimeObject","inlinecomment":" \t &apos; Minute of the day portion of DateTimeObject","parentclassname":"DateTimeObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"Month","comment":"Month of the year portion of DateTimeObject","valuetype":"Integer-Unsigned","filenamebase":"Month_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"Get.Month","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Month As Integer","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Month of the year portion of DateTimeObject&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Month of the year portion of DateTimeObject","inlinecomment":" \t &apos; Month of the year portion of DateTimeObject","parentclassname":"DateTimeObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"Seconds","comment":"Seconds of the minute portion of DateTimeObject","valuetype":"Integer-Unsigned","filenamebase":"Seconds_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"Get.Seconds","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Seconds As Integer","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Seconds of the minute portion of DateTimeObject&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Seconds of the minute portion of DateTimeObject","inlinecomment":" \t &apos; Seconds of the minute portion of DateTimeObject","parentclassname":"DateTimeObject","codesamplehtml":"", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Year","comment":"Year portion of DateTimeObject","valuetype":"Integer-Unsigned","filenamebase":"Year_Method","fqnprefix":"ZuluVSE.DateTimeObject","qn":"Get.Year","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Year As Integer","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Year portion of DateTimeObject&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Year portion of DateTimeObject","inlinecomment":" \t &apos; Year portion of DateTimeObject","parentclassname":"DateTimeObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]}]},{"classname":"DateTimeParser","comment":"","valuetype":"","filenamebase":"DateTimeParser_ObjectClass","fqnprefix":"ZuluVSE","qn":"DateTimeParser","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","projectid":"85258A080068C86D85258803005C5E81","version":3,"classid":"85258A080068C86D85258803005C8B19","lsxclassid":2,"signature":"Public Class DateTimeParser","modifiers":"Public","classname":"DateTimeParser","parentclassname":"None","constructorsignature":"Function New() As DateTimeParser","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "methods":[{"label":"BuildDateTimeFromEpoch","comment":"Builds a DateTimeObject offset from Jan 1 1970 midnght UTC.","valuetype":"DateTimeObject","filenamebase":"BuildDateTimeFromEpoch_Method","fqnprefix":"ZuluVSE.DateTimeParser","qn":"BuildDateTimeFromEpoch","codesample":"    %REM \n        This prints the ISODateTime of the DateParser to make sure it was created correctly. In this case,\n        It should print &amp;quot;DateTimeParser.toISODateTime (2023-02-20T20:49:13Z) should equal 2023-02-20T20:49:13Z&amp;quot;\n    %END REM\n    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser\n    Dim testEpoch as Long, testISOStr as String\n    testEpoch = 1676926153\n    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;\n    &amp;apos; create a DTO using the test epoch\n    Set dtObj = dtParser.BuildDateTimeFromEpoch(testEpoch)\n    &amp;apos; Print ISOstring and see if it equals testISOStr\n    Print &amp;quot;DateTimeParser.toISODateTime (&amp;quot; &amp;amp; dtObj.toISODateTime &amp;amp; &amp;quot;) should equal &amp;quot; &amp;amp; testISOStr","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(EpochSeconds As Long)","signature":"Function BuildDateTimeFromEpoch(EpochSeconds As Long) As DateTimeObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Builds a DateTimeObject offset from Jan 1 1970 midnght UTC.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Builds a DateTimeObject offset from Jan 1 1970 midnght UTC.","inlinecomment":" \t &apos; Builds a DateTimeObject offset from Jan 1 1970 midnght UTC.","parentclassname":"DateTimeParser","codesamplehtml":"    %REM &lt;br /&gt;        This prints the ISODateTime of the DateParser to make sure it was created correctly. In this case,&lt;br /&gt;        It should print &amp;quot;DateTimeParser.toISODateTime (2023-02-20T20:49:13Z) should equal 2023-02-20T20:49:13Z&amp;quot;&lt;br /&gt;    %END REM&lt;br /&gt;    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser&lt;br /&gt;    Dim testEpoch as Long, testISOStr as String&lt;br /&gt;    testEpoch = 1676926153&lt;br /&gt;    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;&lt;br /&gt;    &amp;apos; create a DTO using the test epoch&lt;br /&gt;    Set dtObj = dtParser.BuildDateTimeFromEpoch(testEpoch)&lt;br /&gt;    &amp;apos; Print ISOstring and see if it equals testISOStr&lt;br /&gt;    Print &amp;quot;DateTimeParser.toISODateTime (&amp;quot; &amp;amp; dtObj.toISODateTime &amp;amp; &amp;quot;) should equal &amp;quot; &amp;amp; testISOStr", "signatureelements":["Function"], "arguments":[{"label":"EpochSeconds","comment":"Number of seconds since Jan 1 1970 midnight UTC","valuetype":"Long-Unsigned","filenamebase":"EpochSeconds_ValuedElement","fqnprefix":"ZuluVSEDateTimeParserBuildDateTimeFromEpoch","qn":"EpochSeconds","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Number of seconds since Jan 1 1970 midnight UTC&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Number of seconds since Jan 1 1970 midnight UTC","inlinecomment":" \t &apos; Number of seconds since Jan 1 1970 midnight UTC"}]},{"label":"BuildDateTimeObject","comment":"Builds a DateTimeObject from constituent parts of the date.","valuetype":"DateTimeObject","filenamebase":"BuildDateTimeObject_Method","fqnprefix":"ZuluVSE.DateTimeParser","qn":"BuildDateTimeObject","codesample":"    %REM \n        This prints the ISODateTime of the DateParser to make sure it was created correctly. In this case,\n        It should print &amp;quot;DateTimeParser.toISODateTime (2023-02-20T20:49:13Z) should equal 2023-02-20T20:49:13Z&amp;quot;\n    %END REM\n    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser\n    Dim testISOStr as String \n    Dim yr as Integer, mo as Integer, dy as Integer, hr as Integer, mn as Integer, sc as Integer, tzo as Integer\n    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;\n    yr = 2023\n    mo = 02\n    dy = 20\n    hr = 20\n    mn = 49\n    sc = 13\n    tzo = 0\n    &amp;apos; create a DTO using the integer values for the date/time\n     Set dtObj = dtParser.BuildDateTimeObject(yr, mo, dy, hr, mn, sc, tzo)\n    &amp;apos; Print ISOstring and see if it equals testISOStr\n    Print &amp;quot;DateTimeParser.toISODateTime (&amp;quot; &amp;amp; dtObj.toISODateTime &amp;amp; &amp;quot;) should equal &amp;quot; &amp;amp; testISOStr","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Year As Integer, Month As Integer, Day As Integer, Hours As Integer, Minutes As Integer, Seconds As Integer, UTCOffsetMinutes As Integer)","signature":"Function BuildDateTimeObject(Year As Integer, Month As Integer, Day As Integer, Hours As Integer, Minutes As Integer, Seconds As Integer, UTCOffsetMinutes As Integer) As DateTimeObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Builds a DateTimeObject from constituent parts of the date.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Builds a DateTimeObject from constituent parts of the date.","inlinecomment":" \t &apos; Builds a DateTimeObject from constituent parts of the date.","parentclassname":"DateTimeParser","codesamplehtml":"    %REM &lt;br /&gt;        This prints the ISODateTime of the DateParser to make sure it was created correctly. In this case,&lt;br /&gt;        It should print &amp;quot;DateTimeParser.toISODateTime (2023-02-20T20:49:13Z) should equal 2023-02-20T20:49:13Z&amp;quot;&lt;br /&gt;    %END REM&lt;br /&gt;    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser&lt;br /&gt;    Dim testISOStr as String &lt;br /&gt;    Dim yr as Integer, mo as Integer, dy as Integer, hr as Integer, mn as Integer, sc as Integer, tzo as Integer&lt;br /&gt;    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;&lt;br /&gt;    yr = 2023&lt;br /&gt;    mo = 02&lt;br /&gt;    dy = 20&lt;br /&gt;    hr = 20&lt;br /&gt;    mn = 49&lt;br /&gt;    sc = 13&lt;br /&gt;    tzo = 0&lt;br /&gt;    &amp;apos; create a DTO using the integer values for the date/time&lt;br /&gt;     Set dtObj = dtParser.BuildDateTimeObject(yr, mo, dy, hr, mn, sc, tzo)&lt;br /&gt;    &amp;apos; Print ISOstring and see if it equals testISOStr&lt;br /&gt;    Print &amp;quot;DateTimeParser.toISODateTime (&amp;quot; &amp;amp; dtObj.toISODateTime &amp;amp; &amp;quot;) should equal &amp;quot; &amp;amp; testISOStr", "signatureelements":["Function"], "arguments":[{"label":"Year","comment":"Year to use","valuetype":"Integer-Unsigned","filenamebase":"Year_ValuedElement","fqnprefix":"ZuluVSEDateTimeParserBuildDateTimeObject","qn":"Year","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Year to use&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Year to use","inlinecomment":" \t &apos; Year to use", "attributes":["BY_VAL"]},{"label":"Month","comment":"Month of the year, 1 to 12","valuetype":"Integer-Unsigned","filenamebase":"Month_ValuedElement","fqnprefix":"ZuluVSEDateTimeParserBuildDateTimeObject","qn":"Month","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Month of the year, 1 to 12&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Month of the year, 1 to 12","inlinecomment":" \t &apos; Month of the year, 1 to 12", "attributes":["BY_VAL"]},{"label":"Day","comment":"Day of the month 1 to 28/29/30/31","valuetype":"Integer-Unsigned","filenamebase":"Day_ValuedElement","fqnprefix":"ZuluVSEDateTimeParserBuildDateTimeObject","qn":"Day","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Day of the month 1 to 28/29/30/31&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Day of the month 1 to 28/29/30/31","inlinecomment":" \t &apos; Day of the month 1 to 28/29/30/31", "attributes":["BY_VAL"]},{"label":"Hours","comment":"Hours of the day, 0 to 23","valuetype":"Integer-Unsigned","filenamebase":"Hours_ValuedElement","fqnprefix":"ZuluVSEDateTimeParserBuildDateTimeObject","qn":"Hours","argumentindex":4,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Hours of the day, 0 to 23&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Hours of the day, 0 to 23","inlinecomment":" \t &apos; Hours of the day, 0 to 23", "attributes":["BY_VAL"]},{"label":"Minutes","comment":"Minute of the hour, 0 to 59","valuetype":"Integer-Unsigned","filenamebase":"Minutes_ValuedElement","fqnprefix":"ZuluVSEDateTimeParserBuildDateTimeObject","qn":"Minutes","argumentindex":5,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Minute of the hour, 0 to 59&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Minute of the hour, 0 to 59","inlinecomment":" \t &apos; Minute of the hour, 0 to 59", "attributes":["BY_VAL"]},{"label":"Seconds","comment":"Seconds of the minute, 0 to 59","valuetype":"Integer-Unsigned","filenamebase":"Seconds_ValuedElement","fqnprefix":"ZuluVSEDateTimeParserBuildDateTimeObject","qn":"Seconds","argumentindex":6,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Seconds of the minute, 0 to 59&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Seconds of the minute, 0 to 59","inlinecomment":" \t &apos; Seconds of the minute, 0 to 59", "attributes":["BY_VAL"]},{"label":"UTCOffsetMinutes","comment":"Offset from UTC in minutes, e.g. US Eastern Time will be -5 x 60 = -3000, making 00:00 Eastern = 05:00 UTC.","valuetype":"Integer-Unsigned","filenamebase":"UTCOffsetMinutes_ValuedElement","fqnprefix":"ZuluVSEDateTimeParserBuildDateTimeObject","qn":"UTCOffsetMinutes","argumentindex":7,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Offset from UTC in minutes, e.g. US Eastern Time will be -5 x 60 = -3000, making 00:00 Eastern = 05:00 UTC.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Offset from UTC in minutes, e.g. US Eastern Time will be -5 x 60 = -3000, making 00:00 Eastern = 05:00 UTC.","inlinecomment":" \t &apos; Offset from UTC in minutes, e.g. US Eastern Time will be -5 x 60 = -3000, making 00:00 Eastern = 05:00 UTC."}]},{"label":"ConvertLSFormat","comment":"Converts Lotuscript custom datetime format into c++ datetime format","valuetype":"String","filenamebase":"ConvertLSFormat_Method","fqnprefix":"ZuluVSE.DateTimeParser","qn":"ConvertLSFormat","codesample":"%REM \n    This prints the the current date and time,\n    Format is based on the Lotuscript DateTime format which is translated into c++ DateTime format.\n%END REM\nDim dtObj as DateTimeObject, dtParser as New DateTimeParser\nDim OldFrmt as String, NewFrmt as String, testFmtLocale as String\nSet dtObj = dtParser.GetNow()\ntestFmtLocale = &amp;quot;C&amp;quot;\nOldFrmt = &amp;quot;m/d/yy h:nn&amp;quot; \nNewFrmt = dtParser.ConvertLSFormat(OldFrmt)\nPrint &amp;quot;m/d/yy h:nn: &amp;quot; &amp;amp; dtObj.toString(NewFrmt, testFmtLocale)","signaturecode":64,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(Format As String)","signature":"Function ConvertLSFormat(Format As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Converts Lotuscript custom datetime format into c++ datetime format&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Converts Lotuscript custom datetime format into c++ datetime format","inlinecomment":" \t &apos; Converts Lotuscript custom datetime format into c++ datetime format","parentclassname":"DateTimeParser","codesamplehtml":"%REM &lt;br /&gt;    This prints the the current date and time,&lt;br /&gt;    Format is based on the Lotuscript DateTime format which is translated into c++ DateTime format.&lt;br /&gt;%END REM&lt;br /&gt;Dim dtObj as DateTimeObject, dtParser as New DateTimeParser&lt;br /&gt;Dim OldFrmt as String, NewFrmt as String, testFmtLocale as String&lt;br /&gt;Set dtObj = dtParser.GetNow()&lt;br /&gt;testFmtLocale = &amp;quot;C&amp;quot;&lt;br /&gt;OldFrmt = &amp;quot;m/d/yy h:nn&amp;quot; &lt;br /&gt;NewFrmt = dtParser.ConvertLSFormat(OldFrmt)&lt;br /&gt;Print &amp;quot;m/d/yy h:nn: &amp;quot; &amp;amp; dtObj.toString(NewFrmt, testFmtLocale)", "signatureelements":["Function"], "arguments":[{"label":"Format","comment":"","valuetype":"String","filenamebase":"Format_ValuedElement","fqnprefix":"ZuluVSEDateTimeParserConvertLSFormat","qn":"Format","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"GetNow","comment":"Gets the current server time as a DateTimeObject.","valuetype":"DateTimeObject","filenamebase":"GetNow_Method","fqnprefix":"ZuluVSE.DateTimeParser","qn":"GetNow","codesample":"    %REM \n        This prints the ISODateTime of the DateObject to make sure it was created correctly. In this case,\n        It should print current date/time at UTC.\n    %END REM\n    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser\n    Dim testISOStr as String \n    Set dtObj = dtParser.getNow()\n    &amp;apos; Print ISOstring and see if it equals testISOStr\n    Print &amp;quot;Current Date/Time is &amp;quot; &amp;amp; dtObj.toISODateTime","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function GetNow() As DateTimeObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the current server time as a DateTimeObject.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the current server time as a DateTimeObject.","inlinecomment":" \t &apos; Gets the current server time as a DateTimeObject.","parentclassname":"DateTimeParser","codesamplehtml":"    %REM &lt;br /&gt;        This prints the ISODateTime of the DateObject to make sure it was created correctly. In this case,&lt;br /&gt;        It should print current date/time at UTC.&lt;br /&gt;    %END REM&lt;br /&gt;    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser&lt;br /&gt;    Dim testISOStr as String &lt;br /&gt;    Set dtObj = dtParser.getNow()&lt;br /&gt;    &amp;apos; Print ISOstring and see if it equals testISOStr&lt;br /&gt;    Print &amp;quot;Current Date/Time is &amp;quot; &amp;amp; dtObj.toISODateTime", "signatureelements":["Function"]},{"label":"New","comment":"","valuetype":"DateTimeParser","filenamebase":"New_Method","fqnprefix":"ZuluVSE.DateTimeParser","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As DateTimeParser","modifiers":"","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"DateTimeParser","codesamplehtml":"", "signatureelements":["Function"]},{"label":"ParseDateString","comment":"Creates a DateTimeObject with a date time string, passing the format and locale with which to parse the string.","valuetype":"DateTimeObject","filenamebase":"ParseDateString_Method","fqnprefix":"ZuluVSE.DateTimeParser","qn":"ParseDateString","codesample":"    %REM \n        This prints the ISODateTime of the DateObject to make sure it was created correctly. In this case,\n        It should print &amp;quot;DateTimeParser.toISODateTime (2023-02-20T20:49:13Z) should be the same date time as 02/20/2023 20:49:13 Z&amp;quot;\n    %END REM\n    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser\n    Dim testDtStr as String, testDtFormat as String\n    testDtStr = &amp;quot;02/20/2023 20:49:13 Z&amp;quot;\n    testDtFormat = &amp;quot;%m/%d/%Y %H:%M:%S %Z&amp;quot;\n    Set dtObj = dtParser.ParseDateString(testDtStr, testDtFormat, &amp;quot;C&amp;quot;)\n    &amp;apos; Print ISOstring and see if it equals testISOStr\n    Print &amp;quot;DateTimeParser.toISODateTime (&amp;quot; &amp;amp; dtObj.toISODateTime &amp;amp; &amp;quot;) should be the same date time as &amp;quot; &amp;amp; testDtStr","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DateTime As String, Format As String, Locale As String)","signature":"Function ParseDateString(DateTime As String, Format As String, Locale As String) As DateTimeObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a DateTimeObject with a date time string, passing the format and locale with which to parse the string.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a DateTimeObject with a date time string, passing the format and locale with which to parse the string.","inlinecomment":" \t &apos; Creates a DateTimeObject with a date time string, passing the format and locale with which to parse the string.","parentclassname":"DateTimeParser","codesamplehtml":"    %REM &lt;br /&gt;        This prints the ISODateTime of the DateObject to make sure it was created correctly. In this case,&lt;br /&gt;        It should print &amp;quot;DateTimeParser.toISODateTime (2023-02-20T20:49:13Z) should be the same date time as 02/20/2023 20:49:13 Z&amp;quot;&lt;br /&gt;    %END REM&lt;br /&gt;    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser&lt;br /&gt;    Dim testDtStr as String, testDtFormat as String&lt;br /&gt;    testDtStr = &amp;quot;02/20/2023 20:49:13 Z&amp;quot;&lt;br /&gt;    testDtFormat = &amp;quot;%m/%d/%Y %H:%M:%S %Z&amp;quot;&lt;br /&gt;    Set dtObj = dtParser.ParseDateString(testDtStr, testDtFormat, &amp;quot;C&amp;quot;)&lt;br /&gt;    &amp;apos; Print ISOstring and see if it equals testISOStr&lt;br /&gt;    Print &amp;quot;DateTimeParser.toISODateTime (&amp;quot; &amp;amp; dtObj.toISODateTime &amp;amp; &amp;quot;) should be the same date time as &amp;quot; &amp;amp; testDtStr", "signatureelements":["Function"], "arguments":[{"label":"DateTime","comment":"String of some date-time format","valuetype":"String","filenamebase":"DateTime_ValuedElement","fqnprefix":"ZuluVSEDateTimeParserParseDateString","qn":"DateTime","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String of some date-time format&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String of some date-time format","inlinecomment":" \t &apos; String of some date-time format"},{"label":"Format","comment":"Format with which to parse the string","valuetype":"String","filenamebase":"Format_ValuedElement","fqnprefix":"ZuluVSEDateTimeParserParseDateString","qn":"Format","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Format with which to parse the string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Format with which to parse the string","inlinecomment":" \t &apos; Format with which to parse the string"},{"label":"Locale","comment":"Locale to apply when parsing the date-time string","valuetype":"String","filenamebase":"Locale_ValuedElement","fqnprefix":"ZuluVSEDateTimeParserParseDateString","qn":"Locale","argumentindex":3,"optionalvalue":"LIT_STR(&quot;&quot;)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Locale to apply when parsing the date-time string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Locale to apply when parsing the date-time string","inlinecomment":" \t &apos; Locale to apply when parsing the date-time string", "attributes":["CONST","OPTIONAL"]}]},{"label":"ParseISOstring","comment":"Creates a DateTimeObject from an ISO 8601 date-time format, either ending with Z or an offset.","valuetype":"DateTimeObject","filenamebase":"ParseISOstring_Method","fqnprefix":"ZuluVSE.DateTimeParser","qn":"ParseISOstring","codesample":"    %REM \n        This prints the ISODateTime of the DateObject to make sure it was created correctly. In this case,\n        It should print &amp;quot;Test Epoch built from ParseISOString (1676926153) matches test Epoch (1676926153)&amp;quot;\n    %END REM\n    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser\n    Dim testISOStr as String, testEpoch as Long\n    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;\n    testEpoch = 1676926153\n    Set dtObj = dtParser.ParseISOString(testISOStr)\n    &amp;apos; Print ISOstring and see if it equals testISOStr\n    Print &amp;quot;Test Epoch built from ParseISOString (&amp;quot; &amp;amp; Cstr(dtOBj.EpochTime) &amp;amp; &amp;quot;) matches test Epoch (&amp;quot; &amp;amp; Cstr(testEpoch) &amp;amp; &amp;quot;)&amp;quot;","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(ISODateTime As String)","signature":"Function ParseISOstring(ISODateTime As String) As DateTimeObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a DateTimeObject from an ISO 8601 date-time format, either ending with Z or an offset.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a DateTimeObject from an ISO 8601 date-time format, either ending with Z or an offset.","inlinecomment":" \t &apos; Creates a DateTimeObject from an ISO 8601 date-time format, either ending with Z or an offset.","parentclassname":"DateTimeParser","codesamplehtml":"    %REM &lt;br /&gt;        This prints the ISODateTime of the DateObject to make sure it was created correctly. In this case,&lt;br /&gt;        It should print &amp;quot;Test Epoch built from ParseISOString (1676926153) matches test Epoch (1676926153)&amp;quot;&lt;br /&gt;    %END REM&lt;br /&gt;    Dim dtObj as DateTimeObject, dtParser as New DateTimeParser&lt;br /&gt;    Dim testISOStr as String, testEpoch as Long&lt;br /&gt;    testISOStr = &amp;quot;2023-02-20T20:49:13Z&amp;quot;&lt;br /&gt;    testEpoch = 1676926153&lt;br /&gt;    Set dtObj = dtParser.ParseISOString(testISOStr)&lt;br /&gt;    &amp;apos; Print ISOstring and see if it equals testISOStr&lt;br /&gt;    Print &amp;quot;Test Epoch built from ParseISOString (&amp;quot; &amp;amp; Cstr(dtOBj.EpochTime) &amp;amp; &amp;quot;) matches test Epoch (&amp;quot; &amp;amp; Cstr(testEpoch) &amp;amp; &amp;quot;)&amp;quot;", "signatureelements":["Function"], "arguments":[{"label":"ISODateTime","comment":"String in ISO 8601 date-time format","valuetype":"String","filenamebase":"ISODateTime_ValuedElement","fqnprefix":"ZuluVSEDateTimeParserParseISOstring","qn":"ISODateTime","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String in ISO 8601 date-time format&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String in ISO 8601 date-time format","inlinecomment":" \t &apos; String in ISO 8601 date-time format"}]},{"label":"RegisterVSEPath","comment":"","valuetype":"Boolean","filenamebase":"RegisterVSEPath_Method","fqnprefix":"ZuluVSE.DateTimeParser","qn":"RegisterVSEPath","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function RegisterVSEPath() As Boolean","modifiers":"","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"DateTimeParser","codesamplehtml":"", "signatureelements":["Function"]},{"label":"VSEVersion","comment":"","valuetype":"String","filenamebase":"VSEVersion_Method","fqnprefix":"ZuluVSE.DateTimeParser","qn":"Get.VSEVersion","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get VSEVersion As String","modifiers":"Get","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"DateTimeParser","codesamplehtml":"", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]}]}], "platforms":["LINUX","W64"]}
