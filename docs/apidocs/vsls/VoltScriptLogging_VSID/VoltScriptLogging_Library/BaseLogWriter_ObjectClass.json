{"classname":"BaseLogWriter","comment":"Abstract class for writing log entries from the LogSession","valuetype":"","filenamebase":"BaseLogWriter_ObjectClass","fqnprefix":"VoltScriptLogging","qn":"BaseLogWriter","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"7AD3BBAF0294573900258A7F004F94A5","classid":"3B373E9EC1C6805D00258B1C00328BBC","signature":"Public Class BaseLogWriter","modifiers":"Public","classname":"BaseLogWriter","parentclassname":"None","constructorsignature":"Public Sub New(label As String, minLevel As Integer, maxLevel As Integer, formatter As String)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Abstract class for writing log entries from the LogSession&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Abstract class for writing log entries from the LogSession","inlinecomment":" \t &apos; Abstract class for writing log entries from the LogSession","codesamplehtml":"", "methods":[{"label":"convertLogEntryToMessage","comment":"Generates a message using information from a logEntry instance and the object&amp;apos;s formatter text (one of the constructor arguments).  Override this method to skip using the formatter.","valuetype":"String","filenamebase":"convertLogEntryToMessage_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"convertLogEntryToMessage","codesample":"Function convertLogEntryToMessage(logEntry as LogEntry) as String\n    Return logEntry.levelName &amp;amp; &amp;quot;: &amp;quot; &amp;amp; logEntry.message &amp;amp; Chr(10) &amp;amp; logEntry.stackTrace\nEnd Function","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(logEntry As LogEntry)","signature":"Public Function convertLogEntryToMessage(logEntry As LogEntry) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Generates a message using information from a logEntry instance and the object&amp;apos;s formatter text (one of the constructor arguments).  Override this method to skip using the formatter.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Generates a message using information from a logEntry instance and the object&amp;apos;s formatter text (one of the constructor arguments).  Override this method to skip using the formatter.","inlinecomment":" \t &apos; Generates a message using information from a logEntry instance and the object&amp;apos;s formatter text (one of the constructor arguments).  Override this method to skip using the formatter.","parentclassname":"BaseLogWriter","codesamplehtml":"Function convertLogEntryToMessage(logEntry as LogEntry) as String&lt;br /&gt;    Return logEntry.levelName &amp;amp; &amp;quot;: &amp;quot; &amp;amp; logEntry.message &amp;amp; Chr(10) &amp;amp; logEntry.stackTrace&lt;br /&gt;End Function", "signatureelements":["Public","Function"], "arguments":[{"label":"logEntry","comment":"Log Entry from which to generate the message.","valuetype":"LogEntry","filenamebase":"logEntry_ValuedElement","fqnprefix":"VoltScriptLoggingBaseLogWriterconvertLogEntryToMessage","qn":"logEntry","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Log Entry from which to generate the message.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Log Entry from which to generate the message.","inlinecomment":" \t &apos; Log Entry from which to generate the message."}]},{"label":"writeToLog","comment":"Write all entries, as appropriate, to the log. You should not need to modify this method, it is automatically called in the Delete methods.","valuetype":"Boolean","filenamebase":"writeToLog_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"writeToLog","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(session As LogSession)","signature":"Public Function writeToLog(session As LogSession) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Write all entries, as appropriate, to the log. You should not need to modify this method, it is automatically called in the Delete methods.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Write all entries, as appropriate, to the log. You should not need to modify this method, it is automatically called in the Delete methods.","inlinecomment":" \t &apos; Write all entries, as appropriate, to the log. You should not need to modify this method, it is automatically called in the Delete methods.","parentclassname":"BaseLogWriter","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"session","comment":"Session from which to get the entries to be written","valuetype":"LogSession","filenamebase":"session_ValuedElement","fqnprefix":"VoltScriptLoggingBaseLogWriterwriteToLog","qn":"session","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Session from which to get the entries to be written&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Session from which to get the entries to be written","inlinecomment":" \t &apos; Session from which to get the entries to be written"}]},{"label":"formatter","comment":"String to manage output format, using mustache templating for properties of a Log Entry. Mustache template variables must be upper case.","valuetype":"String","filenamebase":"formatter_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"Get.formatter","codesample":"Dim fmt as String\nDim logger as BaseLogWriter\nfmt = |{{LEVELNAME}}: [{{TIMESTAMP}}] {{MESSAGE}}\n{{extInfo}}|\nSet logger = new BaseLogWriter(&amp;quot;ConsoleLogger&amp;quot;, LEVEL_INFO, fmt)","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get formatter As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to manage output format, using mustache templating for properties of a Log Entry. Mustache template variables must be upper case.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to manage output format, using mustache templating for properties of a Log Entry. Mustache template variables must be upper case.","inlinecomment":" \t &apos; String to manage output format, using mustache templating for properties of a Log Entry. Mustache template variables must be upper case.","parentclassname":"BaseLogWriter","codesamplehtml":"Dim fmt as String&lt;br /&gt;Dim logger as BaseLogWriter&lt;br /&gt;fmt = |{{LEVELNAME}}: [{{TIMESTAMP}}] {{MESSAGE}}&lt;br /&gt;{{extInfo}}|&lt;br /&gt;Set logger = new BaseLogWriter(&amp;quot;ConsoleLogger&amp;quot;, LEVEL_INFO, fmt)", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"label","comment":"Label with which to refer to the log writer","valuetype":"String","filenamebase":"label_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"Get.label","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get label As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Label with which to refer to the log writer&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Label with which to refer to the log writer","inlinecomment":" \t &apos; Label with which to refer to the log writer","parentclassname":"BaseLogWriter","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"maxLevel","comment":"Level at which to log out","valuetype":"Integer","filenamebase":"maxLevel_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"Get.maxLevel","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get maxLevel As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Level at which to log out&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Level at which to log out","inlinecomment":" \t &apos; Level at which to log out","parentclassname":"BaseLogWriter","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"minLevel","comment":"","valuetype":"Integer","filenamebase":"minLevel_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"Get.minLevel","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get minLevel As Integer","modifiers":"Public Get","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"BaseLogWriter","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"Delete","comment":"Destructor for the class.  \nRuns during cleanup of the object instance and outputs log entries.","valuetype":"","filenamebase":"Delete_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"Delete","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub Delete()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Destructor for the class.  &lt;br /&gt;Runs during cleanup of the object instance and outputs log entries.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Destructor for the class.  &lt;br /&gt;Runs during cleanup of the object instance and outputs log entries.","inlinecomment":" \t &apos; Destructor for the class.  \nRuns during cleanup of the object instance and outputs log entries.","parentclassname":"BaseLogWriter","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"initializeLog","comment":"Overload this method to do any setup before processing the LogEntry objects.","valuetype":"","filenamebase":"initializeLog_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"initializeLog","codesample":"Sub initializeLog()\n    Print &amp;quot;=== STARTING LOG &amp;quot; &amp;amp; Me.label &amp;amp; &amp;quot;===&amp;quot;\nEnd Sub","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub initializeLog()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Overload this method to do any setup before processing the LogEntry objects.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Overload this method to do any setup before processing the LogEntry objects.","inlinecomment":" \t &apos; Overload this method to do any setup before processing the LogEntry objects.","parentclassname":"BaseLogWriter","codesamplehtml":"Sub initializeLog()&lt;br /&gt;    Print &amp;quot;=== STARTING LOG &amp;quot; &amp;amp; Me.label &amp;amp; &amp;quot;===&amp;quot;&lt;br /&gt;End Sub", "signatureelements":["Public","Sub"]},{"label":"New","comment":"Constructor for the object.","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"New","codesample":"&amp;apos; This creates a log to print the level name and message for all logs of all levels\nDim baseWriter as New BaseLogWriter(&amp;quot;Base Writer&amp;quot;, LOG_TRACE, LOG_FATAL, &amp;quot;{{LEVELNAME}}: {{MESSAGE}}&amp;quot;)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(label As String, minLevel As Integer, maxLevel As Integer, formatter As String)","signature":"Public Sub New(label As String, minLevel As Integer, maxLevel As Integer, formatter As String)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor for the object.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor for the object.","inlinecomment":" \t &apos; Constructor for the object.","parentclassname":"BaseLogWriter","codesamplehtml":"&amp;apos; This creates a log to print the level name and message for all logs of all levels&lt;br /&gt;Dim baseWriter as New BaseLogWriter(&amp;quot;Base Writer&amp;quot;, LOG_TRACE, LOG_FATAL, &amp;quot;{{LEVELNAME}}: {{MESSAGE}}&amp;quot;)", "signatureelements":["Public","Sub"], "arguments":[{"label":"label","comment":"Name for the log writer, which will be the key when added to the session","valuetype":"String","filenamebase":"label_ValuedElement","fqnprefix":"VoltScriptLoggingBaseLogWriterNew","qn":"label","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name for the log writer, which will be the key when added to the session&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name for the log writer, which will be the key when added to the session","inlinecomment":" \t &apos; Name for the log writer, which will be the key when added to the session"},{"label":"minLevel","comment":"Minimum level to log out","valuetype":"Integer","filenamebase":"minLevel_ValuedElement","fqnprefix":"VoltScriptLoggingBaseLogWriterNew","qn":"minLevel","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Minimum level to log out&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Minimum level to log out","inlinecomment":" \t &apos; Minimum level to log out"},{"label":"maxLevel","comment":"Maximum level to log out","valuetype":"Integer","filenamebase":"maxLevel_ValuedElement","fqnprefix":"VoltScriptLoggingBaseLogWriterNew","qn":"maxLevel","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Maximum level to log out&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Maximum level to log out","inlinecomment":" \t &apos; Maximum level to log out"},{"label":"formatter","comment":"A string format to log out, which can include mustache template format to inlcude LogEntry properties","valuetype":"String","filenamebase":"formatter_ValuedElement","fqnprefix":"VoltScriptLoggingBaseLogWriterNew","qn":"formatter","argumentindex":4,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;A string format to log out, which can include mustache template format to inlcude LogEntry properties&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"A string format to log out, which can include mustache template format to inlcude LogEntry properties","inlinecomment":" \t &apos; A string format to log out, which can include mustache template format to inlcude LogEntry properties"}]},{"label":"outputLogEntryMessage","comment":"Writes a message to the output.    Overload this message for specific implementations.","valuetype":"","filenamebase":"outputLogEntryMessage_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"outputLogEntryMessage","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(message As String)","signature":"Public Sub outputLogEntryMessage(message As String)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Writes a message to the output.    Overload this message for specific implementations.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Writes a message to the output.    Overload this message for specific implementations.","inlinecomment":" \t &apos; Writes a message to the output.    Overload this message for specific implementations.","parentclassname":"BaseLogWriter","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"message","comment":"Message to be outputted","valuetype":"String","filenamebase":"message_ValuedElement","fqnprefix":"VoltScriptLoggingBaseLogWriteroutputLogEntryMessage","qn":"message","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Message to be outputted&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Message to be outputted","inlinecomment":" \t &apos; Message to be outputted"}]},{"label":"terminateLog","comment":"Overload this method to do any setup after processing the LogEntry objects.  This method is called internally at the end of the writeToLog() method. ","valuetype":"","filenamebase":"terminateLog_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"terminateLog","codesample":"Sub terminateLog()\n    Print &amp;quot;=== FINISHING LOG &amp;quot; &amp;amp; Me.label &amp;amp; &amp;quot;===&amp;quot;\nEnd Sub","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub terminateLog()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Overload this method to do any setup after processing the LogEntry objects.  This method is called internally at the end of the writeToLog() method. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Overload this method to do any setup after processing the LogEntry objects.  This method is called internally at the end of the writeToLog() method. ","inlinecomment":" \t &apos; Overload this method to do any setup after processing the LogEntry objects.  This method is called internally at the end of the writeToLog() method. ","parentclassname":"BaseLogWriter","codesamplehtml":"Sub terminateLog()&lt;br /&gt;    Print &amp;quot;=== FINISHING LOG &amp;quot; &amp;amp; Me.label &amp;amp; &amp;quot;===&amp;quot;&lt;br /&gt;End Sub", "signatureelements":["Public","Sub"]}]}
