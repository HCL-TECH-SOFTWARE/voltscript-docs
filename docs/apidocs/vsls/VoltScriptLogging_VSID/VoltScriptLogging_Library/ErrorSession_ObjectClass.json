{"classname":"ErrorSession","comment":"Stack Collection of ErrorEntry objects. ","valuetype":"","filenamebase":"ErrorSession_ObjectClass","fqnprefix":"VoltScriptLogging","qn":"ErrorSession","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"7AD3BBAF0294573900258A7F004F94A5","classid":"86D0FA588865F2E280258B25002EA321","signature":"Public Class ErrorSession","modifiers":"Public","classname":"ErrorSession","parentclassname":"None","constructorsignature":"Public Sub New()","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Stack Collection of ErrorEntry objects. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Stack Collection of ErrorEntry objects. ","inlinecomment":" \t &apos; Stack Collection of ErrorEntry objects. ","codesamplehtml":"", "methods":[{"label":"createCustomErrorEntry","comment":"Spawns a new Custom ErrorEntry object and adds it to the ErrorSession. This can be used instead of a Try/Catch. Conditionally spawns a LogEntry in the Global LogSession instance. ","valuetype":"ErrorEntry","filenamebase":"createCustomErrorEntry_Method","fqnprefix":"VoltScriptLogging.ErrorSession","qn":"createCustomErrorEntry","codesample":"If response.ResponseCode != 200 Then\n    Call getErrorSession().createCustomErrorEntity(&amp;quot;Bad response: &amp;quot; &amp;amp; response.ResponseCode, 1400, 275, LOG_WARN)\n    Return False\nEnd If","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(message As String, code As Integer, lineNum As Integer, levelNum As Integer)","signature":"Public Function createCustomErrorEntry(message As String, code As Integer, lineNum As Integer, levelNum As Integer) As ErrorEntry","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Spawns a new Custom ErrorEntry object and adds it to the ErrorSession. This can be used instead of a Try/Catch. Conditionally spawns a LogEntry in the Global LogSession instance. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Spawns a new Custom ErrorEntry object and adds it to the ErrorSession. This can be used instead of a Try/Catch. Conditionally spawns a LogEntry in the Global LogSession instance. ","inlinecomment":" \t &apos; Spawns a new Custom ErrorEntry object and adds it to the ErrorSession. This can be used instead of a Try/Catch. Conditionally spawns a LogEntry in the Global LogSession instance. ","parentclassname":"ErrorSession","codesamplehtml":"If response.ResponseCode != 200 Then&lt;br /&gt;    Call getErrorSession().createCustomErrorEntity(&amp;quot;Bad response: &amp;quot; &amp;amp; response.ResponseCode, 1400, 275, LOG_WARN)&lt;br /&gt;    Return False&lt;br /&gt;End If", "signatureelements":["Public","Function"], "arguments":[{"label":"message","comment":"Error message describing the error.  If code is less than 1 the value of Error$() will be used.","valuetype":"String","filenamebase":"message_ValuedElement","fqnprefix":"VoltScriptLoggingErrorSessioncreateCustomErrorEntry","qn":"message","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Error message describing the error.  If code is less than 1 the value of Error$() will be used.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Error message describing the error.  If code is less than 1 the value of Error$() will be used.","inlinecomment":" \t &apos; Error message describing the error.  If code is less than 1 the value of Error$() will be used."},{"label":"code","comment":"Numeric code of the error.  If less than 1 the value of Err() will be used.  ","valuetype":"Integer","filenamebase":"code_ValuedElement","fqnprefix":"VoltScriptLoggingErrorSessioncreateCustomErrorEntry","qn":"code","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Numeric code of the error.  If less than 1 the value of Err() will be used.  &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Numeric code of the error.  If less than 1 the value of Err() will be used.  ","inlinecomment":" \t &apos; Numeric code of the error.  If less than 1 the value of Err() will be used.  "},{"label":"lineNum","comment":"Line number in the source code where the error occurred. If code is less than 1 the value of Erl() will be used. ","valuetype":"Integer","filenamebase":"lineNum_ValuedElement","fqnprefix":"VoltScriptLoggingErrorSessioncreateCustomErrorEntry","qn":"lineNum","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Line number in the source code where the error occurred. If code is less than 1 the value of Erl() will be used. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Line number in the source code where the error occurred. If code is less than 1 the value of Erl() will be used. ","inlinecomment":" \t &apos; Line number in the source code where the error occurred. If code is less than 1 the value of Erl() will be used. "},{"label":"levelNum","comment":"Logging Level (NO_LOGGING, LOG_TRACE, LOG_DEBUG, etc).  Used for conditionally creating a LogEntry ","valuetype":"Integer","filenamebase":"levelNum_ValuedElement","fqnprefix":"VoltScriptLoggingErrorSessioncreateCustomErrorEntry","qn":"levelNum","argumentindex":4,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Logging Level (NO_LOGGING, LOG_TRACE, LOG_DEBUG, etc).  Used for conditionally creating a LogEntry &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Logging Level (NO_LOGGING, LOG_TRACE, LOG_DEBUG, etc).  Used for conditionally creating a LogEntry ","inlinecomment":" \t &apos; Logging Level (NO_LOGGING, LOG_TRACE, LOG_DEBUG, etc).  Used for conditionally creating a LogEntry "}]},{"label":"createErrorEntry","comment":"Spawns a new ErrorEntry object and adds it to the ErrorSession.  Conditionally spawns a LogEntry in the Global LogSession instance. ","valuetype":"ErrorEntry","filenamebase":"createErrorEntry_Method","fqnprefix":"VoltScriptLogging.ErrorSession","qn":"createErrorEntry","codesample":"Try\n    &amp;apos; Do something\nCatch\n    Call getErrorSession().createErrorEntry()\nEnd Try","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(levelNum As Integer)","signature":"Public Function createErrorEntry(levelNum As Integer) As ErrorEntry","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Spawns a new ErrorEntry object and adds it to the ErrorSession.  Conditionally spawns a LogEntry in the Global LogSession instance. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Spawns a new ErrorEntry object and adds it to the ErrorSession.  Conditionally spawns a LogEntry in the Global LogSession instance. ","inlinecomment":" \t &apos; Spawns a new ErrorEntry object and adds it to the ErrorSession.  Conditionally spawns a LogEntry in the Global LogSession instance. ","parentclassname":"ErrorSession","codesamplehtml":"Try&lt;br /&gt;    &amp;apos; Do something&lt;br /&gt;Catch&lt;br /&gt;    Call getErrorSession().createErrorEntry()&lt;br /&gt;End Try", "signatureelements":["Public","Function"], "arguments":[{"label":"levelNum","comment":"Logging Level (NO_LOGGING, LOG_TRACE, LOG_DEBUG, etc).  Used for conditionally creating a LogEntry ","valuetype":"Integer","filenamebase":"levelNum_ValuedElement","fqnprefix":"VoltScriptLoggingErrorSessioncreateErrorEntry","qn":"levelNum","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Logging Level (NO_LOGGING, LOG_TRACE, LOG_DEBUG, etc).  Used for conditionally creating a LogEntry &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Logging Level (NO_LOGGING, LOG_TRACE, LOG_DEBUG, etc).  Used for conditionally creating a LogEntry ","inlinecomment":" \t &apos; Logging Level (NO_LOGGING, LOG_TRACE, LOG_DEBUG, etc).  Used for conditionally creating a LogEntry "}]},{"label":"errorCount","comment":"Count of errors currently contained in the ErrorSession. ","valuetype":"Integer","filenamebase":"errorCount_Method","fqnprefix":"VoltScriptLogging.ErrorSession","qn":"Get.errorCount","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get errorCount As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Count of errors currently contained in the ErrorSession. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Count of errors currently contained in the ErrorSession. ","inlinecomment":" \t &apos; Count of errors currently contained in the ErrorSession. ","parentclassname":"ErrorSession","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"errors","comment":"Array of ErrorEntry objects representing all of the errors that have been added to the session. ","valuetype":"Variant","filenamebase":"errors_Method","fqnprefix":"VoltScriptLogging.ErrorSession","qn":"Get.errors","codesample":"&amp;apos; Check if we only have user-defined error code\nDim languageErrors as Boolean\nlanguageErrors = False\nForAll errors in getErrorSession().errors\n    if (error.code &amp;lt; 1000) Then languageErrors = True\nEnd ForAll","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get errors As Variant","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array of ErrorEntry objects representing all of the errors that have been added to the session. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array of ErrorEntry objects representing all of the errors that have been added to the session. ","inlinecomment":" \t &apos; Array of ErrorEntry objects representing all of the errors that have been added to the session. ","parentclassname":"ErrorSession","codesamplehtml":"&amp;apos; Check if we only have user-defined error code&lt;br /&gt;Dim languageErrors as Boolean&lt;br /&gt;languageErrors = False&lt;br /&gt;ForAll errors in getErrorSession().errors&lt;br /&gt;    if (error.code &amp;lt; 1000) Then languageErrors = True&lt;br /&gt;End ForAll", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"New","comment":"Constructor for the object.  Can only be used when called from method getErrorSession() \nDo not directly use this constructor, use getErrorSession() instead.","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptLogging.ErrorSession","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor for the object.  Can only be used when called from method getErrorSession() &lt;br /&gt;Do not directly use this constructor, use getErrorSession() instead.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor for the object.  Can only be used when called from method getErrorSession() &lt;br /&gt;Do not directly use this constructor, use getErrorSession() instead.","inlinecomment":" \t &apos; Constructor for the object.  Can only be used when called from method getErrorSession() \nDo not directly use this constructor, use getErrorSession() instead.","parentclassname":"ErrorSession","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"reset","comment":"Resets the ErrorSession and clears all error information. This method does not reset the globalLogSession.","valuetype":"","filenamebase":"reset_Method","fqnprefix":"VoltScriptLogging.ErrorSession","qn":"reset","codesample":"If (getErrorSession().errorCount &amp;gt; 0) Then\n    getErrorSession().reset()\n    Return False\nEnd If","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub reset()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Resets the ErrorSession and clears all error information. This method does not reset the globalLogSession.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Resets the ErrorSession and clears all error information. This method does not reset the globalLogSession.","inlinecomment":" \t &apos; Resets the ErrorSession and clears all error information. This method does not reset the globalLogSession.","parentclassname":"ErrorSession","codesamplehtml":"If (getErrorSession().errorCount &amp;gt; 0) Then&lt;br /&gt;    getErrorSession().reset()&lt;br /&gt;    Return False&lt;br /&gt;End If", "signatureelements":["Public","Sub"]}]}
