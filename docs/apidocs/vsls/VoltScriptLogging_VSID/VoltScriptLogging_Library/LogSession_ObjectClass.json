{"classname":"LogSession","comment":"Base class for VoltScript logging","valuetype":"","filenamebase":"LogSession_ObjectClass","fqnprefix":"VoltScriptLogging","qn":"LogSession","codesample":"Dim log as New LogSession","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"7AD3BBAF0294573900258A7F004F94A5","classid":"497E755B650E585B00258A7F004FD469","signature":"Public Class LogSession","modifiers":"Public","classname":"LogSession","parentclassname":"None","constructorsignature":"Public Sub New()","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base class for VoltScript logging&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base class for VoltScript logging","inlinecomment":" \t &apos; Base class for VoltScript logging","codesamplehtml":"Dim log as New LogSession", "methods":[{"label":"createLogEntry","comment":"Creates a new LogEntry object. ","valuetype":"LogEntry","filenamebase":"createLogEntry_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"createLogEntry","codesample":"Call globalLogSession.createLogEntry(LOG_DEBUG, &amp;quot;Entering function doSomething&amp;quot;, &amp;quot;&amp;quot;, Nothing)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(levelNum As Integer, message As String, extInfo As String, eeInstance As ErrorEntry)","signature":"Public Function createLogEntry(levelNum As Integer, message As String, extInfo As String, eeInstance As ErrorEntry) As LogEntry","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a new LogEntry object. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a new LogEntry object. ","inlinecomment":" \t &apos; Creates a new LogEntry object. ","parentclassname":"LogSession","codesamplehtml":"Call globalLogSession.createLogEntry(LOG_DEBUG, &amp;quot;Entering function doSomething&amp;quot;, &amp;quot;&amp;quot;, Nothing)", "signatureelements":["Public","Function"], "arguments":[{"label":"levelNum","comment":"the Logging Level of the entry; you can use the constant as well","valuetype":"Integer","filenamebase":"levelNum_ValuedElement","fqnprefix":"VoltScriptLoggingLogSessioncreateLogEntry","qn":"levelNum","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;the Logging Level of the entry; you can use the constant as well&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"the Logging Level of the entry; you can use the constant as well","inlinecomment":" \t &apos; the Logging Level of the entry; you can use the constant as well"},{"label":"message","comment":"the text message of the entry","valuetype":"String","filenamebase":"message_ValuedElement","fqnprefix":"VoltScriptLoggingLogSessioncreateLogEntry","qn":"message","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;the text message of the entry&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"the text message of the entry","inlinecomment":" \t &apos; the text message of the entry"},{"label":"extInfo","comment":"Any extended information to include with the entry or blank","valuetype":"String","filenamebase":"extInfo_ValuedElement","fqnprefix":"VoltScriptLoggingLogSessioncreateLogEntry","qn":"extInfo","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Any extended information to include with the entry or blank&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Any extended information to include with the entry or blank","inlinecomment":" \t &apos; Any extended information to include with the entry or blank"},{"label":"eeInstance","comment":"ErrorEntry instance spawning the LogEntry instance.  Nothing if not being spawned by an ErrorEntry ","valuetype":"ErrorEntry","filenamebase":"eeInstance_ValuedElement","fqnprefix":"VoltScriptLoggingLogSessioncreateLogEntry","qn":"eeInstance","argumentindex":4,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;ErrorEntry instance spawning the LogEntry instance.  Nothing if not being spawned by an ErrorEntry &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"ErrorEntry instance spawning the LogEntry instance.  Nothing if not being spawned by an ErrorEntry ","inlinecomment":" \t &apos; ErrorEntry instance spawning the LogEntry instance.  Nothing if not being spawned by an ErrorEntry "}]},{"label":"getLogEntriesByLevel","comment":"Filters the LogEntry objects into an array containing just those at or above the minimum level and also at or below the maximum level.","valuetype":"Variant","filenamebase":"getLogEntriesByLevel_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"getLogEntriesByLevel","codesample":"Dim filteredEntries as Variant\nfilteredEntries = globalLogSession.getLogEntriesByLevel(LOG_FATAL, LOG_FATAL)\nIf (IsEmpty(filteredEntries)) Then Print &amp;quot;No fatal errors&amp;quot;","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(minLevel As Integer, maxLevel As Integer)","signature":"Public Function getLogEntriesByLevel(minLevel As Integer, maxLevel As Integer) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Filters the LogEntry objects into an array containing just those at or above the minimum level and also at or below the maximum level.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Filters the LogEntry objects into an array containing just those at or above the minimum level and also at or below the maximum level.","inlinecomment":" \t &apos; Filters the LogEntry objects into an array containing just those at or above the minimum level and also at or below the maximum level.","parentclassname":"LogSession","codesamplehtml":"Dim filteredEntries as Variant&lt;br /&gt;filteredEntries = globalLogSession.getLogEntriesByLevel(LOG_FATAL, LOG_FATAL)&lt;br /&gt;If (IsEmpty(filteredEntries)) Then Print &amp;quot;No fatal errors&amp;quot;", "signatureelements":["Public","Function"], "arguments":[{"label":"minLevel","comment":"Minimum level of logs to retrieve","valuetype":"Integer","filenamebase":"minLevel_ValuedElement","fqnprefix":"VoltScriptLoggingLogSessiongetLogEntriesByLevel","qn":"minLevel","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Minimum level of logs to retrieve&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Minimum level of logs to retrieve","inlinecomment":" \t &apos; Minimum level of logs to retrieve"},{"label":"maxLevel","comment":"Maximum level of the logs to retrieve","valuetype":"Integer","filenamebase":"maxLevel_ValuedElement","fqnprefix":"VoltScriptLoggingLogSessiongetLogEntriesByLevel","qn":"maxLevel","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Maximum level of the logs to retrieve&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Maximum level of the logs to retrieve","inlinecomment":" \t &apos; Maximum level of the logs to retrieve"}]},{"label":"getLogEntryByID","comment":"Retrieves the LogEntry with a specified ID.  Nothing if not found. ","valuetype":"LogEntry","filenamebase":"getLogEntryByID_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"getLogEntryByID","codesample":"If (globalLogSession.getEntryByID(id) is Nothing) Then\n    Print &amp;quot;Cannot find LogEntry with that ID&amp;quot;\nEnd If","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(entryID As String)","signature":"Public Function getLogEntryByID(entryID As String) As LogEntry","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Retrieves the LogEntry with a specified ID.  Nothing if not found. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Retrieves the LogEntry with a specified ID.  Nothing if not found. ","inlinecomment":" \t &apos; Retrieves the LogEntry with a specified ID.  Nothing if not found. ","parentclassname":"LogSession","codesamplehtml":"If (globalLogSession.getEntryByID(id) is Nothing) Then&lt;br /&gt;    Print &amp;quot;Cannot find LogEntry with that ID&amp;quot;&lt;br /&gt;End If", "signatureelements":["Public","Function"], "arguments":[{"label":"entryID","comment":"the entryID of the desired log entry","valuetype":"String","filenamebase":"entryID_ValuedElement","fqnprefix":"VoltScriptLoggingLogSessiongetLogEntryByID","qn":"entryID","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;the entryID of the desired log entry&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"the entryID of the desired log entry","inlinecomment":" \t &apos; the entryID of the desired log entry"}]},{"label":"entryCount","comment":"Number of LogEntry instances contained by the LogSession","valuetype":"Integer","filenamebase":"entryCount_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"Get.entryCount","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get entryCount As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Number of LogEntry instances contained by the LogSession&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Number of LogEntry instances contained by the LogSession","inlinecomment":" \t &apos; Number of LogEntry instances contained by the LogSession","parentclassname":"LogSession","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"entryIDs","comment":"Array of entryIDs for all LogEntry instances contained within the object.   Returns and empty variant if no LogEntry instances exist.","valuetype":"Variant","filenamebase":"entryIDs_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"Get.entryIDs","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get entryIDs As Variant","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array of entryIDs for all LogEntry instances contained within the object.   Returns and empty variant if no LogEntry instances exist.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array of entryIDs for all LogEntry instances contained within the object.   Returns and empty variant if no LogEntry instances exist.","inlinecomment":" \t &apos; Array of entryIDs for all LogEntry instances contained within the object.   Returns and empty variant if no LogEntry instances exist.","parentclassname":"LogSession","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"lastEntry","comment":"The last LogEntry that has been added to the object.  Nothing if no LogEntry instances have been added.","valuetype":"LogEntry","filenamebase":"lastEntry_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"Get.lastEntry","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get lastEntry As LogEntry","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;The last LogEntry that has been added to the object.  Nothing if no LogEntry instances have been added.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"The last LogEntry that has been added to the object.  Nothing if no LogEntry instances have been added.","inlinecomment":" \t &apos; The last LogEntry that has been added to the object.  Nothing if no LogEntry instances have been added.","parentclassname":"LogSession","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"sessionID","comment":"unique ID/key for this logging session","valuetype":"String","filenamebase":"sessionID_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"Get.sessionID","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get sessionID As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;unique ID/key for this logging session&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"unique ID/key for this logging session","inlinecomment":" \t &apos; unique ID/key for this logging session","parentclassname":"LogSession","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"addLogWriter","comment":"Adds a log writer to the object. ","valuetype":"","filenamebase":"addLogWriter_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"addLogWriter","codesample":"Dim printWriter as New BaseLogWriter(&amp;quot;Print Errors&amp;quot;, LOG_ERROR, LOG_FATAL, &amp;quot;{{LEVELNAME}}: {{MESSAGE}}&amp;quot;)\nCall globalLogSession().addLogWriter(printWriter)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(logWriter As BaseLogWriter)","signature":"Public Sub addLogWriter(logWriter As BaseLogWriter)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds a log writer to the object. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds a log writer to the object. ","inlinecomment":" \t &apos; Adds a log writer to the object. ","parentclassname":"LogSession","codesamplehtml":"Dim printWriter as New BaseLogWriter(&amp;quot;Print Errors&amp;quot;, LOG_ERROR, LOG_FATAL, &amp;quot;{{LEVELNAME}}: {{MESSAGE}}&amp;quot;)&lt;br /&gt;Call globalLogSession().addLogWriter(printWriter)", "signatureelements":["Public","Sub"], "arguments":[{"label":"logWriter","comment":"Instance of BaseLogWriter or derived class","valuetype":"BaseLogWriter","filenamebase":"logWriter_ValuedElement","fqnprefix":"VoltScriptLoggingLogSessionaddLogWriter","qn":"logWriter","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Instance of BaseLogWriter or derived class&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Instance of BaseLogWriter or derived class","inlinecomment":" \t &apos; Instance of BaseLogWriter or derived class"}]},{"label":"Delete","comment":"Destructor, during which LogWriters are processed","valuetype":"","filenamebase":"Delete_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"Delete","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub Delete()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Destructor, during which LogWriters are processed&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Destructor, during which LogWriters are processed","inlinecomment":" \t &apos; Destructor, during which LogWriters are processed","parentclassname":"LogSession","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"New","comment":"Constructor. Can only be used from getLogSession(). Do not use this constructor, use getLogSession() instead.","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor. Can only be used from getLogSession(). Do not use this constructor, use getLogSession() instead.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor. Can only be used from getLogSession(). Do not use this constructor, use getLogSession() instead.","inlinecomment":" \t &apos; Constructor. Can only be used from getLogSession(). Do not use this constructor, use getLogSession() instead.","parentclassname":"LogSession","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"removeLogWriter","comment":"Removes a LogWriter instance from the LogSession&amp;apos;s LogWriters.   ","valuetype":"","filenamebase":"removeLogWriter_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"removeLogWriter","codesample":"Dim osUtils as New OSUtils()\nIf (osUtils.Platform != &amp;quot;LINX&amp;quot;) Then\n    Call globalLogSession.removeLogWriter(&amp;quot;LinuxFileWriter&amp;quot;)\nEnd If","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(logWriter As BaseLogWriter)","signature":"Public Sub removeLogWriter(logWriter As BaseLogWriter)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Removes a LogWriter instance from the LogSession&amp;apos;s LogWriters.   &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Removes a LogWriter instance from the LogSession&amp;apos;s LogWriters.   ","inlinecomment":" \t &apos; Removes a LogWriter instance from the LogSession&amp;apos;s LogWriters.   ","parentclassname":"LogSession","codesamplehtml":"Dim osUtils as New OSUtils()&lt;br /&gt;If (osUtils.Platform != &amp;quot;LINX&amp;quot;) Then&lt;br /&gt;    Call globalLogSession.removeLogWriter(&amp;quot;LinuxFileWriter&amp;quot;)&lt;br /&gt;End If", "signatureelements":["Public","Sub"], "arguments":[{"label":"logWriter","comment":"Instance of BaseLogWriter (or derived class) to be removed from the LogSession","valuetype":"BaseLogWriter","filenamebase":"logWriter_ValuedElement","fqnprefix":"VoltScriptLoggingLogSessionremoveLogWriter","qn":"logWriter","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Instance of BaseLogWriter (or derived class) to be removed from the LogSession&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Instance of BaseLogWriter (or derived class) to be removed from the LogSession","inlinecomment":" \t &apos; Instance of BaseLogWriter (or derived class) to be removed from the LogSession"}]},{"label":"reset","comment":"Resets the LogSession.  Deletes all internal LogEntry instances, erases all internal LogWriter instances, and generates a new session id. ","valuetype":"","filenamebase":"reset_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"reset","codesample":"&amp;apos; The following code outputs all logs and resets the session with no LogEntries or LogWriters in it.\nForAll writer in globalLogSession.logWriters\n    Call writer.writeToLog(globalLogSession)\nEnd ForAll\nCall globalLogSession.reset()","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub reset()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Resets the LogSession.  Deletes all internal LogEntry instances, erases all internal LogWriter instances, and generates a new session id. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Resets the LogSession.  Deletes all internal LogEntry instances, erases all internal LogWriter instances, and generates a new session id. ","inlinecomment":" \t &apos; Resets the LogSession.  Deletes all internal LogEntry instances, erases all internal LogWriter instances, and generates a new session id. ","parentclassname":"LogSession","codesamplehtml":"&amp;apos; The following code outputs all logs and resets the session with no LogEntries or LogWriters in it.&lt;br /&gt;ForAll writer in globalLogSession.logWriters&lt;br /&gt;    Call writer.writeToLog(globalLogSession)&lt;br /&gt;End ForAll&lt;br /&gt;Call globalLogSession.reset()", "signatureelements":["Public","Sub"]}], "variables":[]}
