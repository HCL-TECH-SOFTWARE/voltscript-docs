{"label":"VoltScriptLogging","comment":"Classes for creating and managing VoltScript logs","valuetype":"","filenamebase":"VoltScriptLogging_Library","fqnprefix":"VoltScriptLogging","qn":"VoltScriptLogging","codesample":"","signaturecode":65536,"instancecode":65536,"description":"Classes for creating and managing JSON-formatted text logs in","codesamplehtml":"","scriptcreator":"Rocky Oliver","signature":"Library VoltScriptLogging","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Classes for creating and managing VoltScript logs&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Classes for creating and managing VoltScript logs","inlinecomment":" \t &apos; Classes for creating and managing VoltScript logs", "constants":[{"label":"LOG_TRACE","comment":"Lowest logging level, for most verbose logging.","valuetype":"","filenamebase":"LOGTRACE_Constant","fqnprefix":"VoltScriptLogging","qn":"LOGTRACE","codesample":"","signaturecode":2056,"instancecode":8,"value":1,"f_returnsobject":1,"signature":"Public Const LOG_TRACE = 1","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Lowest logging level, for most verbose logging.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Lowest logging level, for most verbose logging.","inlinecomment":" \t &apos; Lowest logging level, for most verbose logging.","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"NO_LOGGING","comment":"Only used in LogWriters, to prevent logging any log entries.","valuetype":"","filenamebase":"NOLOGGING_Constant","fqnprefix":"VoltScriptLogging","qn":"NOLOGGING","codesample":"","signaturecode":2056,"instancecode":8,"value":0,"f_returnsobject":1,"signature":"Public Const NO_LOGGING = 0","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Only used in LogWriters, to prevent logging any log entries.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Only used in LogWriters, to prevent logging any log entries.","inlinecomment":" \t &apos; Only used in LogWriters, to prevent logging any log entries.","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"LOG_FATAL","comment":"Highest logging level.","valuetype":"","filenamebase":"LOGFATAL_Constant","fqnprefix":"VoltScriptLogging","qn":"LOGFATAL","codesample":"","signaturecode":2056,"instancecode":8,"value":6,"f_returnsobject":1,"signature":"Public Const LOG_FATAL = 6","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Highest logging level.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Highest logging level.","inlinecomment":" \t &apos; Highest logging level.","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"LOG_INFO","comment":"Fourth-highest logging level, for informational messages.","valuetype":"","filenamebase":"LOGINFO_Constant","fqnprefix":"VoltScriptLogging","qn":"LOGINFO","codesample":"","signaturecode":2056,"instancecode":8,"value":3,"f_returnsobject":1,"signature":"Public Const LOG_INFO = 3","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Fourth-highest logging level, for informational messages.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Fourth-highest logging level, for informational messages.","inlinecomment":" \t &apos; Fourth-highest logging level, for informational messages.","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"LOG_DEBUG","comment":"Fifth-highest logging level, for more extensive messages than most support requires.","valuetype":"","filenamebase":"LOGDEBUG_Constant","fqnprefix":"VoltScriptLogging","qn":"LOGDEBUG","codesample":"","signaturecode":2056,"instancecode":8,"value":2,"f_returnsobject":1,"signature":"Public Const LOG_DEBUG = 2","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Fifth-highest logging level, for more extensive messages than most support requires.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Fifth-highest logging level, for more extensive messages than most support requires.","inlinecomment":" \t &apos; Fifth-highest logging level, for more extensive messages than most support requires.","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"LOG_ERROR","comment":"Second-highest logging level, for errors that are not fatal to continuing process.","valuetype":"","filenamebase":"LOGERROR_Constant","fqnprefix":"VoltScriptLogging","qn":"LOGERROR","codesample":"","signaturecode":2056,"instancecode":8,"value":5,"f_returnsobject":1,"signature":"Public Const LOG_ERROR = 5","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Second-highest logging level, for errors that are not fatal to continuing process.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Second-highest logging level, for errors that are not fatal to continuing process.","inlinecomment":" \t &apos; Second-highest logging level, for errors that are not fatal to continuing process.","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"LOG_WARN","comment":"Third-highest logging level, for log entries that are not errors but should be addressed.","valuetype":"","filenamebase":"LOGWARN_Constant","fqnprefix":"VoltScriptLogging","qn":"LOGWARN","codesample":"","signaturecode":2056,"instancecode":8,"value":4,"f_returnsobject":1,"signature":"Public Const LOG_WARN = 4","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Third-highest logging level, for log entries that are not errors but should be addressed.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Third-highest logging level, for log entries that are not errors but should be addressed.","inlinecomment":" \t &apos; Third-highest logging level, for log entries that are not errors but should be addressed.","codesamplehtml":"", "signatureelements":["Public","Const"]}], "methods":[{"label":"getErrorSession","comment":"Gets the ErrorSession ","valuetype":"ErrorSession","filenamebase":"getErrorSession_Method","fqnprefix":"VoltScriptLogging","qn":"getErrorSession","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function getErrorSession() As ErrorSession","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the ErrorSession &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the ErrorSession ","inlinecomment":" \t &apos; Gets the ErrorSession ","codesamplehtml":"", "signatureelements":["Public","Function"]}], "classes":[{"classname":"BaseLogWriter","comment":"Abstract class for writing log entries from the LogSession","valuetype":"","filenamebase":"BaseLogWriter_ObjectClass","fqnprefix":"VoltScriptLogging","qn":"BaseLogWriter","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"7AD3BBAF0294573900258A7F004F94A5","classid":"3B373E9EC1C6805D00258B1C00328BBC","signature":"Public Class BaseLogWriter","modifiers":"Public","classname":"BaseLogWriter","parentclassname":"None","constructorsignature":"Public Sub New(label As String, minLevel As Integer, maxLevel As Integer, formatter As String)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Abstract class for writing log entries from the LogSession&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Abstract class for writing log entries from the LogSession","inlinecomment":" \t &apos; Abstract class for writing log entries from the LogSession","codesamplehtml":"", "methods":[{"label":"convertLogEntryToMessage","comment":"Generates a message using information from a logEntry instance and the object&amp;apos;s formatter text (one of the constructor arguments).  Override this method to skip using the formatter.","valuetype":"String","filenamebase":"convertLogEntryToMessage_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"convertLogEntryToMessage","codesample":"Function convertLogEntryToMessage(logEntry as LogEntry) as String\n    Return logEntry.levelName &amp;amp; &amp;quot;: &amp;quot; &amp;amp; logEntry.message &amp;amp; Chr(10) &amp;amp; logEntry.stackTrace\nEnd Function","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(logEntry As LogEntry)","signature":"Public Function convertLogEntryToMessage(logEntry As LogEntry) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Generates a message using information from a logEntry instance and the object&amp;apos;s formatter text (one of the constructor arguments).  Override this method to skip using the formatter.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Generates a message using information from a logEntry instance and the object&amp;apos;s formatter text (one of the constructor arguments).  Override this method to skip using the formatter.","inlinecomment":" \t &apos; Generates a message using information from a logEntry instance and the object&amp;apos;s formatter text (one of the constructor arguments).  Override this method to skip using the formatter.","parentclassname":"BaseLogWriter","codesamplehtml":"Function convertLogEntryToMessage(logEntry as LogEntry) as String&lt;br /&gt;    Return logEntry.levelName &amp;amp; &amp;quot;: &amp;quot; &amp;amp; logEntry.message &amp;amp; Chr(10) &amp;amp; logEntry.stackTrace&lt;br /&gt;End Function", "signatureelements":["Public","Function"], "arguments":[{"label":"logEntry","comment":"Log Entry from which to generate the message.","valuetype":"LogEntry","filenamebase":"logEntry_ValuedElement","fqnprefix":"VoltScriptLoggingBaseLogWriterconvertLogEntryToMessage","qn":"logEntry","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Log Entry from which to generate the message.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Log Entry from which to generate the message.","inlinecomment":" \t &apos; Log Entry from which to generate the message."}]},{"label":"writeToLog","comment":"Write all entries, as appropriate, to the log. You should not need to modify this method, it is automatically called in the Delete methods.","valuetype":"Boolean","filenamebase":"writeToLog_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"writeToLog","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(session As LogSession)","signature":"Public Function writeToLog(session As LogSession) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Write all entries, as appropriate, to the log. You should not need to modify this method, it is automatically called in the Delete methods.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Write all entries, as appropriate, to the log. You should not need to modify this method, it is automatically called in the Delete methods.","inlinecomment":" \t &apos; Write all entries, as appropriate, to the log. You should not need to modify this method, it is automatically called in the Delete methods.","parentclassname":"BaseLogWriter","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"session","comment":"Session from which to get the entries to be written","valuetype":"LogSession","filenamebase":"session_ValuedElement","fqnprefix":"VoltScriptLoggingBaseLogWriterwriteToLog","qn":"session","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Session from which to get the entries to be written&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Session from which to get the entries to be written","inlinecomment":" \t &apos; Session from which to get the entries to be written"}]},{"label":"formatter","comment":"String to manage output format, using mustache templating for properties of a Log Entry. Mustache template variables must be upper case.","valuetype":"String","filenamebase":"formatter_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"Get.formatter","codesample":"Dim fmt as String\nDim logger as BaseLogWriter\nfmt = |{{LEVELNAME}}: [{{TIMESTAMP}}] {{MESSAGE}}\n{{extInfo}}|\nSet logger = new BaseLogWriter(&amp;quot;ConsoleLogger&amp;quot;, LEVEL_INFO, fmt)","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get formatter As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to manage output format, using mustache templating for properties of a Log Entry. Mustache template variables must be upper case.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to manage output format, using mustache templating for properties of a Log Entry. Mustache template variables must be upper case.","inlinecomment":" \t &apos; String to manage output format, using mustache templating for properties of a Log Entry. Mustache template variables must be upper case.","parentclassname":"BaseLogWriter","codesamplehtml":"Dim fmt as String&lt;br /&gt;Dim logger as BaseLogWriter&lt;br /&gt;fmt = |{{LEVELNAME}}: [{{TIMESTAMP}}] {{MESSAGE}}&lt;br /&gt;{{extInfo}}|&lt;br /&gt;Set logger = new BaseLogWriter(&amp;quot;ConsoleLogger&amp;quot;, LEVEL_INFO, fmt)", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"label","comment":"Label with which to refer to the log writer","valuetype":"String","filenamebase":"label_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"Get.label","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get label As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Label with which to refer to the log writer&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Label with which to refer to the log writer","inlinecomment":" \t &apos; Label with which to refer to the log writer","parentclassname":"BaseLogWriter","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"maxLevel","comment":"Level at which to log out","valuetype":"Integer","filenamebase":"maxLevel_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"Get.maxLevel","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get maxLevel As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Level at which to log out&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Level at which to log out","inlinecomment":" \t &apos; Level at which to log out","parentclassname":"BaseLogWriter","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"minLevel","comment":"","valuetype":"Integer","filenamebase":"minLevel_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"Get.minLevel","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get minLevel As Integer","modifiers":"Public Get","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"BaseLogWriter","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"Delete","comment":"Destructor for the class.  \nRuns during cleanup of the object instance and outputs log entries.","valuetype":"","filenamebase":"Delete_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"Delete","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub Delete()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Destructor for the class.  &lt;br /&gt;Runs during cleanup of the object instance and outputs log entries.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Destructor for the class.  &lt;br /&gt;Runs during cleanup of the object instance and outputs log entries.","inlinecomment":" \t &apos; Destructor for the class.  \nRuns during cleanup of the object instance and outputs log entries.","parentclassname":"BaseLogWriter","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"initializeLog","comment":"Overload this method to do any setup before processing the LogEntry objects.","valuetype":"","filenamebase":"initializeLog_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"initializeLog","codesample":"Sub initializeLog()\n    Print &amp;quot;=== STARTING LOG &amp;quot; &amp;amp; Me.label &amp;amp; &amp;quot;===&amp;quot;\nEnd Sub","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub initializeLog()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Overload this method to do any setup before processing the LogEntry objects.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Overload this method to do any setup before processing the LogEntry objects.","inlinecomment":" \t &apos; Overload this method to do any setup before processing the LogEntry objects.","parentclassname":"BaseLogWriter","codesamplehtml":"Sub initializeLog()&lt;br /&gt;    Print &amp;quot;=== STARTING LOG &amp;quot; &amp;amp; Me.label &amp;amp; &amp;quot;===&amp;quot;&lt;br /&gt;End Sub", "signatureelements":["Public","Sub"]},{"label":"New","comment":"Constructor for the object.","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"New","codesample":"&amp;apos; This creates a log to print the level name and message for all logs of all levels\nDim baseWriter as New BaseLogWriter(&amp;quot;Base Writer&amp;quot;, LOG_TRACE, LOG_FATAL, &amp;quot;{{LEVELNAME}}: {{MESSAGE}}&amp;quot;)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(label As String, minLevel As Integer, maxLevel As Integer, formatter As String)","signature":"Public Sub New(label As String, minLevel As Integer, maxLevel As Integer, formatter As String)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor for the object.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor for the object.","inlinecomment":" \t &apos; Constructor for the object.","parentclassname":"BaseLogWriter","codesamplehtml":"&amp;apos; This creates a log to print the level name and message for all logs of all levels&lt;br /&gt;Dim baseWriter as New BaseLogWriter(&amp;quot;Base Writer&amp;quot;, LOG_TRACE, LOG_FATAL, &amp;quot;{{LEVELNAME}}: {{MESSAGE}}&amp;quot;)", "signatureelements":["Public","Sub"], "arguments":[{"label":"label","comment":"Name for the log writer, which will be the key when added to the session","valuetype":"String","filenamebase":"label_ValuedElement","fqnprefix":"VoltScriptLoggingBaseLogWriterNew","qn":"label","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name for the log writer, which will be the key when added to the session&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name for the log writer, which will be the key when added to the session","inlinecomment":" \t &apos; Name for the log writer, which will be the key when added to the session"},{"label":"minLevel","comment":"Minimum level to log out","valuetype":"Integer","filenamebase":"minLevel_ValuedElement","fqnprefix":"VoltScriptLoggingBaseLogWriterNew","qn":"minLevel","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Minimum level to log out&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Minimum level to log out","inlinecomment":" \t &apos; Minimum level to log out"},{"label":"maxLevel","comment":"Maximum level to log out","valuetype":"Integer","filenamebase":"maxLevel_ValuedElement","fqnprefix":"VoltScriptLoggingBaseLogWriterNew","qn":"maxLevel","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Maximum level to log out&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Maximum level to log out","inlinecomment":" \t &apos; Maximum level to log out"},{"label":"formatter","comment":"A string format to log out, which can include mustache template format to inlcude LogEntry properties","valuetype":"String","filenamebase":"formatter_ValuedElement","fqnprefix":"VoltScriptLoggingBaseLogWriterNew","qn":"formatter","argumentindex":4,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;A string format to log out, which can include mustache template format to inlcude LogEntry properties&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"A string format to log out, which can include mustache template format to inlcude LogEntry properties","inlinecomment":" \t &apos; A string format to log out, which can include mustache template format to inlcude LogEntry properties"}]},{"label":"outputLogEntryMessage","comment":"Writes a message to the output.    Overload this message for specific implementations.","valuetype":"","filenamebase":"outputLogEntryMessage_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"outputLogEntryMessage","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(message As String)","signature":"Public Sub outputLogEntryMessage(message As String)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Writes a message to the output.    Overload this message for specific implementations.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Writes a message to the output.    Overload this message for specific implementations.","inlinecomment":" \t &apos; Writes a message to the output.    Overload this message for specific implementations.","parentclassname":"BaseLogWriter","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"message","comment":"Message to be outputted","valuetype":"String","filenamebase":"message_ValuedElement","fqnprefix":"VoltScriptLoggingBaseLogWriteroutputLogEntryMessage","qn":"message","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Message to be outputted&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Message to be outputted","inlinecomment":" \t &apos; Message to be outputted"}]},{"label":"terminateLog","comment":"Overload this method to do any setup after processing the LogEntry objects.  This method is called internally at the end of the writeToLog() method. ","valuetype":"","filenamebase":"terminateLog_Method","fqnprefix":"VoltScriptLogging.BaseLogWriter","qn":"terminateLog","codesample":"Sub terminateLog()\n    Print &amp;quot;=== FINISHING LOG &amp;quot; &amp;amp; Me.label &amp;amp; &amp;quot;===&amp;quot;\nEnd Sub","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub terminateLog()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Overload this method to do any setup after processing the LogEntry objects.  This method is called internally at the end of the writeToLog() method. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Overload this method to do any setup after processing the LogEntry objects.  This method is called internally at the end of the writeToLog() method. ","inlinecomment":" \t &apos; Overload this method to do any setup after processing the LogEntry objects.  This method is called internally at the end of the writeToLog() method. ","parentclassname":"BaseLogWriter","codesamplehtml":"Sub terminateLog()&lt;br /&gt;    Print &amp;quot;=== FINISHING LOG &amp;quot; &amp;amp; Me.label &amp;amp; &amp;quot;===&amp;quot;&lt;br /&gt;End Sub", "signatureelements":["Public","Sub"]}]},{"classname":"ErrorEntry","comment":"Carrier for Error information.","valuetype":"","filenamebase":"ErrorEntry_ObjectClass","fqnprefix":"VoltScriptLogging","qn":"ErrorEntry","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"7AD3BBAF0294573900258A7F004F94A5","classid":"A3DEEBD0CC6671FE85258BCB0057776B","signature":"Public Class ErrorEntry","modifiers":"Public","classname":"ErrorEntry","parentclassname":"None","constructorsignature":"Public Sub New(message As String, code As Integer, lineNum As Integer, levelNum As Integer)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Carrier for Error information.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Carrier for Error information.","inlinecomment":" \t &apos; Carrier for Error information.","codesamplehtml":"", "methods":[{"label":"getLogMessage","comment":"Summary information about the Error to be included when creating a LogEvent. ","valuetype":"String","filenamebase":"getLogMessage_Method","fqnprefix":"VoltScriptLogging.ErrorEntry","qn":"getLogMessage","codesample":"Call globalLogSession.createLogEntry(levelNum, Me.getLogMessage(), Me.stackTrace)","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Function getLogMessage() As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Summary information about the Error to be included when creating a LogEvent. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Summary information about the Error to be included when creating a LogEvent. ","inlinecomment":" \t &apos; Summary information about the Error to be included when creating a LogEvent. ","parentclassname":"ErrorEntry","codesamplehtml":"Call globalLogSession.createLogEntry(levelNum, Me.getLogMessage(), Me.stackTrace)", "signatureelements":["Public","Function"]},{"label":"className","comment":"VoltScript class from which the the object creation was triggered (passed into the constructor). ","valuetype":"String","filenamebase":"className_Method","fqnprefix":"VoltScriptLogging.ErrorEntry","qn":"Get.className","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get className As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;VoltScript class from which the the object creation was triggered (passed into the constructor). &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"VoltScript class from which the the object creation was triggered (passed into the constructor). ","inlinecomment":" \t &apos; VoltScript class from which the the object creation was triggered (passed into the constructor). ","parentclassname":"ErrorEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"code","comment":"Error code of the error.","valuetype":"Integer","filenamebase":"code_Method","fqnprefix":"VoltScriptLogging.ErrorEntry","qn":"Get.code","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get code As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Error code of the error.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Error code of the error.","inlinecomment":" \t &apos; Error code of the error.","parentclassname":"ErrorEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"libraryName","comment":"Name of the VSS library where the object creation was triggered. ","valuetype":"String","filenamebase":"libraryName_Method","fqnprefix":"VoltScriptLogging.ErrorEntry","qn":"Get.libraryName","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get libraryName As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the VSS library where the object creation was triggered. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the VSS library where the object creation was triggered. ","inlinecomment":" \t &apos; Name of the VSS library where the object creation was triggered. ","parentclassname":"ErrorEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"lineNum","comment":"Line number of the running code where the Error was triggered.","valuetype":"Integer","filenamebase":"lineNum_Method","fqnprefix":"VoltScriptLogging.ErrorEntry","qn":"Get.lineNum","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get lineNum As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Line number of the running code where the Error was triggered.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Line number of the running code where the Error was triggered.","inlinecomment":" \t &apos; Line number of the running code where the Error was triggered.","parentclassname":"ErrorEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"message","comment":"The text message of the object (passed as an argument to the object&amp;apos;s constructor).","valuetype":"String","filenamebase":"message_Method","fqnprefix":"VoltScriptLogging.ErrorEntry","qn":"Get.message","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get message As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;The text message of the object (passed as an argument to the object&amp;apos;s constructor).&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"The text message of the object (passed as an argument to the object&amp;apos;s constructor).","inlinecomment":" \t &apos; The text message of the object (passed as an argument to the object&amp;apos;s constructor).","parentclassname":"ErrorEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"methodName","comment":"Name of the method (Property, Event, Sub, or Function) where the object creation was triggered. ","valuetype":"String","filenamebase":"methodName_Method","fqnprefix":"VoltScriptLogging.ErrorEntry","qn":"Get.methodName","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get methodName As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the method (Property, Event, Sub, or Function) where the object creation was triggered. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the method (Property, Event, Sub, or Function) where the object creation was triggered. ","inlinecomment":" \t &apos; Name of the method (Property, Event, Sub, or Function) where the object creation was triggered. ","parentclassname":"ErrorEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"stackTrace","comment":"Stack Trace of the object creation, delimited by LF, in the format of &amp;quot;libraryName, methodName, linenum&amp;quot; for each line in the stack trace.","valuetype":"String","filenamebase":"stackTrace_Method","fqnprefix":"VoltScriptLogging.ErrorEntry","qn":"Get.stackTrace","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get stackTrace As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Stack Trace of the object creation, delimited by LF, in the format of &amp;quot;libraryName, methodName, linenum&amp;quot; for each line in the stack trace.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Stack Trace of the object creation, delimited by LF, in the format of &amp;quot;libraryName, methodName, linenum&amp;quot; for each line in the stack trace.","inlinecomment":" \t &apos; Stack Trace of the object creation, delimited by LF, in the format of &amp;quot;libraryName, methodName, linenum&amp;quot; for each line in the stack trace.","parentclassname":"ErrorEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"New","comment":"Constructor. This will not add the error to the ErrorSession. It is called from ErrorSession.createErrorEntry() and ErrorSession.createCustomErrorEntry()","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptLogging.ErrorEntry","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(message As String, code As Integer, lineNum As Integer, levelNum As Integer)","signature":"Public Sub New(message As String, code As Integer, lineNum As Integer, levelNum As Integer)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor. This will not add the error to the ErrorSession. It is called from ErrorSession.createErrorEntry() and ErrorSession.createCustomErrorEntry()&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor. This will not add the error to the ErrorSession. It is called from ErrorSession.createErrorEntry() and ErrorSession.createCustomErrorEntry()","inlinecomment":" \t &apos; Constructor. This will not add the error to the ErrorSession. It is called from ErrorSession.createErrorEntry() and ErrorSession.createCustomErrorEntry()","parentclassname":"ErrorEntry","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"message","comment":"Error message describing the error. If code is less than 1 the value of Error$() will be used.","valuetype":"String","filenamebase":"message_ValuedElement","fqnprefix":"VoltScriptLoggingErrorEntryNew","qn":"message","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Error message describing the error. If code is less than 1 the value of Error$() will be used.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Error message describing the error. If code is less than 1 the value of Error$() will be used.","inlinecomment":" \t &apos; Error message describing the error. If code is less than 1 the value of Error$() will be used."},{"label":"code","comment":"Numeric code of the error. If less than 1 the value of Err() will be used.","valuetype":"Integer","filenamebase":"code_ValuedElement","fqnprefix":"VoltScriptLoggingErrorEntryNew","qn":"code","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Numeric code of the error. If less than 1 the value of Err() will be used.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Numeric code of the error. If less than 1 the value of Err() will be used.","inlinecomment":" \t &apos; Numeric code of the error. If less than 1 the value of Err() will be used."},{"label":"lineNum","comment":"Line number in the source code where the error occurred. If code is less than 1 the value of Erl() will be used.","valuetype":"Integer","filenamebase":"lineNum_ValuedElement","fqnprefix":"VoltScriptLoggingErrorEntryNew","qn":"lineNum","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Line number in the source code where the error occurred. If code is less than 1 the value of Erl() will be used.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Line number in the source code where the error occurred. If code is less than 1 the value of Erl() will be used.","inlinecomment":" \t &apos; Line number in the source code where the error occurred. If code is less than 1 the value of Erl() will be used."},{"label":"levelNum","comment":"the Logging Level for conditionally creating a LogEntry","valuetype":"Integer","filenamebase":"levelNum_ValuedElement","fqnprefix":"VoltScriptLoggingErrorEntryNew","qn":"levelNum","argumentindex":4,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;the Logging Level for conditionally creating a LogEntry&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"the Logging Level for conditionally creating a LogEntry","inlinecomment":" \t &apos; the Logging Level for conditionally creating a LogEntry"}]},{"label":"printSummary","comment":"Outputs a summary of the object&amp;apos;s property information to console. Only relevant for basic debugging.","valuetype":"","filenamebase":"printSummary_Method","fqnprefix":"VoltScriptLogging.ErrorEntry","qn":"printSummary","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub printSummary()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Outputs a summary of the object&amp;apos;s property information to console. Only relevant for basic debugging.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Outputs a summary of the object&amp;apos;s property information to console. Only relevant for basic debugging.","inlinecomment":" \t &apos; Outputs a summary of the object&amp;apos;s property information to console. Only relevant for basic debugging.","parentclassname":"ErrorEntry","codesamplehtml":"", "signatureelements":["Public","Sub"]}]},{"classname":"ErrorSession","comment":"Stack Collection of ErrorEntry objects. ","valuetype":"","filenamebase":"ErrorSession_ObjectClass","fqnprefix":"VoltScriptLogging","qn":"ErrorSession","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"7AD3BBAF0294573900258A7F004F94A5","classid":"86D0FA588865F2E280258B25002EA321","signature":"Public Class ErrorSession","modifiers":"Public","classname":"ErrorSession","parentclassname":"None","constructorsignature":"Public Sub New()","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Stack Collection of ErrorEntry objects. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Stack Collection of ErrorEntry objects. ","inlinecomment":" \t &apos; Stack Collection of ErrorEntry objects. ","codesamplehtml":"", "methods":[{"label":"createCustomErrorEntry","comment":"Spawns a new Custom ErrorEntry object and adds it to the ErrorSession. This can be used instead of a Try/Catch. Conditionally spawns a LogEntry in the Global LogSession instance. ","valuetype":"ErrorEntry","filenamebase":"createCustomErrorEntry_Method","fqnprefix":"VoltScriptLogging.ErrorSession","qn":"createCustomErrorEntry","codesample":"If response.ResponseCode != 200 Then\n    Call getErrorSession().createCustomErrorEntity(&amp;quot;Bad response: &amp;quot; &amp;amp; response.ResponseCode, 1400, 275, LOG_WARN)\n    Return False\nEnd If","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(message As String, code As Integer, lineNum As Integer, levelNum As Integer)","signature":"Public Function createCustomErrorEntry(message As String, code As Integer, lineNum As Integer, levelNum As Integer) As ErrorEntry","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Spawns a new Custom ErrorEntry object and adds it to the ErrorSession. This can be used instead of a Try/Catch. Conditionally spawns a LogEntry in the Global LogSession instance. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Spawns a new Custom ErrorEntry object and adds it to the ErrorSession. This can be used instead of a Try/Catch. Conditionally spawns a LogEntry in the Global LogSession instance. ","inlinecomment":" \t &apos; Spawns a new Custom ErrorEntry object and adds it to the ErrorSession. This can be used instead of a Try/Catch. Conditionally spawns a LogEntry in the Global LogSession instance. ","parentclassname":"ErrorSession","codesamplehtml":"If response.ResponseCode != 200 Then&lt;br /&gt;    Call getErrorSession().createCustomErrorEntity(&amp;quot;Bad response: &amp;quot; &amp;amp; response.ResponseCode, 1400, 275, LOG_WARN)&lt;br /&gt;    Return False&lt;br /&gt;End If", "signatureelements":["Public","Function"], "arguments":[{"label":"message","comment":"Error message describing the error.  If code is less than 1 the value of Error$() will be used.","valuetype":"String","filenamebase":"message_ValuedElement","fqnprefix":"VoltScriptLoggingErrorSessioncreateCustomErrorEntry","qn":"message","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Error message describing the error.  If code is less than 1 the value of Error$() will be used.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Error message describing the error.  If code is less than 1 the value of Error$() will be used.","inlinecomment":" \t &apos; Error message describing the error.  If code is less than 1 the value of Error$() will be used."},{"label":"code","comment":"Numeric code of the error.  If less than 1 the value of Err() will be used.  ","valuetype":"Integer","filenamebase":"code_ValuedElement","fqnprefix":"VoltScriptLoggingErrorSessioncreateCustomErrorEntry","qn":"code","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Numeric code of the error.  If less than 1 the value of Err() will be used.  &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Numeric code of the error.  If less than 1 the value of Err() will be used.  ","inlinecomment":" \t &apos; Numeric code of the error.  If less than 1 the value of Err() will be used.  "},{"label":"lineNum","comment":"Line number in the source code where the error occurred. If code is less than 1 the value of Erl() will be used. ","valuetype":"Integer","filenamebase":"lineNum_ValuedElement","fqnprefix":"VoltScriptLoggingErrorSessioncreateCustomErrorEntry","qn":"lineNum","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Line number in the source code where the error occurred. If code is less than 1 the value of Erl() will be used. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Line number in the source code where the error occurred. If code is less than 1 the value of Erl() will be used. ","inlinecomment":" \t &apos; Line number in the source code where the error occurred. If code is less than 1 the value of Erl() will be used. "},{"label":"levelNum","comment":"Logging Level (NO_LOGGING, LOG_TRACE, LOG_DEBUG, etc).  Used for conditionally creating a LogEntry ","valuetype":"Integer","filenamebase":"levelNum_ValuedElement","fqnprefix":"VoltScriptLoggingErrorSessioncreateCustomErrorEntry","qn":"levelNum","argumentindex":4,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Logging Level (NO_LOGGING, LOG_TRACE, LOG_DEBUG, etc).  Used for conditionally creating a LogEntry &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Logging Level (NO_LOGGING, LOG_TRACE, LOG_DEBUG, etc).  Used for conditionally creating a LogEntry ","inlinecomment":" \t &apos; Logging Level (NO_LOGGING, LOG_TRACE, LOG_DEBUG, etc).  Used for conditionally creating a LogEntry "}]},{"label":"createErrorEntry","comment":"Spawns a new ErrorEntry object and adds it to the ErrorSession.  Conditionally spawns a LogEntry in the Global LogSession instance. ","valuetype":"ErrorEntry","filenamebase":"createErrorEntry_Method","fqnprefix":"VoltScriptLogging.ErrorSession","qn":"createErrorEntry","codesample":"Try\n    &amp;apos; Do something\nCatch\n    Call getErrorSession().createErrorEntry()\nEnd Try","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(levelNum As Integer)","signature":"Public Function createErrorEntry(levelNum As Integer) As ErrorEntry","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Spawns a new ErrorEntry object and adds it to the ErrorSession.  Conditionally spawns a LogEntry in the Global LogSession instance. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Spawns a new ErrorEntry object and adds it to the ErrorSession.  Conditionally spawns a LogEntry in the Global LogSession instance. ","inlinecomment":" \t &apos; Spawns a new ErrorEntry object and adds it to the ErrorSession.  Conditionally spawns a LogEntry in the Global LogSession instance. ","parentclassname":"ErrorSession","codesamplehtml":"Try&lt;br /&gt;    &amp;apos; Do something&lt;br /&gt;Catch&lt;br /&gt;    Call getErrorSession().createErrorEntry()&lt;br /&gt;End Try", "signatureelements":["Public","Function"], "arguments":[{"label":"levelNum","comment":"Logging Level (NO_LOGGING, LOG_TRACE, LOG_DEBUG, etc).  Used for conditionally creating a LogEntry ","valuetype":"Integer","filenamebase":"levelNum_ValuedElement","fqnprefix":"VoltScriptLoggingErrorSessioncreateErrorEntry","qn":"levelNum","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Logging Level (NO_LOGGING, LOG_TRACE, LOG_DEBUG, etc).  Used for conditionally creating a LogEntry &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Logging Level (NO_LOGGING, LOG_TRACE, LOG_DEBUG, etc).  Used for conditionally creating a LogEntry ","inlinecomment":" \t &apos; Logging Level (NO_LOGGING, LOG_TRACE, LOG_DEBUG, etc).  Used for conditionally creating a LogEntry "}]},{"label":"errorCount","comment":"Count of errors currently contained in the ErrorSession. ","valuetype":"Integer","filenamebase":"errorCount_Method","fqnprefix":"VoltScriptLogging.ErrorSession","qn":"Get.errorCount","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get errorCount As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Count of errors currently contained in the ErrorSession. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Count of errors currently contained in the ErrorSession. ","inlinecomment":" \t &apos; Count of errors currently contained in the ErrorSession. ","parentclassname":"ErrorSession","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"errors","comment":"Array of ErrorEntry objects representing all of the errors that have been added to the session. ","valuetype":"Variant","filenamebase":"errors_Method","fqnprefix":"VoltScriptLogging.ErrorSession","qn":"Get.errors","codesample":"&amp;apos; Check if we only have user-defined error code\nDim languageErrors as Boolean\nlanguageErrors = False\nForAll errors in getErrorSession().errors\n    if (error.code &amp;lt; 1000) Then languageErrors = True\nEnd ForAll","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get errors As Variant","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array of ErrorEntry objects representing all of the errors that have been added to the session. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array of ErrorEntry objects representing all of the errors that have been added to the session. ","inlinecomment":" \t &apos; Array of ErrorEntry objects representing all of the errors that have been added to the session. ","parentclassname":"ErrorSession","codesamplehtml":"&amp;apos; Check if we only have user-defined error code&lt;br /&gt;Dim languageErrors as Boolean&lt;br /&gt;languageErrors = False&lt;br /&gt;ForAll errors in getErrorSession().errors&lt;br /&gt;    if (error.code &amp;lt; 1000) Then languageErrors = True&lt;br /&gt;End ForAll", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"New","comment":"Constructor for the object.  Can only be used when called from method getErrorSession() \nDo not directly use this constructor, use getErrorSession() instead.","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptLogging.ErrorSession","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor for the object.  Can only be used when called from method getErrorSession() &lt;br /&gt;Do not directly use this constructor, use getErrorSession() instead.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor for the object.  Can only be used when called from method getErrorSession() &lt;br /&gt;Do not directly use this constructor, use getErrorSession() instead.","inlinecomment":" \t &apos; Constructor for the object.  Can only be used when called from method getErrorSession() \nDo not directly use this constructor, use getErrorSession() instead.","parentclassname":"ErrorSession","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"reset","comment":"Resets the ErrorSession and clears all error information. This method does not reset the globalLogSession.","valuetype":"","filenamebase":"reset_Method","fqnprefix":"VoltScriptLogging.ErrorSession","qn":"reset","codesample":"If (getErrorSession().errorCount &amp;gt; 0) Then\n    getErrorSession().reset()\n    Return False\nEnd If","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub reset()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Resets the ErrorSession and clears all error information. This method does not reset the globalLogSession.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Resets the ErrorSession and clears all error information. This method does not reset the globalLogSession.","inlinecomment":" \t &apos; Resets the ErrorSession and clears all error information. This method does not reset the globalLogSession.","parentclassname":"ErrorSession","codesamplehtml":"If (getErrorSession().errorCount &amp;gt; 0) Then&lt;br /&gt;    getErrorSession().reset()&lt;br /&gt;    Return False&lt;br /&gt;End If", "signatureelements":["Public","Sub"]}]},{"classname":"LogEntry","comment":"Represents a single Log Entry in the LogSession","valuetype":"","filenamebase":"LogEntry_ObjectClass","fqnprefix":"VoltScriptLogging","qn":"LogEntry","codesample":"Dim log as New LogSession(&amp;quot;&amp;quot;)\nDim logEntry as LogEntry\nSet logEntry = log.createLogEntry(...)","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"7AD3BBAF0294573900258A7F004F94A5","classid":"9B339BE3D1D663F100258A7F0050C30B","signature":"Public Class LogEntry","modifiers":"Public","classname":"LogEntry","parentclassname":"None","constructorsignature":"Public Sub New(levelNum As Integer, message As String, extInfo As String, eeInstance As ErrorEntry)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Represents a single Log Entry in the LogSession&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Represents a single Log Entry in the LogSession","inlinecomment":" \t &apos; Represents a single Log Entry in the LogSession","codesamplehtml":"Dim log as New LogSession(&amp;quot;&amp;quot;)&lt;br /&gt;Dim logEntry as LogEntry&lt;br /&gt;Set logEntry = log.createLogEntry(...)", "methods":[{"label":"getPropertyValue","comment":"Retrieves a property value for a specified property name","valuetype":"Variant","filenamebase":"getPropertyValue_Method","fqnprefix":"VoltScriptLogging.LogEntry","qn":"getPropertyValue","codesample":"Print logEntry.getPropertyvalue(&amp;quot;STACKTRACE_COMPACT&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(propertyName As String)","signature":"Public Function getPropertyValue(propertyName As String) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Retrieves a property value for a specified property name&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Retrieves a property value for a specified property name","inlinecomment":" \t &apos; Retrieves a property value for a specified property name","parentclassname":"LogEntry","codesamplehtml":"Print logEntry.getPropertyvalue(&amp;quot;STACKTRACE_COMPACT&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"propertyName","comment":"Name of the property to be retrieved","valuetype":"String","filenamebase":"propertyName_ValuedElement","fqnprefix":"VoltScriptLoggingLogEntrygetPropertyValue","qn":"propertyName","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the property to be retrieved&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the property to be retrieved","inlinecomment":" \t &apos; Name of the property to be retrieved"}]},{"label":"className","comment":"VoltScript class from which the the object creation was triggered (passed into the constructor). ","valuetype":"String","filenamebase":"className_Method","fqnprefix":"VoltScriptLogging.LogEntry","qn":"Get.className","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get className As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;VoltScript class from which the the object creation was triggered (passed into the constructor). &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"VoltScript class from which the the object creation was triggered (passed into the constructor). ","inlinecomment":" \t &apos; VoltScript class from which the the object creation was triggered (passed into the constructor). ","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"entryID","comment":"A unique identifier for the object","valuetype":"String","filenamebase":"entryID_Method","fqnprefix":"VoltScriptLogging.LogEntry","qn":"Get.entryID","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get entryID As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;A unique identifier for the object&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"A unique identifier for the object","inlinecomment":" \t &apos; A unique identifier for the object","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"extInfo","comment":"Extended info that may be included with the message, such as debug info, stack trace, etc.  Set in the object&amp;apos;s constructor. ","valuetype":"String","filenamebase":"extInfo_Method","fqnprefix":"VoltScriptLogging.LogEntry","qn":"Get.extInfo","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get extInfo As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Extended info that may be included with the message, such as debug info, stack trace, etc.  Set in the object&amp;apos;s constructor. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Extended info that may be included with the message, such as debug info, stack trace, etc.  Set in the object&amp;apos;s constructor. ","inlinecomment":" \t &apos; Extended info that may be included with the message, such as debug info, stack trace, etc.  Set in the object&amp;apos;s constructor. ","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"level","comment":"The logging level assigned to the object.  Specified as an argument in the object&amp;apos;s constructor. ","valuetype":"Integer","filenamebase":"level_Method","fqnprefix":"VoltScriptLogging.LogEntry","qn":"Get.level","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get level As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;The logging level assigned to the object.  Specified as an argument in the object&amp;apos;s constructor. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"The logging level assigned to the object.  Specified as an argument in the object&amp;apos;s constructor. ","inlinecomment":" \t &apos; The logging level assigned to the object.  Specified as an argument in the object&amp;apos;s constructor. ","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"levelName","comment":"Name of the logging level for the object.","valuetype":"String","filenamebase":"levelName_Method","fqnprefix":"VoltScriptLogging.LogEntry","qn":"Get.levelName","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get levelName As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the logging level for the object.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the logging level for the object.","inlinecomment":" \t &apos; Name of the logging level for the object.","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"libraryName","comment":"Name of the VSS library where the object creation was triggered. ","valuetype":"String","filenamebase":"libraryName_Method","fqnprefix":"VoltScriptLogging.LogEntry","qn":"Get.libraryName","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get libraryName As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the VSS library where the object creation was triggered. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the VSS library where the object creation was triggered. ","inlinecomment":" \t &apos; Name of the VSS library where the object creation was triggered. ","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"lineNum","comment":"Line number of the running code where VoltScriptLogging was called.","valuetype":"Integer","filenamebase":"lineNum_Method","fqnprefix":"VoltScriptLogging.LogEntry","qn":"Get.lineNum","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get lineNum As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Line number of the running code where VoltScriptLogging was called.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Line number of the running code where VoltScriptLogging was called.","inlinecomment":" \t &apos; Line number of the running code where VoltScriptLogging was called.","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"message","comment":"The text message of the object (passed as an argument to the object&amp;apos;s constructor).","valuetype":"String","filenamebase":"message_Method","fqnprefix":"VoltScriptLogging.LogEntry","qn":"Get.message","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get message As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;The text message of the object (passed as an argument to the object&amp;apos;s constructor).&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"The text message of the object (passed as an argument to the object&amp;apos;s constructor).","inlinecomment":" \t &apos; The text message of the object (passed as an argument to the object&amp;apos;s constructor).","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"methodName","comment":"Name of the method (Property, Event, Sub, or Function) where the object creation was triggered. ","valuetype":"String","filenamebase":"methodName_Method","fqnprefix":"VoltScriptLogging.LogEntry","qn":"Get.methodName","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get methodName As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the method (Property, Event, Sub, or Function) where the object creation was triggered. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the method (Property, Event, Sub, or Function) where the object creation was triggered. ","inlinecomment":" \t &apos; Name of the method (Property, Event, Sub, or Function) where the object creation was triggered. ","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"stackTrace","comment":"Stack Trace of the object creation, delimited by LF, in the format of &amp;quot;libraryName, methodName, linenum&amp;quot; for each line in the stack trace.","valuetype":"String","filenamebase":"stackTrace_Method","fqnprefix":"VoltScriptLogging.LogEntry","qn":"Get.stackTrace","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get stackTrace As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Stack Trace of the object creation, delimited by LF, in the format of &amp;quot;libraryName, methodName, linenum&amp;quot; for each line in the stack trace.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Stack Trace of the object creation, delimited by LF, in the format of &amp;quot;libraryName, methodName, linenum&amp;quot; for each line in the stack trace.","inlinecomment":" \t &apos; Stack Trace of the object creation, delimited by LF, in the format of &amp;quot;libraryName, methodName, linenum&amp;quot; for each line in the stack trace.","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"timeStamp","comment":"Timestamp of when the object instance was created. This is date/time in yyyy-MM-dd hh:mm:ss format in the current platform&amp;apos;s timezone.","valuetype":"String","filenamebase":"timeStamp_Method","fqnprefix":"VoltScriptLogging.LogEntry","qn":"Get.timeStamp","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get timeStamp As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Timestamp of when the object instance was created. This is date/time in yyyy-MM-dd hh:mm:ss format in the current platform&amp;apos;s timezone.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Timestamp of when the object instance was created. This is date/time in yyyy-MM-dd hh:mm:ss format in the current platform&amp;apos;s timezone.","inlinecomment":" \t &apos; Timestamp of when the object instance was created. This is date/time in yyyy-MM-dd hh:mm:ss format in the current platform&amp;apos;s timezone.","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"uuID","comment":"Unique identifier for the instance","valuetype":"String","filenamebase":"uuID_Method","fqnprefix":"VoltScriptLogging.LogEntry","qn":"Get.uuID","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get uuID As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Unique identifier for the instance&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Unique identifier for the instance","inlinecomment":" \t &apos; Unique identifier for the instance","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"New","comment":"Constructor. This will not add the LogEntry to the globalLogSession. It is called from globalLogSession.createLogEntry()","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptLogging.LogEntry","qn":"New","codesample":"Dim temp as LogEntry\nSet temp = New LogEntry(levelNum, message, extInfo, Nothing)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(levelNum As Integer, message As String, extInfo As String, eeInstance As ErrorEntry)","signature":"Public Sub New(levelNum As Integer, message As String, extInfo As String, eeInstance As ErrorEntry)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor. This will not add the LogEntry to the globalLogSession. It is called from globalLogSession.createLogEntry()&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor. This will not add the LogEntry to the globalLogSession. It is called from globalLogSession.createLogEntry()","inlinecomment":" \t &apos; Constructor. This will not add the LogEntry to the globalLogSession. It is called from globalLogSession.createLogEntry()","parentclassname":"LogEntry","codesamplehtml":"Dim temp as LogEntry&lt;br /&gt;Set temp = New LogEntry(levelNum, message, extInfo, Nothing)", "signatureelements":["Public","Sub"], "arguments":[{"label":"levelNum","comment":"Logging Level for the LogEntry, restricted to the LOG_xxx constants","valuetype":"Integer","filenamebase":"levelNum_ValuedElement","fqnprefix":"VoltScriptLoggingLogEntryNew","qn":"levelNum","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Logging Level for the LogEntry, restricted to the LOG_xxx constants&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Logging Level for the LogEntry, restricted to the LOG_xxx constants","inlinecomment":" \t &apos; Logging Level for the LogEntry, restricted to the LOG_xxx constants"},{"label":"message","comment":"A short message to log","valuetype":"String","filenamebase":"message_ValuedElement","fqnprefix":"VoltScriptLoggingLogEntryNew","qn":"message","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;A short message to log&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"A short message to log","inlinecomment":" \t &apos; A short message to log"},{"label":"extInfo","comment":"Extended information to log","valuetype":"String","filenamebase":"extInfo_ValuedElement","fqnprefix":"VoltScriptLoggingLogEntryNew","qn":"extInfo","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Extended information to log&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Extended information to log","inlinecomment":" \t &apos; Extended information to log"},{"label":"eeInstance","comment":"ErrorEntry instance spawning the LogEntry instance.  Nothing if not being spawned by an ErrorEntry ","valuetype":"ErrorEntry","filenamebase":"eeInstance_ValuedElement","fqnprefix":"VoltScriptLoggingLogEntryNew","qn":"eeInstance","argumentindex":4,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;ErrorEntry instance spawning the LogEntry instance.  Nothing if not being spawned by an ErrorEntry &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"ErrorEntry instance spawning the LogEntry instance.  Nothing if not being spawned by an ErrorEntry ","inlinecomment":" \t &apos; ErrorEntry instance spawning the LogEntry instance.  Nothing if not being spawned by an ErrorEntry "}]},{"label":"printSummary","comment":"Outputs a summary of the properties of the LogEntry to console. Only relevant for basic debugging.","valuetype":"","filenamebase":"printSummary_Method","fqnprefix":"VoltScriptLogging.LogEntry","qn":"printSummary","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub printSummary()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Outputs a summary of the properties of the LogEntry to console. Only relevant for basic debugging.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Outputs a summary of the properties of the LogEntry to console. Only relevant for basic debugging.","inlinecomment":" \t &apos; Outputs a summary of the properties of the LogEntry to console. Only relevant for basic debugging.","parentclassname":"LogEntry","codesamplehtml":"", "signatureelements":["Public","Sub"]}]},{"classname":"LogSession","comment":"Base class for VoltScript logging","valuetype":"","filenamebase":"LogSession_ObjectClass","fqnprefix":"VoltScriptLogging","qn":"LogSession","codesample":"Dim log as New LogSession","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"7AD3BBAF0294573900258A7F004F94A5","classid":"497E755B650E585B00258A7F004FD469","signature":"Public Class LogSession","modifiers":"Public","classname":"LogSession","parentclassname":"None","constructorsignature":"Public Sub New()","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base class for VoltScript logging&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base class for VoltScript logging","inlinecomment":" \t &apos; Base class for VoltScript logging","codesamplehtml":"Dim log as New LogSession", "methods":[{"label":"createLogEntry","comment":"Creates a new LogEntry object. ","valuetype":"LogEntry","filenamebase":"createLogEntry_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"createLogEntry","codesample":"Call globalLogSession.createLogEntry(LOG_DEBUG, &amp;quot;Entering function doSomething&amp;quot;, &amp;quot;&amp;quot;, Nothing)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(levelNum As Integer, message As String, extInfo As String, eeInstance As ErrorEntry)","signature":"Public Function createLogEntry(levelNum As Integer, message As String, extInfo As String, eeInstance As ErrorEntry) As LogEntry","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a new LogEntry object. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a new LogEntry object. ","inlinecomment":" \t &apos; Creates a new LogEntry object. ","parentclassname":"LogSession","codesamplehtml":"Call globalLogSession.createLogEntry(LOG_DEBUG, &amp;quot;Entering function doSomething&amp;quot;, &amp;quot;&amp;quot;, Nothing)", "signatureelements":["Public","Function"], "arguments":[{"label":"levelNum","comment":"the Logging Level of the entry; you can use the constant as well","valuetype":"Integer","filenamebase":"levelNum_ValuedElement","fqnprefix":"VoltScriptLoggingLogSessioncreateLogEntry","qn":"levelNum","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;the Logging Level of the entry; you can use the constant as well&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"the Logging Level of the entry; you can use the constant as well","inlinecomment":" \t &apos; the Logging Level of the entry; you can use the constant as well"},{"label":"message","comment":"the text message of the entry","valuetype":"String","filenamebase":"message_ValuedElement","fqnprefix":"VoltScriptLoggingLogSessioncreateLogEntry","qn":"message","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;the text message of the entry&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"the text message of the entry","inlinecomment":" \t &apos; the text message of the entry"},{"label":"extInfo","comment":"Any extended information to include with the entry or blank","valuetype":"String","filenamebase":"extInfo_ValuedElement","fqnprefix":"VoltScriptLoggingLogSessioncreateLogEntry","qn":"extInfo","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Any extended information to include with the entry or blank&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Any extended information to include with the entry or blank","inlinecomment":" \t &apos; Any extended information to include with the entry or blank"},{"label":"eeInstance","comment":"ErrorEntry instance spawning the LogEntry instance.  Nothing if not being spawned by an ErrorEntry ","valuetype":"ErrorEntry","filenamebase":"eeInstance_ValuedElement","fqnprefix":"VoltScriptLoggingLogSessioncreateLogEntry","qn":"eeInstance","argumentindex":4,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;ErrorEntry instance spawning the LogEntry instance.  Nothing if not being spawned by an ErrorEntry &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"ErrorEntry instance spawning the LogEntry instance.  Nothing if not being spawned by an ErrorEntry ","inlinecomment":" \t &apos; ErrorEntry instance spawning the LogEntry instance.  Nothing if not being spawned by an ErrorEntry "}]},{"label":"getLogEntriesByLevel","comment":"Filters the LogEntry objects into an array containing just those at or above the minimum level and also at or below the maximum level.","valuetype":"Variant","filenamebase":"getLogEntriesByLevel_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"getLogEntriesByLevel","codesample":"Dim filteredEntries as Variant\nfilteredEntries = globalLogSession.getLogEntriesByLevel(LOG_FATAL, LOG_FATAL)\nIf (IsEmpty(filteredEntries)) Then Print &amp;quot;No fatal errors&amp;quot;","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(minLevel As Integer, maxLevel As Integer)","signature":"Public Function getLogEntriesByLevel(minLevel As Integer, maxLevel As Integer) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Filters the LogEntry objects into an array containing just those at or above the minimum level and also at or below the maximum level.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Filters the LogEntry objects into an array containing just those at or above the minimum level and also at or below the maximum level.","inlinecomment":" \t &apos; Filters the LogEntry objects into an array containing just those at or above the minimum level and also at or below the maximum level.","parentclassname":"LogSession","codesamplehtml":"Dim filteredEntries as Variant&lt;br /&gt;filteredEntries = globalLogSession.getLogEntriesByLevel(LOG_FATAL, LOG_FATAL)&lt;br /&gt;If (IsEmpty(filteredEntries)) Then Print &amp;quot;No fatal errors&amp;quot;", "signatureelements":["Public","Function"], "arguments":[{"label":"minLevel","comment":"Minimum level of logs to retrieve","valuetype":"Integer","filenamebase":"minLevel_ValuedElement","fqnprefix":"VoltScriptLoggingLogSessiongetLogEntriesByLevel","qn":"minLevel","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Minimum level of logs to retrieve&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Minimum level of logs to retrieve","inlinecomment":" \t &apos; Minimum level of logs to retrieve"},{"label":"maxLevel","comment":"Maximum level of the logs to retrieve","valuetype":"Integer","filenamebase":"maxLevel_ValuedElement","fqnprefix":"VoltScriptLoggingLogSessiongetLogEntriesByLevel","qn":"maxLevel","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Maximum level of the logs to retrieve&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Maximum level of the logs to retrieve","inlinecomment":" \t &apos; Maximum level of the logs to retrieve"}]},{"label":"getLogEntryByID","comment":"Retrieves the LogEntry with a specified ID.  Nothing if not found. ","valuetype":"LogEntry","filenamebase":"getLogEntryByID_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"getLogEntryByID","codesample":"If (globalLogSession.getEntryByID(id) is Nothing) Then\n    Print &amp;quot;Cannot find LogEntry with that ID&amp;quot;\nEnd If","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(entryID As String)","signature":"Public Function getLogEntryByID(entryID As String) As LogEntry","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Retrieves the LogEntry with a specified ID.  Nothing if not found. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Retrieves the LogEntry with a specified ID.  Nothing if not found. ","inlinecomment":" \t &apos; Retrieves the LogEntry with a specified ID.  Nothing if not found. ","parentclassname":"LogSession","codesamplehtml":"If (globalLogSession.getEntryByID(id) is Nothing) Then&lt;br /&gt;    Print &amp;quot;Cannot find LogEntry with that ID&amp;quot;&lt;br /&gt;End If", "signatureelements":["Public","Function"], "arguments":[{"label":"entryID","comment":"the entryID of the desired log entry","valuetype":"String","filenamebase":"entryID_ValuedElement","fqnprefix":"VoltScriptLoggingLogSessiongetLogEntryByID","qn":"entryID","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;the entryID of the desired log entry&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"the entryID of the desired log entry","inlinecomment":" \t &apos; the entryID of the desired log entry"}]},{"label":"entryCount","comment":"Number of LogEntry instances contained by the LogSession","valuetype":"Integer","filenamebase":"entryCount_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"Get.entryCount","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get entryCount As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Number of LogEntry instances contained by the LogSession&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Number of LogEntry instances contained by the LogSession","inlinecomment":" \t &apos; Number of LogEntry instances contained by the LogSession","parentclassname":"LogSession","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"entryIDs","comment":"Array of entryIDs for all LogEntry instances contained within the object.   Returns and empty variant if no LogEntry instances exist.","valuetype":"Variant","filenamebase":"entryIDs_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"Get.entryIDs","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get entryIDs As Variant","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array of entryIDs for all LogEntry instances contained within the object.   Returns and empty variant if no LogEntry instances exist.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array of entryIDs for all LogEntry instances contained within the object.   Returns and empty variant if no LogEntry instances exist.","inlinecomment":" \t &apos; Array of entryIDs for all LogEntry instances contained within the object.   Returns and empty variant if no LogEntry instances exist.","parentclassname":"LogSession","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"lastEntry","comment":"The last LogEntry that has been added to the object.  Nothing if no LogEntry instances have been added.","valuetype":"LogEntry","filenamebase":"lastEntry_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"Get.lastEntry","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get lastEntry As LogEntry","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;The last LogEntry that has been added to the object.  Nothing if no LogEntry instances have been added.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"The last LogEntry that has been added to the object.  Nothing if no LogEntry instances have been added.","inlinecomment":" \t &apos; The last LogEntry that has been added to the object.  Nothing if no LogEntry instances have been added.","parentclassname":"LogSession","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"sessionID","comment":"unique ID/key for this logging session","valuetype":"String","filenamebase":"sessionID_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"Get.sessionID","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get sessionID As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;unique ID/key for this logging session&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"unique ID/key for this logging session","inlinecomment":" \t &apos; unique ID/key for this logging session","parentclassname":"LogSession","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"addLogWriter","comment":"Adds a log writer to the object. ","valuetype":"","filenamebase":"addLogWriter_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"addLogWriter","codesample":"Dim printWriter as New BaseLogWriter(&amp;quot;Print Errors&amp;quot;, LOG_ERROR, LOG_FATAL, &amp;quot;{{LEVELNAME}}: {{MESSAGE}}&amp;quot;)\nCall globalLogSession().addLogWriter(printWriter)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(logWriter As BaseLogWriter)","signature":"Public Sub addLogWriter(logWriter As BaseLogWriter)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds a log writer to the object. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds a log writer to the object. ","inlinecomment":" \t &apos; Adds a log writer to the object. ","parentclassname":"LogSession","codesamplehtml":"Dim printWriter as New BaseLogWriter(&amp;quot;Print Errors&amp;quot;, LOG_ERROR, LOG_FATAL, &amp;quot;{{LEVELNAME}}: {{MESSAGE}}&amp;quot;)&lt;br /&gt;Call globalLogSession().addLogWriter(printWriter)", "signatureelements":["Public","Sub"], "arguments":[{"label":"logWriter","comment":"Instance of BaseLogWriter or derived class","valuetype":"BaseLogWriter","filenamebase":"logWriter_ValuedElement","fqnprefix":"VoltScriptLoggingLogSessionaddLogWriter","qn":"logWriter","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Instance of BaseLogWriter or derived class&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Instance of BaseLogWriter or derived class","inlinecomment":" \t &apos; Instance of BaseLogWriter or derived class"}]},{"label":"Delete","comment":"Destructor, during which LogWriters are processed","valuetype":"","filenamebase":"Delete_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"Delete","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub Delete()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Destructor, during which LogWriters are processed&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Destructor, during which LogWriters are processed","inlinecomment":" \t &apos; Destructor, during which LogWriters are processed","parentclassname":"LogSession","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"New","comment":"Constructor. Can only be used from getLogSession(). Do not use this constructor, use getLogSession() instead.","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor. Can only be used from getLogSession(). Do not use this constructor, use getLogSession() instead.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor. Can only be used from getLogSession(). Do not use this constructor, use getLogSession() instead.","inlinecomment":" \t &apos; Constructor. Can only be used from getLogSession(). Do not use this constructor, use getLogSession() instead.","parentclassname":"LogSession","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"removeLogWriter","comment":"Removes a LogWriter instance from the LogSession&amp;apos;s LogWriters.   ","valuetype":"","filenamebase":"removeLogWriter_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"removeLogWriter","codesample":"Dim osUtils as New OSUtils()\nIf (osUtils.Platform != &amp;quot;LINX&amp;quot;) Then\n    Call globalLogSession.removeLogWriter(&amp;quot;LinuxFileWriter&amp;quot;)\nEnd If","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(logWriter As BaseLogWriter)","signature":"Public Sub removeLogWriter(logWriter As BaseLogWriter)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Removes a LogWriter instance from the LogSession&amp;apos;s LogWriters.   &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Removes a LogWriter instance from the LogSession&amp;apos;s LogWriters.   ","inlinecomment":" \t &apos; Removes a LogWriter instance from the LogSession&amp;apos;s LogWriters.   ","parentclassname":"LogSession","codesamplehtml":"Dim osUtils as New OSUtils()&lt;br /&gt;If (osUtils.Platform != &amp;quot;LINX&amp;quot;) Then&lt;br /&gt;    Call globalLogSession.removeLogWriter(&amp;quot;LinuxFileWriter&amp;quot;)&lt;br /&gt;End If", "signatureelements":["Public","Sub"], "arguments":[{"label":"logWriter","comment":"Instance of BaseLogWriter (or derived class) to be removed from the LogSession","valuetype":"BaseLogWriter","filenamebase":"logWriter_ValuedElement","fqnprefix":"VoltScriptLoggingLogSessionremoveLogWriter","qn":"logWriter","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Instance of BaseLogWriter (or derived class) to be removed from the LogSession&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Instance of BaseLogWriter (or derived class) to be removed from the LogSession","inlinecomment":" \t &apos; Instance of BaseLogWriter (or derived class) to be removed from the LogSession"}]},{"label":"reset","comment":"Resets the LogSession.  Deletes all internal LogEntry instances, erases all internal LogWriter instances, and generates a new session id. ","valuetype":"","filenamebase":"reset_Method","fqnprefix":"VoltScriptLogging.LogSession","qn":"reset","codesample":"&amp;apos; The following code outputs all logs and resets the session with no LogEntries or LogWriters in it.\nForAll writer in globalLogSession.logWriters\n    Call writer.writeToLog(globalLogSession)\nEnd ForAll\nCall globalLogSession.reset()","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub reset()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Resets the LogSession.  Deletes all internal LogEntry instances, erases all internal LogWriter instances, and generates a new session id. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Resets the LogSession.  Deletes all internal LogEntry instances, erases all internal LogWriter instances, and generates a new session id. ","inlinecomment":" \t &apos; Resets the LogSession.  Deletes all internal LogEntry instances, erases all internal LogWriter instances, and generates a new session id. ","parentclassname":"LogSession","codesamplehtml":"&amp;apos; The following code outputs all logs and resets the session with no LogEntries or LogWriters in it.&lt;br /&gt;ForAll writer in globalLogSession.logWriters&lt;br /&gt;    Call writer.writeToLog(globalLogSession)&lt;br /&gt;End ForAll&lt;br /&gt;Call globalLogSession.reset()", "signatureelements":["Public","Sub"]}], "variables":[]}], "variables":[]}
