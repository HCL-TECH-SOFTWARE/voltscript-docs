{"label":"VoltScriptCollections","comment":"Collection and Map classes and methods","valuetype":"","filenamebase":"VoltScriptCollections_Library","fqnprefix":"VoltScriptCollections","qn":"VoltScriptCollections","codesample":"","signaturecode":65536,"instancecode":65536,"description":"Used for modern classes and methods","codesamplehtml":"","scriptcreator":"Paul Withers","signature":"Library VoltScriptCollections","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Collection and Map classes and methods&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Collection and Map classes and methods","inlinecomment":" \t &apos; Collection and Map classes and methods", "classes":[{"classname":"Collection","comment":"Base class for Collections","valuetype":"","filenamebase":"Collection_ObjectClass","fqnprefix":"VoltScriptCollections","qn":"Collection","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"FD17E29641C6117580258994003AF3B0","version":3,"classid":"F394C037755FD326802589950053668D","signature":"Public Class Collection","modifiers":"Public","classname":"Collection","parentclassname":"None","constructorsignature":"Public Sub New(contentType As String, comparator As Comparator, mustBeUnique As Boolean, isSorted As Boolean)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base class for Collections&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base class for Collections","inlinecomment":" \t &apos; Base class for Collections","codesamplehtml":"", "methods":[{"label":"add","comment":"Adds an element to the container","valuetype":"Long","filenamebase":"add_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"add","codesample":"%REM\nThe following code will print &amp;quot;Error adding&amp;quot; for the first Try/Catch. But for the second, the error will be suppressed and the call to .add() will return False\n%END REM\nDim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nDim position as Long\nTry\n    position = coll.add(2)\n    Print position &amp;apos; Code will not get to this line\nCatch\n    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will be printed\nEnd Try\n  \nposition = coll.add(&amp;quot;2&amp;quot;)\nPrint position &amp;apos; Code will print 0","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As Variant)","signature":"Public Function add(source As Variant) As Long","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds an element to the container&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds an element to the container","inlinecomment":" \t &apos; Adds an element to the container","parentclassname":"Collection","codesamplehtml":"%REM&lt;br /&gt;The following code will print &amp;quot;Error adding&amp;quot; for the first Try/Catch. But for the second, the error will be suppressed and the call to .add() will return False&lt;br /&gt;%END REM&lt;br /&gt;Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Dim position as Long&lt;br /&gt;Try&lt;br /&gt;    position = coll.add(2)&lt;br /&gt;    Print position &amp;apos; Code will not get to this line&lt;br /&gt;Catch&lt;br /&gt;    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will be printed&lt;br /&gt;End Try&lt;br /&gt;  &lt;br /&gt;position = coll.add(&amp;quot;2&amp;quot;)&lt;br /&gt;Print position &amp;apos; Code will print 0", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Must match Collection&amp;apos;s ContentType","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectionadd","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Must match Collection&amp;apos;s ContentType&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Must match Collection&amp;apos;s ContentType","inlinecomment":" \t &apos; Must match Collection&amp;apos;s ContentType"}]},{"label":"addAll","comment":"Adds all elements from an array or source Collection to the current Collection.","valuetype":"Collection","filenamebase":"addAll_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"addAll","codesample":"%REM\nThe following code creates a collection of scalars containing &amp;quot;One&amp;quot; and 2. It sets suppressErrors on the second collection, then adds the first collection to the second. This adds any strings to the second collection (i.e. &amp;quot;One&amp;quot;), while suppressing errors from any non-String entries (i.e. 2). The second collection contains one element, the string &amp;quot;One&amp;quot;.\n%END REM\nDim coll as New Collection(&amp;quot;SCALAR&amp;quot;, Nothing, False, False)\nDim coll2 as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.add(&amp;quot;One&amp;quot;)\nCall coll.add(2)\ncoll2.suppressErrors = True\nCall coll2.addAll(coll)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant)","signature":"Public Function addAll(source As Variant) As Collection","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds all elements from an array or source Collection to the current Collection.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds all elements from an array or source Collection to the current Collection.","inlinecomment":" \t &apos; Adds all elements from an array or source Collection to the current Collection.","parentclassname":"Collection","codesamplehtml":"%REM&lt;br /&gt;The following code creates a collection of scalars containing &amp;quot;One&amp;quot; and 2. It sets suppressErrors on the second collection, then adds the first collection to the second. This adds any strings to the second collection (i.e. &amp;quot;One&amp;quot;), while suppressing errors from any non-String entries (i.e. 2). The second collection contains one element, the string &amp;quot;One&amp;quot;.&lt;br /&gt;%END REM&lt;br /&gt;Dim coll as New Collection(&amp;quot;SCALAR&amp;quot;, Nothing, False, False)&lt;br /&gt;Dim coll2 as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Call coll.add(&amp;quot;One&amp;quot;)&lt;br /&gt;Call coll.add(2)&lt;br /&gt;coll2.suppressErrors = True&lt;br /&gt;Call coll2.addAll(coll)", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Variant array or Collection of elements matching the Collection&amp;apos;s ContentType","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectionaddAll","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Variant array or Collection of elements matching the Collection&amp;apos;s ContentType&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Variant array or Collection of elements matching the Collection&amp;apos;s ContentType","inlinecomment":" \t &apos; Variant array or Collection of elements matching the Collection&amp;apos;s ContentType"}]},{"label":"clone","comment":"Creates a copy of the Collection","valuetype":"Collection","filenamebase":"clone_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"clone","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nDim coll1 as Collection\nCall coll.add(&amp;quot;One&amp;quot;)\nSet coll1 = coll.clone()","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function clone() As Collection","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a copy of the Collection&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a copy of the Collection","inlinecomment":" \t &apos; Creates a copy of the Collection","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Dim coll1 as Collection&lt;br /&gt;Call coll.add(&amp;quot;One&amp;quot;)&lt;br /&gt;Set coll1 = coll.clone()", "signatureelements":["Public","Function"]},{"label":"contains","comment":"Checks whether the Collection contains a specific value. Requires a valid Comparator to compare each element.","valuetype":"Boolean","filenamebase":"contains_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"contains","codesample":"%REM\nAlthough no explicit comparator is passed into this Collection, an instance of the default Comparator class is used. This works for scalars, by comparing the datatype (treating all numerics as the same datatype) and then CStr-ing the value.\n%END REM\nDim coll as New Collection(&amp;quot;SCALAR&amp;quot;, Nothing, False, False)\nCall coll.add(&amp;quot;One&amp;quot;)\nCall coll.add(2)\nPrint coll.contains(1)   &amp;apos; Prints False\nPrint coll.contains(2)   &amp;apos; Prints True","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(checkValue As Variant)","signature":"Public Function contains(checkValue As Variant) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks whether the Collection contains a specific value. Requires a valid Comparator to compare each element.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks whether the Collection contains a specific value. Requires a valid Comparator to compare each element.","inlinecomment":" \t &apos; Checks whether the Collection contains a specific value. Requires a valid Comparator to compare each element.","parentclassname":"Collection","codesamplehtml":"%REM&lt;br /&gt;Although no explicit comparator is passed into this Collection, an instance of the default Comparator class is used. This works for scalars, by comparing the datatype (treating all numerics as the same datatype) and then CStr-ing the value.&lt;br /&gt;%END REM&lt;br /&gt;Dim coll as New Collection(&amp;quot;SCALAR&amp;quot;, Nothing, False, False)&lt;br /&gt;Call coll.add(&amp;quot;One&amp;quot;)&lt;br /&gt;Call coll.add(2)&lt;br /&gt;Print coll.contains(1)   &amp;apos; Prints False&lt;br /&gt;Print coll.contains(2)   &amp;apos; Prints True", "signatureelements":["Public","Function"], "arguments":[{"label":"checkValue","comment":"Value to check for","valuetype":"Variant","filenamebase":"checkValue_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectioncontains","qn":"checkValue","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value to check for&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value to check for","inlinecomment":" \t &apos; Value to check for"}]},{"label":"filter","comment":"Filters a collection using a CollectionFilter and returns a new &amp;quot;filtered&amp;quot; collection","valuetype":"Collection","filenamebase":"filter_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"filter","codesample":"%REM\nThe following code shows how to create a filter for even numbers and use it. The code is very basic with no error handling.\n%END REM\nClass EvenFilterer as CollectionFilter\n    Function filter(source as Variant) as Boolean\n        If (source Mod 2 = 0) Then Return True\n    End Function\nEnd Class\nDim coll1 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)\nDim coll2 as Collection\nDim filterer as New EvenFilterer()\n&amp;apos; Populating collection omitted\nSet coll2 = coll1.filter(filterer)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(filterObj As CollectionFilter)","signature":"Public Function filter(filterObj As CollectionFilter) As Collection","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Filters a collection using a CollectionFilter and returns a new &amp;quot;filtered&amp;quot; collection&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Filters a collection using a CollectionFilter and returns a new &amp;quot;filtered&amp;quot; collection","inlinecomment":" \t &apos; Filters a collection using a CollectionFilter and returns a new &amp;quot;filtered&amp;quot; collection","parentclassname":"Collection","codesamplehtml":"%REM&lt;br /&gt;The following code shows how to create a filter for even numbers and use it. The code is very basic with no error handling.&lt;br /&gt;%END REM&lt;br /&gt;Class EvenFilterer as CollectionFilter&lt;br /&gt;    Function filter(source as Variant) as Boolean&lt;br /&gt;        If (source Mod 2 = 0) Then Return True&lt;br /&gt;    End Function&lt;br /&gt;End Class&lt;br /&gt;Dim coll1 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)&lt;br /&gt;Dim coll2 as Collection&lt;br /&gt;Dim filterer as New EvenFilterer()&lt;br /&gt;&amp;apos; Populating collection omitted&lt;br /&gt;Set coll2 = coll1.filter(filterer)", "signatureelements":["Public","Function"], "arguments":[{"label":"filterObj","comment":"Collection filter to check each value with","valuetype":"CollectionFilter","filenamebase":"filterObj_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectionfilter","qn":"filterObj","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Collection filter to check each value with&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Collection filter to check each value with","inlinecomment":" \t &apos; Collection filter to check each value with"}]},{"label":"getAndRemoveFirstRaw","comment":"Returns the FIRST element in the collection and removes it from the collection.\nIf the collection is empty it just exits the function","valuetype":"Variant","filenamebase":"getAndRemoveFirstRaw_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"getAndRemoveFirstRaw","codesample":"%REM\nThe following code builds a FIFO queue, printing the entries from the collection\n%END REM\nDim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.add(&amp;quot;One&amp;quot;)\nCall coll.add(&amp;quot;Two&amp;quot;)\nPrint CStr(coll.getAndRemoveFirstRaw())    &amp;apos;Prints One\nPrint CStr(coll.getAndRemoveFirstRaw())    &amp;apos;Prints Two\nPrint coll.hasContent    &amp;apos;Prints False","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function getAndRemoveFirstRaw() As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns the FIRST element in the collection and removes it from the collection.&lt;br /&gt;If the collection is empty it just exits the function&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns the FIRST element in the collection and removes it from the collection.&lt;br /&gt;If the collection is empty it just exits the function","inlinecomment":" \t &apos; Returns the FIRST element in the collection and removes it from the collection.\nIf the collection is empty it just exits the function","parentclassname":"Collection","codesamplehtml":"%REM&lt;br /&gt;The following code builds a FIFO queue, printing the entries from the collection&lt;br /&gt;%END REM&lt;br /&gt;Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Call coll.add(&amp;quot;One&amp;quot;)&lt;br /&gt;Call coll.add(&amp;quot;Two&amp;quot;)&lt;br /&gt;Print CStr(coll.getAndRemoveFirstRaw())    &amp;apos;Prints One&lt;br /&gt;Print CStr(coll.getAndRemoveFirstRaw())    &amp;apos;Prints Two&lt;br /&gt;Print coll.hasContent    &amp;apos;Prints False", "signatureelements":["Public","Function"]},{"label":"getAndRemoveLastRaw","comment":"Returns the LAST element in the collection and removes it from the collection.\nIf the collection is empty it just exits the function","valuetype":"Variant","filenamebase":"getAndRemoveLastRaw_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"getAndRemoveLastRaw","codesample":"%REM\nThe following code builds a LIFO stack, printing the entries from the collection\n%END REM\nDim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.add(&amp;quot;One&amp;quot;)\nCall coll.add(&amp;quot;Two&amp;quot;)\nPrint CStr(coll.getAndRemoveLastRaw())    &amp;apos;Prints Two\nPrint CStr(coll.getAndRemoveLastRaw())    &amp;apos;Prints One\nPrint coll.hasContent    &amp;apos;Prints False","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function getAndRemoveLastRaw() As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns the LAST element in the collection and removes it from the collection.&lt;br /&gt;If the collection is empty it just exits the function&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns the LAST element in the collection and removes it from the collection.&lt;br /&gt;If the collection is empty it just exits the function","inlinecomment":" \t &apos; Returns the LAST element in the collection and removes it from the collection.\nIf the collection is empty it just exits the function","parentclassname":"Collection","codesamplehtml":"%REM&lt;br /&gt;The following code builds a LIFO stack, printing the entries from the collection&lt;br /&gt;%END REM&lt;br /&gt;Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Call coll.add(&amp;quot;One&amp;quot;)&lt;br /&gt;Call coll.add(&amp;quot;Two&amp;quot;)&lt;br /&gt;Print CStr(coll.getAndRemoveLastRaw())    &amp;apos;Prints Two&lt;br /&gt;Print CStr(coll.getAndRemoveLastRaw())    &amp;apos;Prints One&lt;br /&gt;Print coll.hasContent    &amp;apos;Prints False", "signatureelements":["Public","Function"]},{"label":"getIndex","comment":"Checks whether the Collection contains a specific value.","valuetype":"Variant","filenamebase":"getIndex_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"getIndex","codesample":"%REM\nThe following code creates a Collection of strings. This will print &amp;quot;Contains One&amp;quot; and &amp;quot;Does not contain Two&amp;quot;.\n%END REM\nDim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.add(&amp;quot;One&amp;quot;)\nIf (Not IsNull(coll.getIndex(&amp;quot;One&amp;quot;)) Then Print &amp;quot;Contains One&amp;quot;\nIf (IsNull(coll.getIndex(&amp;quot;Two&amp;quot;)) Then Print &amp;quot;Does not contain Two&amp;quot;","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(checkValue As Variant)","signature":"Public Function getIndex(checkValue As Variant) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks whether the Collection contains a specific value.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks whether the Collection contains a specific value.","inlinecomment":" \t &apos; Checks whether the Collection contains a specific value.","parentclassname":"Collection","codesamplehtml":"%REM&lt;br /&gt;The following code creates a Collection of strings. This will print &amp;quot;Contains One&amp;quot; and &amp;quot;Does not contain Two&amp;quot;.&lt;br /&gt;%END REM&lt;br /&gt;Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Call coll.add(&amp;quot;One&amp;quot;)&lt;br /&gt;If (Not IsNull(coll.getIndex(&amp;quot;One&amp;quot;)) Then Print &amp;quot;Contains One&amp;quot;&lt;br /&gt;If (IsNull(coll.getIndex(&amp;quot;Two&amp;quot;)) Then Print &amp;quot;Does not contain Two&amp;quot;", "signatureelements":["Public","Function"], "arguments":[{"label":"checkValue","comment":"Value to check for","valuetype":"Variant","filenamebase":"checkValue_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectiongetIndex","qn":"checkValue","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value to check for&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value to check for","inlinecomment":" \t &apos; Value to check for"}]},{"label":"getNthElementRaw","comment":"Gets the nth elment as a raew variant, starting at index 0","valuetype":"Variant","filenamebase":"getNthElementRaw_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"getNthElementRaw","codesample":"%REM\nThe following code gets the element at index 1. It then checks an entry at index 2, which returns that it is empty\n%END REM\nDim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.add(&amp;quot;One&amp;quot;)\nCall coll.add(&amp;quot;Two&amp;quot;)\nPrint CStr(coll.getNthElementRaw(1))    &amp;apos; Prints &amp;quot;Two&amp;quot;\nPrint IsEmpty(coll.getNthElementRaw(5))     &amp;apos; Prints True","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(index As Long)","signature":"Public Function getNthElementRaw(index As Long) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the nth elment as a raew variant, starting at index 0&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the nth elment as a raew variant, starting at index 0","inlinecomment":" \t &apos; Gets the nth elment as a raew variant, starting at index 0","parentclassname":"Collection","codesamplehtml":"%REM&lt;br /&gt;The following code gets the element at index 1. It then checks an entry at index 2, which returns that it is empty&lt;br /&gt;%END REM&lt;br /&gt;Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Call coll.add(&amp;quot;One&amp;quot;)&lt;br /&gt;Call coll.add(&amp;quot;Two&amp;quot;)&lt;br /&gt;Print CStr(coll.getNthElementRaw(1))    &amp;apos; Prints &amp;quot;Two&amp;quot;&lt;br /&gt;Print IsEmpty(coll.getNthElementRaw(5))     &amp;apos; Prints True", "signatureelements":["Public","Function"], "arguments":[{"label":"index","comment":"Index of the element to return","valuetype":"Long","filenamebase":"index_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectiongetNthElementRaw","qn":"index","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Index of the element to return&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Index of the element to return","inlinecomment":" \t &apos; Index of the element to return"}]},{"label":"insertAt","comment":"Inserts an element in the collection at an index, starting at index 0. Not allowed for sorted collections","valuetype":"Boolean","filenamebase":"insertAt_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"insertAt","codesample":"%REM\nThe following code is abbreviated code from Collection.getIndex. It compares each element against the value being checked, and if it matches, returns the current index.\n%END REM\nDim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nDim testSuite as New TestSuite(&amp;quot;Validate collections&amp;quot;)\nCall coll.add(&amp;quot;One&amp;quot;)\nCall coll.add(&amp;quot;Two&amp;quot;)\nCall coll.insertAt(&amp;quot;Three&amp;quot;, 1)\nCall testSuite.describe(&amp;quot;Check 3 elements&amp;quot;).assertEqualsLong(3, coll.elementCount)\nCall testSuite.describe(&amp;quot;Check second element is Three&amp;quot;).assertEqualsString(&amp;quot;Three&amp;quot;, CStr(coll.getNthElementRaw(1), True)\nCall testSuite.describe(&amp;quot;Check third element is Two&amp;quot;).assertEqualsString(&amp;quot;Two&amp;quot;, CStr(coll.getNthElementRaw(2), True)\nDim coll1 as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, True)    &amp;apos; Sorted\nCall coll1.addAll(coll)\nCall testSuite.describe(&amp;quot;Test adding to sorted collection&amp;quot;)\nTry\n    Call coll.insertAt(&amp;quot;Three&amp;quot;, 1)\n    Call testSuite.addResult(False, &amp;quot;Successfully inserted into sorted collection, this should have errored&amp;quot;)\nCatch\n    Call testSuite.addResult(True, &amp;quot;&amp;quot;)\nEnd Try","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant, index As Long)","signature":"Public Function insertAt(source As Variant, index As Long) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Inserts an element in the collection at an index, starting at index 0. Not allowed for sorted collections&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Inserts an element in the collection at an index, starting at index 0. Not allowed for sorted collections","inlinecomment":" \t &apos; Inserts an element in the collection at an index, starting at index 0. Not allowed for sorted collections","parentclassname":"Collection","codesamplehtml":"%REM&lt;br /&gt;The following code is abbreviated code from Collection.getIndex. It compares each element against the value being checked, and if it matches, returns the current index.&lt;br /&gt;%END REM&lt;br /&gt;Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Dim testSuite as New TestSuite(&amp;quot;Validate collections&amp;quot;)&lt;br /&gt;Call coll.add(&amp;quot;One&amp;quot;)&lt;br /&gt;Call coll.add(&amp;quot;Two&amp;quot;)&lt;br /&gt;Call coll.insertAt(&amp;quot;Three&amp;quot;, 1)&lt;br /&gt;Call testSuite.describe(&amp;quot;Check 3 elements&amp;quot;).assertEqualsLong(3, coll.elementCount)&lt;br /&gt;Call testSuite.describe(&amp;quot;Check second element is Three&amp;quot;).assertEqualsString(&amp;quot;Three&amp;quot;, CStr(coll.getNthElementRaw(1), True)&lt;br /&gt;Call testSuite.describe(&amp;quot;Check third element is Two&amp;quot;).assertEqualsString(&amp;quot;Two&amp;quot;, CStr(coll.getNthElementRaw(2), True)&lt;br /&gt;Dim coll1 as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, True)    &amp;apos; Sorted&lt;br /&gt;Call coll1.addAll(coll)&lt;br /&gt;Call testSuite.describe(&amp;quot;Test adding to sorted collection&amp;quot;)&lt;br /&gt;Try&lt;br /&gt;    Call coll.insertAt(&amp;quot;Three&amp;quot;, 1)&lt;br /&gt;    Call testSuite.addResult(False, &amp;quot;Successfully inserted into sorted collection, this should have errored&amp;quot;)&lt;br /&gt;Catch&lt;br /&gt;    Call testSuite.addResult(True, &amp;quot;&amp;quot;)&lt;br /&gt;End Try", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Must match Collection&amp;apos;s ContentType","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectioninsertAt","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Must match Collection&amp;apos;s ContentType&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Must match Collection&amp;apos;s ContentType","inlinecomment":" \t &apos; Must match Collection&amp;apos;s ContentType"},{"label":"index","comment":"Index at which to insert the element","valuetype":"Long","filenamebase":"index_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectioninsertAt","qn":"index","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Index at which to insert the element&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Index at which to insert the element","inlinecomment":" \t &apos; Index at which to insert the element"}]},{"label":"join","comment":"Joins a collection of scalar values into a single string response separated by a passed delimiter","valuetype":"String","filenamebase":"join_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"join","codesample":"Dim coll as New Collection(INTEGER, Nothing, False, False)\nCall coll.add(1)\nCall coll.add(2)\nPrint coll.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints &amp;quot;1,2&amp;quot;\nSet coll = new Collection(PERSON, Nothing, False, False)    &amp;apos; Assumes a Person class available\nDim p1 as New Person\nDim p2 as New Person\nCall coll.add(p1)\nCall coll.add(p2)\nPrint coll.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints &amp;quot;NOT STRINGABLE,NOT STRINGABLE&amp;quot;","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(delim As String)","signature":"Public Function join(delim As String) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Joins a collection of scalar values into a single string response separated by a passed delimiter&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Joins a collection of scalar values into a single string response separated by a passed delimiter","inlinecomment":" \t &apos; Joins a collection of scalar values into a single string response separated by a passed delimiter","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(INTEGER, Nothing, False, False)&lt;br /&gt;Call coll.add(1)&lt;br /&gt;Call coll.add(2)&lt;br /&gt;Print coll.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints &amp;quot;1,2&amp;quot;&lt;br /&gt;Set coll = new Collection(PERSON, Nothing, False, False)    &amp;apos; Assumes a Person class available&lt;br /&gt;Dim p1 as New Person&lt;br /&gt;Dim p2 as New Person&lt;br /&gt;Call coll.add(p1)&lt;br /&gt;Call coll.add(p2)&lt;br /&gt;Print coll.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints &amp;quot;NOT STRINGABLE,NOT STRINGABLE&amp;quot;", "signatureelements":["Public","Function"], "arguments":[{"label":"delim","comment":"Delimiter to separate values","valuetype":"String","filenamebase":"delim_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectionjoin","qn":"delim","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Delimiter to separate values&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Delimiter to separate values","inlinecomment":" \t &apos; Delimiter to separate values"}]},{"label":"remove","comment":"Removes an element (or elements, if not unique) from the Collection. Returns the number of elements removed.","valuetype":"Long","filenamebase":"remove_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"remove","codesample":"Dim coll as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)\nCall coll.add(1)\nCall coll.add(2)\nCall coll.add(2)\nCall coll.add(6)\nCall coll.add(2)\nPrint coll.remove(2, False)   &amp;apos;Prints 1\nPrint coll.remove(2, True)    &amp;apos; Prints 2","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant, allMatches As Boolean)","signature":"Public Function remove(source As Variant, allMatches As Boolean) As Long","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Removes an element (or elements, if not unique) from the Collection. Returns the number of elements removed.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Removes an element (or elements, if not unique) from the Collection. Returns the number of elements removed.","inlinecomment":" \t &apos; Removes an element (or elements, if not unique) from the Collection. Returns the number of elements removed.","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)&lt;br /&gt;Call coll.add(1)&lt;br /&gt;Call coll.add(2)&lt;br /&gt;Call coll.add(2)&lt;br /&gt;Call coll.add(6)&lt;br /&gt;Call coll.add(2)&lt;br /&gt;Print coll.remove(2, False)   &amp;apos;Prints 1&lt;br /&gt;Print coll.remove(2, True)    &amp;apos; Prints 2", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Element to remove","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectionremove","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Element to remove&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Element to remove","inlinecomment":" \t &apos; Element to remove"},{"label":"allMatches","comment":"Whether to remove all elements that match source or just the first match","valuetype":"Boolean","filenamebase":"allMatches_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectionremove","qn":"allMatches","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether to remove all elements that match source or just the first match&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether to remove all elements that match source or just the first match","inlinecomment":" \t &apos; Whether to remove all elements that match source or just the first match"}]},{"label":"replace","comment":"Replaces an element with another and returns the number of replacements made.\nIf the Collection is unsorted, replacements are made at the same positions.\nIf the Collection is sorted, the old elements are removed and new ones inserted at the appropriate sorted location.","valuetype":"Long","filenamebase":"replace_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"replace","codesample":"Dim coll as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)\nCall coll.add(1)\nCall coll.add(2)\nCall coll.add(6)\nCall coll.add(1)\nCall coll.replace(1, 3, True)\nPrint coll.join(&amp;quot;,&amp;quot;)    &amp;apos;Prints 3,2,6,3\nDim coll1 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, True)\nCall coll1.add(1)\nCall coll1.add(2)\nCall coll1.add(6)\nCall coll1.add(1)\nCall coll1.replace(1, 3, True)\nPrint coll1.join(&amp;quot;,&amp;quot;)    &amp;apos;Prints 2,3,3,6","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(oldValue As Variant, newValue As Variant, allMatches As Boolean)","signature":"Public Function replace(oldValue As Variant, newValue As Variant, allMatches As Boolean) As Long","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Replaces an element with another and returns the number of replacements made.&lt;br /&gt;If the Collection is unsorted, replacements are made at the same positions.&lt;br /&gt;If the Collection is sorted, the old elements are removed and new ones inserted at the appropriate sorted location.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Replaces an element with another and returns the number of replacements made.&lt;br /&gt;If the Collection is unsorted, replacements are made at the same positions.&lt;br /&gt;If the Collection is sorted, the old elements are removed and new ones inserted at the appropriate sorted location.","inlinecomment":" \t &apos; Replaces an element with another and returns the number of replacements made.\nIf the Collection is unsorted, replacements are made at the same positions.\nIf the Collection is sorted, the old elements are removed and new ones inserted at the appropriate sorted location.","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)&lt;br /&gt;Call coll.add(1)&lt;br /&gt;Call coll.add(2)&lt;br /&gt;Call coll.add(6)&lt;br /&gt;Call coll.add(1)&lt;br /&gt;Call coll.replace(1, 3, True)&lt;br /&gt;Print coll.join(&amp;quot;,&amp;quot;)    &amp;apos;Prints 3,2,6,3&lt;br /&gt;Dim coll1 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, True)&lt;br /&gt;Call coll1.add(1)&lt;br /&gt;Call coll1.add(2)&lt;br /&gt;Call coll1.add(6)&lt;br /&gt;Call coll1.add(1)&lt;br /&gt;Call coll1.replace(1, 3, True)&lt;br /&gt;Print coll1.join(&amp;quot;,&amp;quot;)    &amp;apos;Prints 2,3,3,6", "signatureelements":["Public","Function"], "arguments":[{"label":"oldValue","comment":"Value to replace","valuetype":"Variant","filenamebase":"oldValue_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectionreplace","qn":"oldValue","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value to replace&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value to replace","inlinecomment":" \t &apos; Value to replace"},{"label":"newValue","comment":"Value to insert","valuetype":"Variant","filenamebase":"newValue_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectionreplace","qn":"newValue","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value to insert&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value to insert","inlinecomment":" \t &apos; Value to insert"},{"label":"allMatches","comment":"Whether to replace the first match or all matches","valuetype":"Boolean","filenamebase":"allMatches_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectionreplace","qn":"allMatches","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether to replace the first match or all matches&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether to replace the first match or all matches","inlinecomment":" \t &apos; Whether to replace the first match or all matches"}]},{"label":"toJson","comment":"Converts the Collection to a JsonObject that&amp;apos;s an array.\nIf the array values are objects, the code will try to call a toJson method on the object, otherwise skip them.","valuetype":"JsonObject","filenamebase":"toJson_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"toJson","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nDim jsonObj as JsonObject\nCall coll.add(&amp;quot;One&amp;quot;)\nCall coll.add(&amp;quot;Two&amp;quot;)\nSet jsonObj = coll.toJson()\nPrint jsonObj.toString(False)    &amp;apos;Prints [&amp;quot;One&amp;quot;,&amp;quot;Two&amp;quot;]","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function toJson() As JsonObject","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Converts the Collection to a JsonObject that&amp;apos;s an array.&lt;br /&gt;If the array values are objects, the code will try to call a toJson method on the object, otherwise skip them.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Converts the Collection to a JsonObject that&amp;apos;s an array.&lt;br /&gt;If the array values are objects, the code will try to call a toJson method on the object, otherwise skip them.","inlinecomment":" \t &apos; Converts the Collection to a JsonObject that&amp;apos;s an array.\nIf the array values are objects, the code will try to call a toJson method on the object, otherwise skip them.","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Dim jsonObj as JsonObject&lt;br /&gt;Call coll.add(&amp;quot;One&amp;quot;)&lt;br /&gt;Call coll.add(&amp;quot;Two&amp;quot;)&lt;br /&gt;Set jsonObj = coll.toJson()&lt;br /&gt;Print jsonObj.toString(False)    &amp;apos;Prints [&amp;quot;One&amp;quot;,&amp;quot;Two&amp;quot;]", "signatureelements":["Public","Function"]},{"label":"comparator","comment":"Comparator to compare values with","valuetype":"Comparator","filenamebase":"comparator_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"Get.comparator","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get comparator As Comparator","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Comparator to compare values with&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Comparator to compare values with","inlinecomment":" \t &apos; Comparator to compare values with","parentclassname":"Collection","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"contentType","comment":"TypeName(s) of elements within the Collection","valuetype":"String","filenamebase":"contentType_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"Get.contentType","codesample":"Dim coll as New Collection(&amp;quot;SCALAR&amp;quot;,Nothing,False,False)\nPrint coll.contentType    &amp;apos;Prints &amp;quot;SCALAR&amp;quot;","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get contentType As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;TypeName(s) of elements within the Collection&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"TypeName(s) of elements within the Collection","inlinecomment":" \t &apos; TypeName(s) of elements within the Collection","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;SCALAR&amp;quot;,Nothing,False,False)&lt;br /&gt;Print coll.contentType    &amp;apos;Prints &amp;quot;SCALAR&amp;quot;", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"elementCount","comment":"Number of elements within the Collection","valuetype":"Long","filenamebase":"elementCount_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"Get.elementCount","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nPrint coll.elementCount    &amp;apos;Prints 0","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get elementCount As Long","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Number of elements within the Collection&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Number of elements within the Collection","inlinecomment":" \t &apos; Number of elements within the Collection","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Print coll.elementCount    &amp;apos;Prints 0", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"hasContent","comment":"Flag indicating if the Collection has elemens","valuetype":"Boolean","filenamebase":"hasContent_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"Get.hasContent","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothig, False, False)\nPrint coll.hasContent   &amp;apos;Prints False\nCall coll.add(&amp;quot;Hello&amp;quot;)\nPrint coll.hasContent    &amp;apos;Prints True","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get hasContent As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the Collection has elemens&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the Collection has elemens","inlinecomment":" \t &apos; Flag indicating if the Collection has elemens","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothig, False, False)&lt;br /&gt;Print coll.hasContent   &amp;apos;Prints False&lt;br /&gt;Call coll.add(&amp;quot;Hello&amp;quot;)&lt;br /&gt;Print coll.hasContent    &amp;apos;Prints True", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"isLocked","comment":"Flag indicating if the Collection is locked, so adds, removes and replaces are aborted","valuetype":"Boolean","filenamebase":"isLocked_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"Get.isLocked","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.lock()\nPrint coll.isLocked    &amp;apos;Prints True","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isLocked As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the Collection is locked, so adds, removes and replaces are aborted&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the Collection is locked, so adds, removes and replaces are aborted","inlinecomment":" \t &apos; Flag indicating if the Collection is locked, so adds, removes and replaces are aborted","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Call coll.lock()&lt;br /&gt;Print coll.isLocked    &amp;apos;Prints True", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"isReversed","comment":"Flagindicating whether the Collection has been reversed","valuetype":"Boolean","filenamebase":"isReversed_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"Get.isReversed","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nPrint coll.isReversed   &amp;apos; Prints False\nCall coll.reverse()\nPrint coll.isReversed   &amp;apos; Prints True\nCall coll.reverse()\nPrint coll.isReversed   &amp;apos; Prints False","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isReversed As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flagindicating whether the Collection has been reversed&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flagindicating whether the Collection has been reversed","inlinecomment":" \t &apos; Flagindicating whether the Collection has been reversed","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Print coll.isReversed   &amp;apos; Prints False&lt;br /&gt;Call coll.reverse()&lt;br /&gt;Print coll.isReversed   &amp;apos; Prints True&lt;br /&gt;Call coll.reverse()&lt;br /&gt;Print coll.isReversed   &amp;apos; Prints False", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"isSorted","comment":"Flag indicating if the Collection is sorted (using Comparator object internally)","valuetype":"Boolean","filenamebase":"isSorted_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"Get.isSorted","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nPrint coll.isSorted    &amp;apos;Prints false","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isSorted As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the Collection is sorted (using Comparator object internally)&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the Collection is sorted (using Comparator object internally)","inlinecomment":" \t &apos; Flag indicating if the Collection is sorted (using Comparator object internally)","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Print coll.isSorted    &amp;apos;Prints false", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"isUnique","comment":"Flag indicating if the elements in the Collection must be unique","valuetype":"Boolean","filenamebase":"isUnique_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"Get.isUnique","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nPrint coll.isUnique    &amp;apos; Prints False","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isUnique As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the elements in the Collection must be unique&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the elements in the Collection must be unique","inlinecomment":" \t &apos; Flag indicating if the elements in the Collection must be unique","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Print coll.isUnique    &amp;apos; Prints False", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"suppressErrors","comment":"Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked\nor attempting to insert an entry into a sorted Collection.\nInstead of throwing an error, e.g. for wrong content type, the method will just return false","valuetype":"Boolean","filenamebase":"suppressErrors_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"Get.suppressErrors","codesample":"%REM\nThe following code will print &amp;quot;Error adding&amp;quot; for the first Try/Catch. But for the second, the error will be suppressed and the call to .add() will return False\n%END REM\nDim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nDim success as Boolean\nTry\n    success = coll.add(2)\n    Print success    &amp;apos; Code will not get to this line\nCatch\n    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will be printed\nEnd Try\ncoll.suppressErrors = True\nTry\n    success = coll.add(2)\n    Print success    &amp;apos; Code will print False\nCatch\n    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will NOT be printed\nEnd Try","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get suppressErrors As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked&lt;br /&gt;or attempting to insert an entry into a sorted Collection.&lt;br /&gt;Instead of throwing an error, e.g. for wrong content type, the method will just return false&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked&lt;br /&gt;or attempting to insert an entry into a sorted Collection.&lt;br /&gt;Instead of throwing an error, e.g. for wrong content type, the method will just return false","inlinecomment":" \t &apos; Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked\nor attempting to insert an entry into a sorted Collection.\nInstead of throwing an error, e.g. for wrong content type, the method will just return false","parentclassname":"Collection","codesamplehtml":"%REM&lt;br /&gt;The following code will print &amp;quot;Error adding&amp;quot; for the first Try/Catch. But for the second, the error will be suppressed and the call to .add() will return False&lt;br /&gt;%END REM&lt;br /&gt;Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Dim success as Boolean&lt;br /&gt;Try&lt;br /&gt;    success = coll.add(2)&lt;br /&gt;    Print success    &amp;apos; Code will not get to this line&lt;br /&gt;Catch&lt;br /&gt;    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will be printed&lt;br /&gt;End Try&lt;br /&gt;coll.suppressErrors = True&lt;br /&gt;Try&lt;br /&gt;    success = coll.add(2)&lt;br /&gt;    Print success    &amp;apos; Code will print False&lt;br /&gt;Catch&lt;br /&gt;    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will NOT be printed&lt;br /&gt;End Try", "signatureelements":["Public","Property","Get"]},{"label":"suppressErrors","comment":"Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked\nor attempting to insert an entry into a sorted Collection.\nInstead of throwing an error, e.g. for wrong content type, the method will just return false","valuetype":"Boolean","filenamebase":"suppressErrors_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"Set.suppressErrors","codesample":"%REM\nThe following code will print &amp;quot;Error adding&amp;quot; for the first Try/Catch. But for the second, the error will be suppressed and the call to .add() will return False\n%END REM\nDim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nDim success as Boolean\nTry\n    success = coll.add(2)\n    Print success    &amp;apos; Code will not get to this line\nCatch\n    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will be printed\nEnd Try\ncoll.suppressErrors = True\nTry\n    success = coll.add(2)\n    Print success    &amp;apos; Code will print False\nCatch\n    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will NOT be printed\nEnd Try","signaturecode":2308,"instancecode":256,"argumentsuffix":"","signature":"Public Property Set suppressErrors As Boolean","modifiers":"Public Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked&lt;br /&gt;or attempting to insert an entry into a sorted Collection.&lt;br /&gt;Instead of throwing an error, e.g. for wrong content type, the method will just return false&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked&lt;br /&gt;or attempting to insert an entry into a sorted Collection.&lt;br /&gt;Instead of throwing an error, e.g. for wrong content type, the method will just return false","inlinecomment":" \t &apos; Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked\nor attempting to insert an entry into a sorted Collection.\nInstead of throwing an error, e.g. for wrong content type, the method will just return false","parentclassname":"Collection","codesamplehtml":"%REM&lt;br /&gt;The following code will print &amp;quot;Error adding&amp;quot; for the first Try/Catch. But for the second, the error will be suppressed and the call to .add() will return False&lt;br /&gt;%END REM&lt;br /&gt;Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Dim success as Boolean&lt;br /&gt;Try&lt;br /&gt;    success = coll.add(2)&lt;br /&gt;    Print success    &amp;apos; Code will not get to this line&lt;br /&gt;Catch&lt;br /&gt;    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will be printed&lt;br /&gt;End Try&lt;br /&gt;coll.suppressErrors = True&lt;br /&gt;Try&lt;br /&gt;    success = coll.add(2)&lt;br /&gt;    Print success    &amp;apos; Code will print False&lt;br /&gt;Catch&lt;br /&gt;    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will NOT be printed&lt;br /&gt;End Try", "signatureelements":["Public","Property","Set"]},{"label":"clear","comment":"Removes all values from the Collection and resets whether the collection is reversed.","valuetype":"","filenamebase":"clear_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"clear","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.add(&amp;quot;One&amp;quot;)\nPrint coll.elementCount    &amp;apos; Prints 1\nCall coll.clear()\nPrint coll.elementCount    &amp;apos; Prints 0","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub clear()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Removes all values from the Collection and resets whether the collection is reversed.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Removes all values from the Collection and resets whether the collection is reversed.","inlinecomment":" \t &apos; Removes all values from the Collection and resets whether the collection is reversed.","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Call coll.add(&amp;quot;One&amp;quot;)&lt;br /&gt;Print coll.elementCount    &amp;apos; Prints 1&lt;br /&gt;Call coll.clear()&lt;br /&gt;Print coll.elementCount    &amp;apos; Prints 0", "signatureelements":["Public","Sub"]},{"label":"fromJson","comment":"Loads the scalar values array from the JsonObject into the Collection. Can only be used for a JsonObject that contains a single array of scalars.","valuetype":"","filenamebase":"fromJson_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"fromJson","codesample":"Dim jsonObj as New JsonObject\nCall jsonObj.appendToJsonArray(1)\nCall jsonObj.appendToJsonArray(2)\nCall jsonObj.appendToJsonArray(3)\nDim coll as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, True, True)\nCall coll.fromJson(jsonObj)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(jsonObj As JsonObject)","signature":"Public Sub fromJson(jsonObj As JsonObject)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Loads the scalar values array from the JsonObject into the Collection. Can only be used for a JsonObject that contains a single array of scalars.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Loads the scalar values array from the JsonObject into the Collection. Can only be used for a JsonObject that contains a single array of scalars.","inlinecomment":" \t &apos; Loads the scalar values array from the JsonObject into the Collection. Can only be used for a JsonObject that contains a single array of scalars.","parentclassname":"Collection","codesamplehtml":"Dim jsonObj as New JsonObject&lt;br /&gt;Call jsonObj.appendToJsonArray(1)&lt;br /&gt;Call jsonObj.appendToJsonArray(2)&lt;br /&gt;Call jsonObj.appendToJsonArray(3)&lt;br /&gt;Dim coll as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, True, True)&lt;br /&gt;Call coll.fromJson(jsonObj)", "signatureelements":["Public","Sub"], "arguments":[{"label":"jsonObj","comment":"JsonObject containig an array of scalars","valuetype":"JsonObject","filenamebase":"jsonObj_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectionfromJson","qn":"jsonObj","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JsonObject containig an array of scalars&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JsonObject containig an array of scalars","inlinecomment":" \t &apos; JsonObject containig an array of scalars"}]},{"label":"lock","comment":"Locks the collection, so any add, remove, replace or reverse functions trigger errors. \n\t\tUseful when passing a collection to other functions.","valuetype":"","filenamebase":"lock_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"lock","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.add(&amp;quot;One&amp;quot;)\nCall coll.lock()\nCall coll.add(&amp;quot;Two&amp;quot;)   &amp;apos; Throws error","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub lock()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Locks the collection, so any add, remove, replace or reverse functions trigger errors. &lt;br /&gt;\t\tUseful when passing a collection to other functions.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Locks the collection, so any add, remove, replace or reverse functions trigger errors. &lt;br /&gt;\t\tUseful when passing a collection to other functions.","inlinecomment":" \t &apos; Locks the collection, so any add, remove, replace or reverse functions trigger errors. \n\t\tUseful when passing a collection to other functions.","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Call coll.add(&amp;quot;One&amp;quot;)&lt;br /&gt;Call coll.lock()&lt;br /&gt;Call coll.add(&amp;quot;Two&amp;quot;)   &amp;apos; Throws error", "signatureelements":["Public","Sub"]},{"label":"New","comment":"Constructor","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(contentType As String, comparator As Comparator, mustBeUnique As Boolean, isSorted As Boolean)","signature":"Public Sub New(contentType As String, comparator As Comparator, mustBeUnique As Boolean, isSorted As Boolean)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor","inlinecomment":" \t &apos; Constructor","parentclassname":"Collection","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"contentType","comment":"Defines the Content Type of the Collection","valuetype":"String","filenamebase":"contentType_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectionNew","qn":"contentType","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Defines the Content Type of the Collection&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Defines the Content Type of the Collection","inlinecomment":" \t &apos; Defines the Content Type of the Collection"},{"label":"comparator","comment":"Comparator instance to use when checking for unique and sorting elements. If Nothing is passed, a default Comparator will be used which works for scalars, grouping numbers and comparing on data type and value","valuetype":"Comparator","filenamebase":"comparator_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectionNew","qn":"comparator","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Comparator instance to use when checking for unique and sorting elements. If Nothing is passed, a default Comparator will be used which works for scalars, grouping numbers and comparing on data type and value&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Comparator instance to use when checking for unique and sorting elements. If Nothing is passed, a default Comparator will be used which works for scalars, grouping numbers and comparing on data type and value","inlinecomment":" \t &apos; Comparator instance to use when checking for unique and sorting elements. If Nothing is passed, a default Comparator will be used which works for scalars, grouping numbers and comparing on data type and value"},{"label":"mustBeUnique","comment":"Flag indicating if elements within the Collection must be unique","valuetype":"Boolean","filenamebase":"mustBeUnique_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectionNew","qn":"mustBeUnique","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if elements within the Collection must be unique&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if elements within the Collection must be unique","inlinecomment":" \t &apos; Flag indicating if elements within the Collection must be unique"},{"label":"isSorted","comment":"Flag indicating if the content within the Collection shall be sorted","valuetype":"Boolean","filenamebase":"isSorted_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectionNew","qn":"isSorted","argumentindex":4,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the content within the Collection shall be sorted&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the content within the Collection shall be sorted","inlinecomment":" \t &apos; Flag indicating if the content within the Collection shall be sorted"}]},{"label":"reverse","comment":"Reverses a collection","valuetype":"","filenamebase":"reverse_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"reverse","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.add(&amp;quot;A&amp;quot;)\nCall coll.add(&amp;quot;B&amp;quot;)\nCall coll.reverse()\nCall coll.add(&amp;quot;C&amp;quot;)\nPrint coll.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints B,A,C\nSet coll = new Collection(&amp;quot;STRING&amp;quot;, Nothing, False, True)\nCall coll.add(&amp;quot;A&amp;quot;)\nCall coll.add(&amp;quot;B&amp;quot;)\nCall coll.reverse()\nCall coll.add(&amp;quot;C&amp;quot;)\nPrint coll.join(&amp;quot;,&amp;quot;)   Prints C,B,A","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub reverse()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Reverses a collection&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Reverses a collection","inlinecomment":" \t &apos; Reverses a collection","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Call coll.add(&amp;quot;A&amp;quot;)&lt;br /&gt;Call coll.add(&amp;quot;B&amp;quot;)&lt;br /&gt;Call coll.reverse()&lt;br /&gt;Call coll.add(&amp;quot;C&amp;quot;)&lt;br /&gt;Print coll.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints B,A,C&lt;br /&gt;Set coll = new Collection(&amp;quot;STRING&amp;quot;, Nothing, False, True)&lt;br /&gt;Call coll.add(&amp;quot;A&amp;quot;)&lt;br /&gt;Call coll.add(&amp;quot;B&amp;quot;)&lt;br /&gt;Call coll.reverse()&lt;br /&gt;Call coll.add(&amp;quot;C&amp;quot;)&lt;br /&gt;Print coll.join(&amp;quot;,&amp;quot;)   Prints C,B,A", "signatureelements":["Public","Sub"]},{"label":"transform","comment":"Transforms members of this Collection using a CollectionTransformer and adds them to the new Collection passed","valuetype":"","filenamebase":"transform_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"transform","codesample":"%REM\nThe following code shows how to create a transformer to square values. The code is very basic with no error handling.\n%END REM\nClass SquareTransformer as CollectionTransformer\n    Function transform(source as Variant) as Variant\n        transform = source * source\n    End Function\nEnd Class\nDim coll1 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)\nDim coll2 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)\nDim transformer as New SquareTransformer()\nCall coll1.add(2)\nCall coll1.add(3)\nCall coll1.add(4)\nCall coll1.transform(transformer, coll2)\nPrint coll2.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints 4,9,16","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(transformer As CollectionTransformer, newColl As Collection)","signature":"Public Sub transform(transformer As CollectionTransformer, newColl As Collection)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Transforms members of this Collection using a CollectionTransformer and adds them to the new Collection passed&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Transforms members of this Collection using a CollectionTransformer and adds them to the new Collection passed","inlinecomment":" \t &apos; Transforms members of this Collection using a CollectionTransformer and adds them to the new Collection passed","parentclassname":"Collection","codesamplehtml":"%REM&lt;br /&gt;The following code shows how to create a transformer to square values. The code is very basic with no error handling.&lt;br /&gt;%END REM&lt;br /&gt;Class SquareTransformer as CollectionTransformer&lt;br /&gt;    Function transform(source as Variant) as Variant&lt;br /&gt;        transform = source * source&lt;br /&gt;    End Function&lt;br /&gt;End Class&lt;br /&gt;Dim coll1 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)&lt;br /&gt;Dim coll2 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)&lt;br /&gt;Dim transformer as New SquareTransformer()&lt;br /&gt;Call coll1.add(2)&lt;br /&gt;Call coll1.add(3)&lt;br /&gt;Call coll1.add(4)&lt;br /&gt;Call coll1.transform(transformer, coll2)&lt;br /&gt;Print coll2.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints 4,9,16", "signatureelements":["Public","Sub"], "arguments":[{"label":"transformer","comment":"CollectionTransformer to transform members","valuetype":"CollectionTransformer","filenamebase":"transformer_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectiontransform","qn":"transformer","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;CollectionTransformer to transform members&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"CollectionTransformer to transform members","inlinecomment":" \t &apos; CollectionTransformer to transform members"},{"label":"newColl","comment":"Collection to load transformed members into","valuetype":"Collection","filenamebase":"newColl_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectiontransform","qn":"newColl","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Collection to load transformed members into&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Collection to load transformed members into","inlinecomment":" \t &apos; Collection to load transformed members into"}]},{"label":"unlock","comment":"Unlocks the Collection, so add, remove, replace or reverse functions can be used again","valuetype":"","filenamebase":"unlock_Method","fqnprefix":"VoltScriptCollections.Collection","qn":"unlock","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.lock()\nTry\n    Call coll.add(&amp;quot;One&amp;quot;)\nCatch\n    &amp;apos; Code will enter this catch block\nEnd Try\nCall coll.unlock()\nCall coll.add(&amp;quot;One&amp;quot;)   &amp;apos; This will be successful","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub unlock()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Unlocks the Collection, so add, remove, replace or reverse functions can be used again&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Unlocks the Collection, so add, remove, replace or reverse functions can be used again","inlinecomment":" \t &apos; Unlocks the Collection, so add, remove, replace or reverse functions can be used again","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&lt;br /&gt;Call coll.lock()&lt;br /&gt;Try&lt;br /&gt;    Call coll.add(&amp;quot;One&amp;quot;)&lt;br /&gt;Catch&lt;br /&gt;    &amp;apos; Code will enter this catch block&lt;br /&gt;End Try&lt;br /&gt;Call coll.unlock()&lt;br /&gt;Call coll.add(&amp;quot;One&amp;quot;)   &amp;apos; This will be successful", "signatureelements":["Public","Sub"]}]},{"classname":"CollectionFilter","comment":"Class for filtering elements when filtering a Collection","valuetype":"","filenamebase":"CollectionFilter_ObjectClass","fqnprefix":"VoltScriptCollections","qn":"CollectionFilter","codesample":"%REM\nThe following code shows how to create a filter for even numbers and use it. The code is very basic with no error handling.\n%END REM\nClass EvenFilterer as CollectionFilter\n    Function filter(source as Variant) as Boolean\n        If (source Mod 2 = 0) Then Return True\n    End Function\nEnd Class\n\nDim coll1 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)\nDim coll2 as Collection\nDim filterer as New EvenFilterer\n\n&amp;apos; Populating collection omitted\n\nSet coll2 = coll1.filter(filterer)","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"FD17E29641C6117580258994003AF3B0","version":3,"classid":"0F069B1249AD083880258994003F7061","signature":"Public Class CollectionFilter","modifiers":"Public","classname":"CollectionFilter","parentclassname":"None","constructorsignature":"Public Sub New()","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class for filtering elements when filtering a Collection&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class for filtering elements when filtering a Collection","inlinecomment":" \t &apos; Class for filtering elements when filtering a Collection","codesamplehtml":"%REM&lt;br /&gt;The following code shows how to create a filter for even numbers and use it. The code is very basic with no error handling.&lt;br /&gt;%END REM&lt;br /&gt;Class EvenFilterer as CollectionFilter&lt;br /&gt;    Function filter(source as Variant) as Boolean&lt;br /&gt;        If (source Mod 2 = 0) Then Return True&lt;br /&gt;    End Function&lt;br /&gt;End Class&lt;br /&gt;&lt;br /&gt;Dim coll1 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)&lt;br /&gt;Dim coll2 as Collection&lt;br /&gt;Dim filterer as New EvenFilterer&lt;br /&gt;&lt;br /&gt;&amp;apos; Populating collection omitted&lt;br /&gt;&lt;br /&gt;Set coll2 = coll1.filter(filterer)", "methods":[{"label":"filter","comment":"Function to filter an element &amp;quot;in&amp;quot; or &amp;quot;out&amp;quot; of the resulting collection","valuetype":"Boolean","filenamebase":"filter_Method","fqnprefix":"VoltScriptCollections.CollectionFilter","qn":"filter","codesample":"%REM\nThe following code shows how to create a filter for even numbers and use it. The code is very basic with no error handling.\n%END REM\nClass EvenFilterer as CollectionFilter\n    Function filter(source as Variant) as Boolean\n        If (source Mod 2 = 0) Then Return True\n    End Function\nEnd Class\nDim coll1 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)\nDim coll2 as Collection\nDim filterer as New EvenFilterer()\n&amp;apos; Populating collection omitted\nSet coll2 = coll1.filter(filterer)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant)","signature":"Public Function filter(source As Variant) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Function to filter an element &amp;quot;in&amp;quot; or &amp;quot;out&amp;quot; of the resulting collection&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Function to filter an element &amp;quot;in&amp;quot; or &amp;quot;out&amp;quot; of the resulting collection","inlinecomment":" \t &apos; Function to filter an element &amp;quot;in&amp;quot; or &amp;quot;out&amp;quot; of the resulting collection","parentclassname":"CollectionFilter","codesamplehtml":"%REM&lt;br /&gt;The following code shows how to create a filter for even numbers and use it. The code is very basic with no error handling.&lt;br /&gt;%END REM&lt;br /&gt;Class EvenFilterer as CollectionFilter&lt;br /&gt;    Function filter(source as Variant) as Boolean&lt;br /&gt;        If (source Mod 2 = 0) Then Return True&lt;br /&gt;    End Function&lt;br /&gt;End Class&lt;br /&gt;Dim coll1 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)&lt;br /&gt;Dim coll2 as Collection&lt;br /&gt;Dim filterer as New EvenFilterer()&lt;br /&gt;&amp;apos; Populating collection omitted&lt;br /&gt;Set coll2 = coll1.filter(filterer)", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"True to filter the value *in*, False to filter *out*","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectionFilterfilter","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;True to filter the value *in*, False to filter *out*&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"True to filter the value *in*, False to filter *out*","inlinecomment":" \t &apos; True to filter the value *in*, False to filter *out*"}]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptCollections.CollectionFilter","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"CollectionFilter","codesamplehtml":"", "signatureelements":["Public","Sub"]}]},{"classname":"CollectionTransformer","comment":"Class to transform elements in a Collection to something else","valuetype":"","filenamebase":"CollectionTransformer_ObjectClass","fqnprefix":"VoltScriptCollections","qn":"CollectionTransformer","codesample":"%REM\nThe following code shows how to create a transformer to convert scalars to doubles. The code is very basic with no error handling.\n%END REM\nClass DoubleTransformer as CollectionTransformer\n    Function transform(source as Variant) as Variant\n        If (IsNumeric(source)) Then\n            If (Not TypeName(source) = &amp;quot;BOOLEAN&amp;quot; And Not IsDate(source)) Then\n                transform = CDbl(source)\n            End If\n        End If\n    End Function\nEnd Class\n\nDim coll1 as New Collection(&amp;quot;SCALAR&amp;quot;, Nothing, False, False)\nDim coll2 as New Collection(&amp;quot;DOUBLE&amp;quot;, Nothing, False, False)\nDim transformer as New DoubleTransformer()\n\n&amp;apos; Populating collection omitted\n\nCall coll1.transform(transformer, coll2)","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"FD17E29641C6117580258994003AF3B0","version":3,"classid":"E98AE656DE43682F802589940041028C","signature":"Public Class CollectionTransformer","modifiers":"Public","classname":"CollectionTransformer","parentclassname":"None","constructorsignature":"Public Sub New()","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class to transform elements in a Collection to something else&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class to transform elements in a Collection to something else","inlinecomment":" \t &apos; Class to transform elements in a Collection to something else","codesamplehtml":"%REM&lt;br /&gt;The following code shows how to create a transformer to convert scalars to doubles. The code is very basic with no error handling.&lt;br /&gt;%END REM&lt;br /&gt;Class DoubleTransformer as CollectionTransformer&lt;br /&gt;    Function transform(source as Variant) as Variant&lt;br /&gt;        If (IsNumeric(source)) Then&lt;br /&gt;            If (Not TypeName(source) = &amp;quot;BOOLEAN&amp;quot; And Not IsDate(source)) Then&lt;br /&gt;                transform = CDbl(source)&lt;br /&gt;            End If&lt;br /&gt;        End If&lt;br /&gt;    End Function&lt;br /&gt;End Class&lt;br /&gt;&lt;br /&gt;Dim coll1 as New Collection(&amp;quot;SCALAR&amp;quot;, Nothing, False, False)&lt;br /&gt;Dim coll2 as New Collection(&amp;quot;DOUBLE&amp;quot;, Nothing, False, False)&lt;br /&gt;Dim transformer as New DoubleTransformer()&lt;br /&gt;&lt;br /&gt;&amp;apos; Populating collection omitted&lt;br /&gt;&lt;br /&gt;Call coll1.transform(transformer, coll2)", "methods":[{"label":"transform","comment":"Function to transform a member of a Collection. If there is no return value, the element is skipped and nothing gets added to the new Collection for this element. Thus the function can perform a filter and a transform simultaneously.","valuetype":"Variant","filenamebase":"transform_Method","fqnprefix":"VoltScriptCollections.CollectionTransformer","qn":"transform","codesample":"%REM\nThe following code shows how to create a transformer to convert scalars to doubles. The code is very basic with no error handling.\n%END REM\nClass DoubleTransformer as CollectionTransformer\n    Function transform(source as Variant) as Variant\n        If (IsNumeric(source)) Then\n            If (Not IsBoolean(source) And Not IsDate(source)) Then\n                transform = CDbl(source)\n            End If\n        End If\n    End Function\nEnd Class\nDim coll1 as New Collection(&amp;quot;SCALAR&amp;quot;, Nothing, False, False)\nDim coll2 as New Collection(&amp;quot;DOUBLE&amp;quot;, Nothing, False, False)\nDim transformer as New DoubleTransformer()\n&amp;apos; Populating collection omitted\nCall coll1.transform(transformer, coll2)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant)","signature":"Public Function transform(source As Variant) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Function to transform a member of a Collection. If there is no return value, the element is skipped and nothing gets added to the new Collection for this element. Thus the function can perform a filter and a transform simultaneously.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Function to transform a member of a Collection. If there is no return value, the element is skipped and nothing gets added to the new Collection for this element. Thus the function can perform a filter and a transform simultaneously.","inlinecomment":" \t &apos; Function to transform a member of a Collection. If there is no return value, the element is skipped and nothing gets added to the new Collection for this element. Thus the function can perform a filter and a transform simultaneously.","parentclassname":"CollectionTransformer","codesamplehtml":"%REM&lt;br /&gt;The following code shows how to create a transformer to convert scalars to doubles. The code is very basic with no error handling.&lt;br /&gt;%END REM&lt;br /&gt;Class DoubleTransformer as CollectionTransformer&lt;br /&gt;    Function transform(source as Variant) as Variant&lt;br /&gt;        If (IsNumeric(source)) Then&lt;br /&gt;            If (Not IsBoolean(source) And Not IsDate(source)) Then&lt;br /&gt;                transform = CDbl(source)&lt;br /&gt;            End If&lt;br /&gt;        End If&lt;br /&gt;    End Function&lt;br /&gt;End Class&lt;br /&gt;Dim coll1 as New Collection(&amp;quot;SCALAR&amp;quot;, Nothing, False, False)&lt;br /&gt;Dim coll2 as New Collection(&amp;quot;DOUBLE&amp;quot;, Nothing, False, False)&lt;br /&gt;Dim transformer as New DoubleTransformer()&lt;br /&gt;&amp;apos; Populating collection omitted&lt;br /&gt;Call coll1.transform(transformer, coll2)", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Value to transform","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptCollectionsCollectionTransformertransform","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value to transform&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value to transform","inlinecomment":" \t &apos; Value to transform"}]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptCollections.CollectionTransformer","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"CollectionTransformer","codesamplehtml":"", "signatureelements":["Public","Sub"]}]},{"classname":"Comparator","comment":"Class used to handle comparison logic (used primarily for sorting Collection objects)","valuetype":"","filenamebase":"Comparator_ObjectClass","fqnprefix":"VoltScriptCollections","qn":"Comparator","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"FD17E29641C6117580258994003AF3B0","version":3,"classid":"C447C84BFFA4943D80258994003C6C13","signature":"Public Class Comparator","modifiers":"Public","classname":"Comparator","parentclassname":"None","constructorsignature":"Public Sub New(isDescending As Boolean)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class used to handle comparison logic (used primarily for sorting Collection objects)&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class used to handle comparison logic (used primarily for sorting Collection objects)","inlinecomment":" \t &apos; Class used to handle comparison logic (used primarily for sorting Collection objects)","codesamplehtml":"", "methods":[{"label":"compare","comment":"Main function that does the comparison. Only needs to code for natural before/after. The outer function will reverse the result if the Comparator is instantiated as descending order or Collection has been reversed.","valuetype":"Integer","filenamebase":"compare_Method","fqnprefix":"VoltScriptCollections.Comparator","qn":"compare","codesample":"%REM\nThe following code is Comparator.compareAscDesc.\n%END REM\nPublic Function compareAscDesc(source as Variant, target as Variant, collReversed as Boolean) as Integer\n    compareAscDesc = compare(source, target)\n    If (m_isDescending Xor collreversed) Then Return 0 - compareAscDesc Else Return compareAscDesc\nEnd Function","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant, target As Variant)","signature":"Public Function compare(source As Variant, target As Variant) As Integer","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Main function that does the comparison. Only needs to code for natural before/after. The outer function will reverse the result if the Comparator is instantiated as descending order or Collection has been reversed.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Main function that does the comparison. Only needs to code for natural before/after. The outer function will reverse the result if the Comparator is instantiated as descending order or Collection has been reversed.","inlinecomment":" \t &apos; Main function that does the comparison. Only needs to code for natural before/after. The outer function will reverse the result if the Comparator is instantiated as descending order or Collection has been reversed.","parentclassname":"Comparator","codesamplehtml":"%REM&lt;br /&gt;The following code is Comparator.compareAscDesc.&lt;br /&gt;%END REM&lt;br /&gt;Public Function compareAscDesc(source as Variant, target as Variant, collReversed as Boolean) as Integer&lt;br /&gt;    compareAscDesc = compare(source, target)&lt;br /&gt;    If (m_isDescending Xor collreversed) Then Return 0 - compareAscDesc Else Return compareAscDesc&lt;br /&gt;End Function", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Element being inserted","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptCollectionsComparatorcompare","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Element being inserted&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Element being inserted","inlinecomment":" \t &apos; Element being inserted"},{"label":"target","comment":"Element at current position","valuetype":"Variant","filenamebase":"target_ValuedElement","fqnprefix":"VoltScriptCollectionsComparatorcompare","qn":"target","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Element at current position&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Element at current position","inlinecomment":" \t &apos; Element at current position"}]},{"label":"compareAscDesc","comment":"Compares source and target, returning -1 if source is before target, 0 if they are the same, 1 if source is after target.\nThe value is reversed (so -1 changed to 1, 1 changed to -1) if:\n- Comparator is descending, but Collection is not reversed\n- Comparator is ascending, but Collection is reversed","valuetype":"Integer","filenamebase":"compareAscDesc_Method","fqnprefix":"VoltScriptCollections.Comparator","qn":"compareAscDesc","codesample":"%REM\nThe following code is abbreviated code from Collection.getIndex. It compares each element against the value being checked, and if it matches, returns the current index.\n%END REM\nPublic Function getIndex(checkValue as Variant) as Variant\n    ForAll elem in Me.p_content)\n        If (Me.Comparator.compareAscDesc(checkValue, elem, Me.p_isCollReversed) = 0) Then Return ListTag(elem)\n    End ForAll\nEnd Function","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As Variant, target As Variant, collReversed As Boolean)","signature":"Public Function compareAscDesc(source As Variant, target As Variant, collReversed As Boolean) As Integer","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Compares source and target, returning -1 if source is before target, 0 if they are the same, 1 if source is after target.&lt;br /&gt;The value is reversed (so -1 changed to 1, 1 changed to -1) if:&lt;br /&gt;- Comparator is descending, but Collection is not reversed&lt;br /&gt;- Comparator is ascending, but Collection is reversed&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Compares source and target, returning -1 if source is before target, 0 if they are the same, 1 if source is after target.&lt;br /&gt;The value is reversed (so -1 changed to 1, 1 changed to -1) if:&lt;br /&gt;- Comparator is descending, but Collection is not reversed&lt;br /&gt;- Comparator is ascending, but Collection is reversed","inlinecomment":" \t &apos; Compares source and target, returning -1 if source is before target, 0 if they are the same, 1 if source is after target.\nThe value is reversed (so -1 changed to 1, 1 changed to -1) if:\n- Comparator is descending, but Collection is not reversed\n- Comparator is ascending, but Collection is reversed","parentclassname":"Comparator","codesamplehtml":"%REM&lt;br /&gt;The following code is abbreviated code from Collection.getIndex. It compares each element against the value being checked, and if it matches, returns the current index.&lt;br /&gt;%END REM&lt;br /&gt;Public Function getIndex(checkValue as Variant) as Variant&lt;br /&gt;    ForAll elem in Me.p_content)&lt;br /&gt;        If (Me.Comparator.compareAscDesc(checkValue, elem, Me.p_isCollReversed) = 0) Then Return ListTag(elem)&lt;br /&gt;    End ForAll&lt;br /&gt;End Function", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Element being inserted","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptCollectionsComparatorcompareAscDesc","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Element being inserted&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Element being inserted","inlinecomment":" \t &apos; Element being inserted"},{"label":"target","comment":"Element at current position","valuetype":"Variant","filenamebase":"target_ValuedElement","fqnprefix":"VoltScriptCollectionsComparatorcompareAscDesc","qn":"target","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Element at current position&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Element at current position","inlinecomment":" \t &apos; Element at current position"},{"label":"collReversed","comment":"Whether the parent Collection is reversed","valuetype":"Boolean","filenamebase":"collReversed_ValuedElement","fqnprefix":"VoltScriptCollectionsComparatorcompareAscDesc","qn":"collReversed","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether the parent Collection is reversed&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether the parent Collection is reversed","inlinecomment":" \t &apos; Whether the parent Collection is reversed"}]},{"label":"equals","comment":"Function to determine if two values are determined to be identical.\nUsed by remove, replace, and contains functions","valuetype":"Boolean","filenamebase":"equals_Method","fqnprefix":"VoltScriptCollections.Comparator","qn":"equals","codesample":"%REM\nThe following code is Collection.getIndex().\n%END REM\nForAll elem in p_content\n    If (Me.comparator.equals(checkValue, elem)) Then Return ListTag(elem)\nEnd ForAll","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As Variant, target As Variant)","signature":"Public Function equals(source As Variant, target As Variant) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Function to determine if two values are determined to be identical.&lt;br /&gt;Used by remove, replace, and contains functions&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Function to determine if two values are determined to be identical.&lt;br /&gt;Used by remove, replace, and contains functions","inlinecomment":" \t &apos; Function to determine if two values are determined to be identical.\nUsed by remove, replace, and contains functions","parentclassname":"Comparator","codesamplehtml":"%REM&lt;br /&gt;The following code is Collection.getIndex().&lt;br /&gt;%END REM&lt;br /&gt;ForAll elem in p_content&lt;br /&gt;    If (Me.comparator.equals(checkValue, elem)) Then Return ListTag(elem)&lt;br /&gt;End ForAll", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Element being inserted","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptCollectionsComparatorequals","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Element being inserted&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Element being inserted","inlinecomment":" \t &apos; Element being inserted"},{"label":"target","comment":"Element at current position","valuetype":"Variant","filenamebase":"target_ValuedElement","fqnprefix":"VoltScriptCollectionsComparatorequals","qn":"target","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Element at current position&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Element at current position","inlinecomment":" \t &apos; Element at current position"}]},{"label":"isDescending","comment":"","valuetype":"Boolean","filenamebase":"isDescending_Method","fqnprefix":"VoltScriptCollections.Comparator","qn":"Get.isDescending","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isDescending As Boolean","modifiers":"Public Get","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"Comparator","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptCollections.Comparator","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(isDescending As Boolean)","signature":"Public Sub New(isDescending As Boolean)","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"Comparator","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"isDescending","comment":"Whether sorting should be in descending order","valuetype":"Boolean","filenamebase":"isDescending_ValuedElement","fqnprefix":"VoltScriptCollectionsComparatorNew","qn":"isDescending","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether sorting should be in descending order&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether sorting should be in descending order","inlinecomment":" \t &apos; Whether sorting should be in descending order"}]}]},{"classname":"Map","comment":"Map class","valuetype":"","filenamebase":"Map_ObjectClass","fqnprefix":"VoltScriptCollections","qn":"Map","codesample":"%REM\nThe following code filters out values that are odd numbers\n%END REM\nClass EvenFilter as MapFilter\n    Function filter(kvPair as Pair) as Boolean\n        Dim value as Integer\n        value = kvPair.value\n        Return value Mod 2 = 0\n    End Function\nEnd Class\nDim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim ef as New EvenFilter\nDim map2 as Map\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nSet map2 = map.filter(ef)\nPrint map2.elementCount","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"FD17E29641C6117580258994003AF3B0","version":3,"classid":"A475383223E512AF802589940051489B","signature":"Public Class Map","modifiers":"Public","classname":"Map","parentclassname":"None","constructorsignature":"Public Sub New(contentType As String, keyComparator As Comparator, isSorted As Boolean)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Map class&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Map class","inlinecomment":" \t &apos; Map class","codesamplehtml":"%REM&lt;br /&gt;The following code filters out values that are odd numbers&lt;br /&gt;%END REM&lt;br /&gt;Class EvenFilter as MapFilter&lt;br /&gt;    Function filter(kvPair as Pair) as Boolean&lt;br /&gt;        Dim value as Integer&lt;br /&gt;        value = kvPair.value&lt;br /&gt;        Return value Mod 2 = 0&lt;br /&gt;    End Function&lt;br /&gt;End Class&lt;br /&gt;Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim ef as New EvenFilter&lt;br /&gt;Dim map2 as Map&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Set map2 = map.filter(ef)&lt;br /&gt;Print map2.elementCount", "methods":[{"label":"clone","comment":"Creates a clone of the Map.","valuetype":"Map","filenamebase":"clone_Method","fqnprefix":"VoltScriptCollections.Map","qn":"clone","codesample":"Dim map1 as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)\nDim map2 as Map\nCall map1.put(&amp;quot;Hello&amp;quot;,&amp;quot;World&amp;quot;)\nSet map2 = map1.clone()","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function clone() As Map","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a clone of the Map.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a clone of the Map.","inlinecomment":" \t &apos; Creates a clone of the Map.","parentclassname":"Map","codesamplehtml":"Dim map1 as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)&lt;br /&gt;Dim map2 as Map&lt;br /&gt;Call map1.put(&amp;quot;Hello&amp;quot;,&amp;quot;World&amp;quot;)&lt;br /&gt;Set map2 = map1.clone()", "signatureelements":["Public","Function"]},{"label":"collectKeys","comment":"Returns a clone of the keys in this Map.","valuetype":"Collection","filenamebase":"collectKeys_Method","fqnprefix":"VoltScriptCollections.Map","qn":"collectKeys","codesample":"%REM\nThe following code creates a Map of US state abbreviations and full names. If a list of only abbreviations is needed for another purpose, collectKeys() can be used to quickly get it.\n%END REM\nDim map as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)\nDim coll as Collection\nCall map.add(&amp;quot;CO&amp;quot;,&amp;quot;Colorado&amp;quot;)\nCall map.add(&amp;quot;CA&amp;quot;,&amp;quot;California&amp;quot;)\nSet coll = map.collectKeys()","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function collectKeys() As Collection","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns a clone of the keys in this Map.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns a clone of the keys in this Map.","inlinecomment":" \t &apos; Returns a clone of the keys in this Map.","parentclassname":"Map","codesamplehtml":"%REM&lt;br /&gt;The following code creates a Map of US state abbreviations and full names. If a list of only abbreviations is needed for another purpose, collectKeys() can be used to quickly get it.&lt;br /&gt;%END REM&lt;br /&gt;Dim map as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)&lt;br /&gt;Dim coll as Collection&lt;br /&gt;Call map.add(&amp;quot;CO&amp;quot;,&amp;quot;Colorado&amp;quot;)&lt;br /&gt;Call map.add(&amp;quot;CA&amp;quot;,&amp;quot;California&amp;quot;)&lt;br /&gt;Set coll = map.collectKeys()", "signatureelements":["Public","Function"]},{"label":"collectValues","comment":"Loads the values from this Map into the passed Collection.","valuetype":"Collection","filenamebase":"collectValues_Method","fqnprefix":"VoltScriptCollections.Map","qn":"collectValues","codesample":"%REM\nThe following code creates a Map of US state abbreviations and full names. If a list of just state names sorted alphabetically is needed for another purpose, collectValues() can be used to get it.\n%END REM\nDim map as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)\nDim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, True)\nCall map.add(&amp;quot;CO&amp;quot;,&amp;quot;Colorado&amp;quot;)\nCall map.add(&amp;quot;CA&amp;quot;,&amp;quot;California&amp;quot;)\nCall map.collectValues(coll)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(targetColl As Collection)","signature":"Public Function collectValues(targetColl As Collection) As Collection","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Loads the values from this Map into the passed Collection.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Loads the values from this Map into the passed Collection.","inlinecomment":" \t &apos; Loads the values from this Map into the passed Collection.","parentclassname":"Map","codesamplehtml":"%REM&lt;br /&gt;The following code creates a Map of US state abbreviations and full names. If a list of just state names sorted alphabetically is needed for another purpose, collectValues() can be used to get it.&lt;br /&gt;%END REM&lt;br /&gt;Dim map as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)&lt;br /&gt;Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, True)&lt;br /&gt;Call map.add(&amp;quot;CO&amp;quot;,&amp;quot;Colorado&amp;quot;)&lt;br /&gt;Call map.add(&amp;quot;CA&amp;quot;,&amp;quot;California&amp;quot;)&lt;br /&gt;Call map.collectValues(coll)", "signatureelements":["Public","Function"], "arguments":[{"label":"targetColl","comment":"Collection into which to add the values from this Map","valuetype":"Collection","filenamebase":"targetColl_ValuedElement","fqnprefix":"VoltScriptCollectionsMapcollectValues","qn":"targetColl","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Collection into which to add the values from this Map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Collection into which to add the values from this Map","inlinecomment":" \t &apos; Collection into which to add the values from this Map"}]},{"label":"contains","comment":"Checks whether the Map contains a specific value.","valuetype":"Boolean","filenamebase":"contains_Method","fqnprefix":"VoltScriptCollections.Map","qn":"contains","codesample":"Dim map as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)\nDim compar as MatchingDataTypeComparator\nCall map.add(&amp;quot;CO&amp;quot;,&amp;quot;Colorado&amp;quot;)\nCall map.add(&amp;quot;CA&amp;quot;,&amp;quot;California&amp;quot;)\nPrint map.contains(&amp;quot;California&amp;quot;)          &amp;apos; Prints True\nPrint map.contains(&amp;quot;CALIFORNIA&amp;quot;)   &amp;apos; Prints False","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(checkValue As Variant, valueComparator As Comparator)","signature":"Public Function contains(checkValue As Variant, valueComparator As Comparator) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks whether the Map contains a specific value.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks whether the Map contains a specific value.","inlinecomment":" \t &apos; Checks whether the Map contains a specific value.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)&lt;br /&gt;Dim compar as MatchingDataTypeComparator&lt;br /&gt;Call map.add(&amp;quot;CO&amp;quot;,&amp;quot;Colorado&amp;quot;)&lt;br /&gt;Call map.add(&amp;quot;CA&amp;quot;,&amp;quot;California&amp;quot;)&lt;br /&gt;Print map.contains(&amp;quot;California&amp;quot;)          &amp;apos; Prints True&lt;br /&gt;Print map.contains(&amp;quot;CALIFORNIA&amp;quot;)   &amp;apos; Prints False", "signatureelements":["Public","Function"], "arguments":[{"label":"checkValue","comment":"Value to check for","valuetype":"Variant","filenamebase":"checkValue_ValuedElement","fqnprefix":"VoltScriptCollectionsMapcontains","qn":"checkValue","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value to check for&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value to check for","inlinecomment":" \t &apos; Value to check for"},{"label":"valueComparator","comment":"Comparator to use to check vale","valuetype":"Comparator","filenamebase":"valueComparator_ValuedElement","fqnprefix":"VoltScriptCollectionsMapcontains","qn":"valueComparator","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Comparator to use to check vale&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Comparator to use to check vale","inlinecomment":" \t &apos; Comparator to use to check vale"}]},{"label":"containsKey","comment":"Checks whether the Map contains a specific key.","valuetype":"Boolean","filenamebase":"containsKey_Method","fqnprefix":"VoltScriptCollections.Map","qn":"containsKey","codesample":"%REM\nThe following code creates a Map of US state abbreviations and full names. If a list of only abbreviations is needed for another purpose, collectKeys() can be used to quickly get it.\n%END REM\nDim map as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)\nCall map.add(&amp;quot;CO&amp;quot;,&amp;quot;Colorado&amp;quot;)\nCall map.add(&amp;quot;CA&amp;quot;,&amp;quot;California&amp;quot;)\nPrint map.contains(&amp;quot;CO&amp;quot;)      &amp;apos; Prints True\nPrint map.contains(&amp;quot;WA&amp;quot;)      &amp;apos; Prints False","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(keyVal As Variant)","signature":"Public Function containsKey(keyVal As Variant) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks whether the Map contains a specific key.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks whether the Map contains a specific key.","inlinecomment":" \t &apos; Checks whether the Map contains a specific key.","parentclassname":"Map","codesamplehtml":"%REM&lt;br /&gt;The following code creates a Map of US state abbreviations and full names. If a list of only abbreviations is needed for another purpose, collectKeys() can be used to quickly get it.&lt;br /&gt;%END REM&lt;br /&gt;Dim map as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)&lt;br /&gt;Call map.add(&amp;quot;CO&amp;quot;,&amp;quot;Colorado&amp;quot;)&lt;br /&gt;Call map.add(&amp;quot;CA&amp;quot;,&amp;quot;California&amp;quot;)&lt;br /&gt;Print map.contains(&amp;quot;CO&amp;quot;)      &amp;apos; Prints True&lt;br /&gt;Print map.contains(&amp;quot;WA&amp;quot;)      &amp;apos; Prints False", "signatureelements":["Public","Function"], "arguments":[{"label":"keyVal","comment":"Value to check for","valuetype":"Variant","filenamebase":"keyVal_ValuedElement","fqnprefix":"VoltScriptCollectionsMapcontainsKey","qn":"keyVal","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value to check for&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value to check for","inlinecomment":" \t &apos; Value to check for"}]},{"label":"filter","comment":"Filters a Map using a mapFilter and returns a new &amp;quot;filtered&amp;quot; Map.","valuetype":"Map","filenamebase":"filter_Method","fqnprefix":"VoltScriptCollections.Map","qn":"filter","codesample":"%REM\nThe following code filters out values that are odd numbers\n%END REM\nClass EvenFilter as MapFilter\n    Function filter(kvPair as Pair) as Boolean\n        Dim value as Integer\n        value = kvPair.value\n        Return value Mod 2 = 0\n    End Function\nEnd Class\nDim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim ef as New EvenFilter\nDim map2 as Map\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nSet map2 = map.filter(ef)\nPrint map2.elementCount","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(filterObj As MapFilter)","signature":"Public Function filter(filterObj As MapFilter) As Map","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Filters a Map using a mapFilter and returns a new &amp;quot;filtered&amp;quot; Map.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Filters a Map using a mapFilter and returns a new &amp;quot;filtered&amp;quot; Map.","inlinecomment":" \t &apos; Filters a Map using a mapFilter and returns a new &amp;quot;filtered&amp;quot; Map.","parentclassname":"Map","codesamplehtml":"%REM&lt;br /&gt;The following code filters out values that are odd numbers&lt;br /&gt;%END REM&lt;br /&gt;Class EvenFilter as MapFilter&lt;br /&gt;    Function filter(kvPair as Pair) as Boolean&lt;br /&gt;        Dim value as Integer&lt;br /&gt;        value = kvPair.value&lt;br /&gt;        Return value Mod 2 = 0&lt;br /&gt;    End Function&lt;br /&gt;End Class&lt;br /&gt;Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim ef as New EvenFilter&lt;br /&gt;Dim map2 as Map&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Set map2 = map.filter(ef)&lt;br /&gt;Print map2.elementCount", "signatureelements":["Public","Function"], "arguments":[{"label":"filterObj","comment":"Map filter to check each key and value with","valuetype":"MapFilter","filenamebase":"filterObj_ValuedElement","fqnprefix":"VoltScriptCollectionsMapfilter","qn":"filterObj","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Map filter to check each key and value with&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Map filter to check each key and value with","inlinecomment":" \t &apos; Map filter to check each key and value with"}]},{"label":"getAndRemoveFirstPair","comment":"Gets and removes the first key/value Pair.","valuetype":"Pair","filenamebase":"getAndRemoveFirstPair_Method","fqnprefix":"VoltScriptCollections.Map","qn":"getAndRemoveFirstPair","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim pair as Pair\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nSet pair = map.getAndRemoveFirstPair()\nPrint pair.value   &amp;apos; Prints 1","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function getAndRemoveFirstPair() As Pair","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets and removes the first key/value Pair.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets and removes the first key/value Pair.","inlinecomment":" \t &apos; Gets and removes the first key/value Pair.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim pair as Pair&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Set pair = map.getAndRemoveFirstPair()&lt;br /&gt;Print pair.value   &amp;apos; Prints 1", "signatureelements":["Public","Function"]},{"label":"getAndRemoveLastPair","comment":"Gets and removes the last key/value Pair","valuetype":"Pair","filenamebase":"getAndRemoveLastPair_Method","fqnprefix":"VoltScriptCollections.Map","qn":"getAndRemoveLastPair","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim pair as Pair\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nSet pair = map.getAndRemoveLastPair()\nPrint pair.value   &amp;apos; Prints 4","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function getAndRemoveLastPair() As Pair","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets and removes the last key/value Pair&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets and removes the last key/value Pair","inlinecomment":" \t &apos; Gets and removes the last key/value Pair","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim pair as Pair&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Set pair = map.getAndRemoveLastPair()&lt;br /&gt;Print pair.value   &amp;apos; Prints 4", "signatureelements":["Public","Function"]},{"label":"getNthKeyRaw","comment":"Returns the key at a particular index","valuetype":"Variant","filenamebase":"getNthKeyRaw_Method","fqnprefix":"VoltScriptCollections.Map","qn":"getNthKeyRaw","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nPrint CStr(map.getNthKey(2))    &amp;apos; Prints &amp;quot;Elem3&amp;quot;","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(index As Long)","signature":"Public Function getNthKeyRaw(index As Long) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns the key at a particular index&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns the key at a particular index","inlinecomment":" \t &apos; Returns the key at a particular index","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Print CStr(map.getNthKey(2))    &amp;apos; Prints &amp;quot;Elem3&amp;quot;", "signatureelements":["Public","Function"], "arguments":[{"label":"index","comment":"Index of key to get, starting at 0","valuetype":"Long","filenamebase":"index_ValuedElement","fqnprefix":"VoltScriptCollectionsMapgetNthKeyRaw","qn":"index","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Index of key to get, starting at 0&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Index of key to get, starting at 0","inlinecomment":" \t &apos; Index of key to get, starting at 0"}]},{"label":"getNthPair","comment":"Returns the element at the relevant index as a key/value Pair","valuetype":"Pair","filenamebase":"getNthPair_Method","fqnprefix":"VoltScriptCollections.Map","qn":"getNthPair","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim pair as Pair\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nSet pair = map.getNthPair(2)\nPrint &amp;quot;Third pair is &amp;quot; &amp;amp; pair.key &amp;amp; &amp;quot;, &amp;quot; &amp;amp; pair.value","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(index As Long)","signature":"Public Function getNthPair(index As Long) As Pair","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns the element at the relevant index as a key/value Pair&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns the element at the relevant index as a key/value Pair","inlinecomment":" \t &apos; Returns the element at the relevant index as a key/value Pair","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim pair as Pair&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Set pair = map.getNthPair(2)&lt;br /&gt;Print &amp;quot;Third pair is &amp;quot; &amp;amp; pair.key &amp;amp; &amp;quot;, &amp;quot; &amp;amp; pair.value", "signatureelements":["Public","Function"], "arguments":[{"label":"index","comment":"Index at which to find the element","valuetype":"Long","filenamebase":"index_ValuedElement","fqnprefix":"VoltScriptCollectionsMapgetNthPair","qn":"index","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Index at which to find the element&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Index at which to find the element","inlinecomment":" \t &apos; Index at which to find the element"}]},{"label":"getNthValueRaw","comment":"Gets the value at a particular index. If no matching value is found, the return type will depend on the content defined. If the Map contains objects, the return value is Nothing. If the Map contains scalars, the return value is an empty variant.","valuetype":"Variant","filenamebase":"getNthValueRaw_Method","fqnprefix":"VoltScriptCollections.Map","qn":"getNthValueRaw","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim returnVal as Integer\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nreturnVal = CInt(map.getNthElementRaw(2))\nPrint &amp;quot;Value is &amp;quot; &amp;amp; returnVal","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(index As Long)","signature":"Public Function getNthValueRaw(index As Long) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the value at a particular index. If no matching value is found, the return type will depend on the content defined. If the Map contains objects, the return value is Nothing. If the Map contains scalars, the return value is an empty variant.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the value at a particular index. If no matching value is found, the return type will depend on the content defined. If the Map contains objects, the return value is Nothing. If the Map contains scalars, the return value is an empty variant.","inlinecomment":" \t &apos; Gets the value at a particular index. If no matching value is found, the return type will depend on the content defined. If the Map contains objects, the return value is Nothing. If the Map contains scalars, the return value is an empty variant.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim returnVal as Integer&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;returnVal = CInt(map.getNthElementRaw(2))&lt;br /&gt;Print &amp;quot;Value is &amp;quot; &amp;amp; returnVal", "signatureelements":["Public","Function"], "arguments":[{"label":"index","comment":"Index of the value to get, starting at 0","valuetype":"Long","filenamebase":"index_ValuedElement","fqnprefix":"VoltScriptCollectionsMapgetNthValueRaw","qn":"index","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Index of the value to get, starting at 0&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Index of the value to get, starting at 0","inlinecomment":" \t &apos; Index of the value to get, starting at 0"}]},{"label":"getValueRawByKey","comment":"Gets a value from the Map for the passed key. If the Map contains objects, the return type is Nothing.\nIf the Map contains scalars, the return type is an empty variant.","valuetype":"Variant","filenamebase":"getValueRawByKey_Method","fqnprefix":"VoltScriptCollections.Map","qn":"getValueRawByKey","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim returnVal as Variant\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nreturnVal = map.getValueRawByKey(&amp;quot;Elem3&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(keyVal As Variant)","signature":"Public Function getValueRawByKey(keyVal As Variant) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets a value from the Map for the passed key. If the Map contains objects, the return type is Nothing.&lt;br /&gt;If the Map contains scalars, the return type is an empty variant.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets a value from the Map for the passed key. If the Map contains objects, the return type is Nothing.&lt;br /&gt;If the Map contains scalars, the return type is an empty variant.","inlinecomment":" \t &apos; Gets a value from the Map for the passed key. If the Map contains objects, the return type is Nothing.\nIf the Map contains scalars, the return type is an empty variant.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim returnVal as Variant&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;returnVal = map.getValueRawByKey(&amp;quot;Elem3&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"keyVal","comment":"Key of value to get","valuetype":"Variant","filenamebase":"keyVal_ValuedElement","fqnprefix":"VoltScriptCollectionsMapgetValueRawByKey","qn":"keyVal","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Key of value to get&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Key of value to get","inlinecomment":" \t &apos; Key of value to get"}]},{"label":"put","comment":"Puta an element in the Map.","valuetype":"Long","filenamebase":"put_Method","fqnprefix":"VoltScriptCollections.Map","qn":"put","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(key As Variant, value As Variant)","signature":"Public Function put(key As Variant, value As Variant) As Long","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Puta an element in the Map.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Puta an element in the Map.","inlinecomment":" \t &apos; Puta an element in the Map.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)", "signatureelements":["Public","Function"], "arguments":[{"label":"key","comment":"Scalar value to use as the key","valuetype":"Variant","filenamebase":"key_ValuedElement","fqnprefix":"VoltScriptCollectionsMapput","qn":"key","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Scalar value to use as the key&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Scalar value to use as the key","inlinecomment":" \t &apos; Scalar value to use as the key"},{"label":"value","comment":"Value to put into the Map","valuetype":"Variant","filenamebase":"value_ValuedElement","fqnprefix":"VoltScriptCollectionsMapput","qn":"value","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value to put into the Map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value to put into the Map","inlinecomment":" \t &apos; Value to put into the Map"}]},{"label":"putAll","comment":"Puts all entries from a Map into this map","valuetype":"Map","filenamebase":"putAll_Method","fqnprefix":"VoltScriptCollections.Map","qn":"putAll","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim map2 as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map2.putAll(map)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Map)","signature":"Public Function putAll(source As Map) As Map","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Puts all entries from a Map into this map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Puts all entries from a Map into this map","inlinecomment":" \t &apos; Puts all entries from a Map into this map","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim map2 as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map2.putAll(map)", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Map to copy into this Map","valuetype":"Map","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptCollectionsMapputAll","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Map to copy into this Map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Map to copy into this Map","inlinecomment":" \t &apos; Map to copy into this Map"}]},{"label":"putPair","comment":"Puts a Pair into the Map, using key as the key and value as the Value.","valuetype":"Long","filenamebase":"putPair_Method","fqnprefix":"VoltScriptCollections.Map","qn":"putPair","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim pair as New Pair(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.putPair(pair)","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(content As Pair)","signature":"Public Function putPair(content As Pair) As Long","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Puts a Pair into the Map, using key as the key and value as the Value.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Puts a Pair into the Map, using key as the key and value as the Value.","inlinecomment":" \t &apos; Puts a Pair into the Map, using key as the key and value as the Value.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim pair as New Pair(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.putPair(pair)", "signatureelements":["Public","Function"], "arguments":[{"label":"content","comment":"Pair to insert","valuetype":"Pair","filenamebase":"content_ValuedElement","fqnprefix":"VoltScriptCollectionsMapputPair","qn":"content","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Pair to insert&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Pair to insert","inlinecomment":" \t &apos; Pair to insert"}]},{"label":"removeByKey","comment":"Removes an element from the Map based on its key.","valuetype":"Boolean","filenamebase":"removeByKey_Method","fqnprefix":"VoltScriptCollections.Map","qn":"removeByKey","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nSet map2 = map.removeByKey(&amp;quot;Elem1&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(keyVal As Variant)","signature":"Public Function removeByKey(keyVal As Variant) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Removes an element from the Map based on its key.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Removes an element from the Map based on its key.","inlinecomment":" \t &apos; Removes an element from the Map based on its key.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Set map2 = map.removeByKey(&amp;quot;Elem1&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"keyVal","comment":"Key of element to remove","valuetype":"Variant","filenamebase":"keyVal_ValuedElement","fqnprefix":"VoltScriptCollectionsMapremoveByKey","qn":"keyVal","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Key of element to remove&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Key of element to remove","inlinecomment":" \t &apos; Key of element to remove"}]},{"label":"removeByValue","comment":"Removes a value or values from the Map","valuetype":"Boolean","filenamebase":"removeByValue_Method","fqnprefix":"VoltScriptCollections.Map","qn":"removeByValue","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim comparator as MatchingDataTypeComparator\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 2)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nCall map.put(&amp;quot;Elem3&amp;quot;, 2)\nCall map.removeByValue(2, False, comparator)\nPrint map.elementCount       &amp;apos; Prints 4\nCall map.removeByValue(2, True, comparator)\nPrint map.elementCount       &amp;apos; Prints 2","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(value As Variant, allMatches As Boolean, valueComparator As Comparator)","signature":"Public Function removeByValue(value As Variant, allMatches As Boolean, valueComparator As Comparator) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Removes a value or values from the Map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Removes a value or values from the Map","inlinecomment":" \t &apos; Removes a value or values from the Map","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim comparator as MatchingDataTypeComparator&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 2)&lt;br /&gt;Call map.removeByValue(2, False, comparator)&lt;br /&gt;Print map.elementCount       &amp;apos; Prints 4&lt;br /&gt;Call map.removeByValue(2, True, comparator)&lt;br /&gt;Print map.elementCount       &amp;apos; Prints 2", "signatureelements":["Public","Function"], "arguments":[{"label":"value","comment":"Value to remove","valuetype":"Variant","filenamebase":"value_ValuedElement","fqnprefix":"VoltScriptCollectionsMapremoveByValue","qn":"value","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value to remove&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value to remove","inlinecomment":" \t &apos; Value to remove"},{"label":"allMatches","comment":"Whether to remove all matches or just the first match","valuetype":"Boolean","filenamebase":"allMatches_ValuedElement","fqnprefix":"VoltScriptCollectionsMapremoveByValue","qn":"allMatches","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether to remove all matches or just the first match&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether to remove all matches or just the first match","inlinecomment":" \t &apos; Whether to remove all matches or just the first match"},{"label":"valueComparator","comment":"Comparator to use to check value","valuetype":"Comparator","filenamebase":"valueComparator_ValuedElement","fqnprefix":"VoltScriptCollectionsMapremoveByValue","qn":"valueComparator","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Comparator to use to check value&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Comparator to use to check value","inlinecomment":" \t &apos; Comparator to use to check value"}]},{"label":"toJson","comment":"Converts the Map to a JsonObject. If the values are objects, the code will try to call a toJson method on the object, otherwise skip them.","valuetype":"JsonObject","filenamebase":"toJson_Method","fqnprefix":"VoltScriptCollections.Map","qn":"toJson","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim jsonObj as jsonObject\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nSet jsonObj = map.toJson()\nPrint jsonObj.toString(false)       &amp;apos; Prints {&amp;quot;Elem1&amp;quot;:1,&amp;quot;Elem2&amp;quot;:2,&amp;quot;Elem3&amp;quot;:3,&amp;quot;Elem4&amp;quot;:4}","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function toJson() As JsonObject","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Converts the Map to a JsonObject. If the values are objects, the code will try to call a toJson method on the object, otherwise skip them.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Converts the Map to a JsonObject. If the values are objects, the code will try to call a toJson method on the object, otherwise skip them.","inlinecomment":" \t &apos; Converts the Map to a JsonObject. If the values are objects, the code will try to call a toJson method on the object, otherwise skip them.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim jsonObj as jsonObject&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Set jsonObj = map.toJson()&lt;br /&gt;Print jsonObj.toString(false)       &amp;apos; Prints {&amp;quot;Elem1&amp;quot;:1,&amp;quot;Elem2&amp;quot;:2,&amp;quot;Elem3&amp;quot;:3,&amp;quot;Elem4&amp;quot;:4}", "signatureelements":["Public","Function"]},{"label":"comparator","comment":"Comparator to compare keys with.","valuetype":"Comparator","filenamebase":"comparator_Method","fqnprefix":"VoltScriptCollections.Map","qn":"Get.comparator","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get comparator As Comparator","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Comparator to compare keys with.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Comparator to compare keys with.","inlinecomment":" \t &apos; Comparator to compare keys with.","parentclassname":"Map","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"contentType","comment":"Content-Type of values within the map","valuetype":"String","filenamebase":"contentType_Method","fqnprefix":"VoltScriptCollections.Map","qn":"Get.contentType","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get contentType As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Content-Type of values within the map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Content-Type of values within the map","inlinecomment":" \t &apos; Content-Type of values within the map","parentclassname":"Map","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"elementCount","comment":"Number of elements in the map","valuetype":"Long","filenamebase":"elementCount_Method","fqnprefix":"VoltScriptCollections.Map","qn":"Get.elementCount","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get elementCount As Long","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Number of elements in the map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Number of elements in the map","inlinecomment":" \t &apos; Number of elements in the map","parentclassname":"Map","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"hasContent","comment":"Flag indicating if the Map has elements","valuetype":"Boolean","filenamebase":"hasContent_Method","fqnprefix":"VoltScriptCollections.Map","qn":"Get.hasContent","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get hasContent As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the Map has elements&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the Map has elements","inlinecomment":" \t &apos; Flag indicating if the Map has elements","parentclassname":"Map","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"isLocked","comment":"Flag indicating if the Map is locked","valuetype":"Boolean","filenamebase":"isLocked_Method","fqnprefix":"VoltScriptCollections.Map","qn":"Get.isLocked","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isLocked As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the Map is locked&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the Map is locked","inlinecomment":" \t &apos; Flag indicating if the Map is locked","parentclassname":"Map","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"isSorted","comment":"Flag indicating if the Map&amp;apos;s keys are sorted","valuetype":"Boolean","filenamebase":"isSorted_Method","fqnprefix":"VoltScriptCollections.Map","qn":"Get.isSorted","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isSorted As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the Map&amp;apos;s keys are sorted&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the Map&amp;apos;s keys are sorted","inlinecomment":" \t &apos; Flag indicating if the Map&amp;apos;s keys are sorted","parentclassname":"Map","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"suppressErrors","comment":"Suppress errors on adding or inserting elements. Errors wll still be thrown if the Map is locked\nor attempting to putting an element at an index into a sorted Map.\nInstead of throwing an error, e.g. for wrong content type, the method will just return false","valuetype":"Boolean","filenamebase":"suppressErrors_Method","fqnprefix":"VoltScriptCollections.Map","qn":"Get.suppressErrors","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get suppressErrors As Boolean","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Suppress errors on adding or inserting elements. Errors wll still be thrown if the Map is locked&lt;br /&gt;or attempting to putting an element at an index into a sorted Map.&lt;br /&gt;Instead of throwing an error, e.g. for wrong content type, the method will just return false&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Suppress errors on adding or inserting elements. Errors wll still be thrown if the Map is locked&lt;br /&gt;or attempting to putting an element at an index into a sorted Map.&lt;br /&gt;Instead of throwing an error, e.g. for wrong content type, the method will just return false","inlinecomment":" \t &apos; Suppress errors on adding or inserting elements. Errors wll still be thrown if the Map is locked\nor attempting to putting an element at an index into a sorted Map.\nInstead of throwing an error, e.g. for wrong content type, the method will just return false","parentclassname":"Map","codesamplehtml":"", "signatureelements":["Public","Property","Get"]},{"label":"suppressErrors","comment":"Suppress errors on adding or inserting elements. Errors wll still be thrown if the Map is locked\nor attempting to putting an element at an index into a sorted Map.\nInstead of throwing an error, e.g. for wrong content type, the method will just return false","valuetype":"Boolean","filenamebase":"suppressErrors_Method","fqnprefix":"VoltScriptCollections.Map","qn":"Set.suppressErrors","codesample":"","signaturecode":2308,"instancecode":256,"argumentsuffix":"","signature":"Public Property Set suppressErrors As Boolean","modifiers":"Public Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Suppress errors on adding or inserting elements. Errors wll still be thrown if the Map is locked&lt;br /&gt;or attempting to putting an element at an index into a sorted Map.&lt;br /&gt;Instead of throwing an error, e.g. for wrong content type, the method will just return false&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Suppress errors on adding or inserting elements. Errors wll still be thrown if the Map is locked&lt;br /&gt;or attempting to putting an element at an index into a sorted Map.&lt;br /&gt;Instead of throwing an error, e.g. for wrong content type, the method will just return false","inlinecomment":" \t &apos; Suppress errors on adding or inserting elements. Errors wll still be thrown if the Map is locked\nor attempting to putting an element at an index into a sorted Map.\nInstead of throwing an error, e.g. for wrong content type, the method will just return false","parentclassname":"Map","codesamplehtml":"", "signatureelements":["Public","Property","Set"]},{"label":"clear","comment":"Removes all keys and values from the Map and resets whether the keyset is reversed.","valuetype":"","filenamebase":"clear_Method","fqnprefix":"VoltScriptCollections.Map","qn":"clear","codesample":"Dim map as New Map(&amp;quot;STRING&amp;quot;,Nothing,False)\nCall map.put(&amp;quot;Hello&amp;quot;,&amp;quot;World&amp;quot;)\nPrint map.hasContent    &amp;apos; Prints True\nCall map.clear()\nPrint map.hasContent    &amp;apos; Prints False","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub clear()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Removes all keys and values from the Map and resets whether the keyset is reversed.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Removes all keys and values from the Map and resets whether the keyset is reversed.","inlinecomment":" \t &apos; Removes all keys and values from the Map and resets whether the keyset is reversed.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;STRING&amp;quot;,Nothing,False)&lt;br /&gt;Call map.put(&amp;quot;Hello&amp;quot;,&amp;quot;World&amp;quot;)&lt;br /&gt;Print map.hasContent    &amp;apos; Prints True&lt;br /&gt;Call map.clear()&lt;br /&gt;Print map.hasContent    &amp;apos; Prints False", "signatureelements":["Public","Sub"]},{"label":"fromJson","comment":"Loads a JsonObject that contains an object of scalars into the Map","valuetype":"","filenamebase":"fromJson_Method","fqnprefix":"VoltScriptCollections.Map","qn":"fromJson","codesample":"Dim map as New Map(&amp;quot;SCALAR&amp;quot;, Nothing, False)\nDim parser as New JsonParser()\nCall parser.loadFromJson(|{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42}|)\nCall map.fromJson(parser.getRootObject())","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(jsonObj As JsonObject)","signature":"Public Sub fromJson(jsonObj As JsonObject)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Loads a JsonObject that contains an object of scalars into the Map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Loads a JsonObject that contains an object of scalars into the Map","inlinecomment":" \t &apos; Loads a JsonObject that contains an object of scalars into the Map","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;SCALAR&amp;quot;, Nothing, False)&lt;br /&gt;Dim parser as New JsonParser()&lt;br /&gt;Call parser.loadFromJson(|{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42}|)&lt;br /&gt;Call map.fromJson(parser.getRootObject())", "signatureelements":["Public","Sub"], "arguments":[{"label":"jsonObj","comment":"JsonObject to put in the map","valuetype":"JsonObject","filenamebase":"jsonObj_ValuedElement","fqnprefix":"VoltScriptCollectionsMapfromJson","qn":"jsonObj","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JsonObject to put in the map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JsonObject to put in the map","inlinecomment":" \t &apos; JsonObject to put in the map"}]},{"label":"lock","comment":"Locks the map, so any put, remove, replace or reverse fiunctions trigger errors. Useful when passing a Map to other functions.","valuetype":"","filenamebase":"lock_Method","fqnprefix":"VoltScriptCollections.Map","qn":"lock","codesample":"%REM\nThe following code throws error 403, &amp;quot;Map is locked&amp;quot; on the final line\n%END REM\nDim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.lock()\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub lock()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Locks the map, so any put, remove, replace or reverse fiunctions trigger errors. Useful when passing a Map to other functions.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Locks the map, so any put, remove, replace or reverse fiunctions trigger errors. Useful when passing a Map to other functions.","inlinecomment":" \t &apos; Locks the map, so any put, remove, replace or reverse fiunctions trigger errors. Useful when passing a Map to other functions.","parentclassname":"Map","codesamplehtml":"%REM&lt;br /&gt;The following code throws error 403, &amp;quot;Map is locked&amp;quot; on the final line&lt;br /&gt;%END REM&lt;br /&gt;Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.lock()&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)", "signatureelements":["Public","Sub"]},{"label":"New","comment":"Constructor","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptCollections.Map","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(contentType As String, keyComparator As Comparator, isSorted As Boolean)","signature":"Public Sub New(contentType As String, keyComparator As Comparator, isSorted As Boolean)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor","inlinecomment":" \t &apos; Constructor","parentclassname":"Map","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"contentType","comment":"Defines the Content Type of the values in the Map","valuetype":"String","filenamebase":"contentType_ValuedElement","fqnprefix":"VoltScriptCollectionsMapNew","qn":"contentType","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Defines the Content Type of the values in the Map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Defines the Content Type of the values in the Map","inlinecomment":" \t &apos; Defines the Content Type of the values in the Map"},{"label":"keyComparator","comment":"Comparator to determine order of keys","valuetype":"Comparator","filenamebase":"keyComparator_ValuedElement","fqnprefix":"VoltScriptCollectionsMapNew","qn":"keyComparator","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Comparator to determine order of keys&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Comparator to determine order of keys","inlinecomment":" \t &apos; Comparator to determine order of keys"},{"label":"isSorted","comment":"Flag indicating if the keys within the Map shall be sorted","valuetype":"Boolean","filenamebase":"isSorted_ValuedElement","fqnprefix":"VoltScriptCollectionsMapNew","qn":"isSorted","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the keys within the Map shall be sorted&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the keys within the Map shall be sorted","inlinecomment":" \t &apos; Flag indicating if the keys within the Map shall be sorted"}]},{"label":"reverse","comment":"Reverses the keySet colection of a Map.","valuetype":"","filenamebase":"reverse_Method","fqnprefix":"VoltScriptCollections.Map","qn":"reverse","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nCall map.reverse()\nPrint map.getNthKeyRaw(0)     &amp;apos; Prints &amp;quot;Elem4&amp;quot;","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub reverse()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Reverses the keySet colection of a Map.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Reverses the keySet colection of a Map.","inlinecomment":" \t &apos; Reverses the keySet colection of a Map.","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Call map.reverse()&lt;br /&gt;Print map.getNthKeyRaw(0)     &amp;apos; Prints &amp;quot;Elem4&amp;quot;", "signatureelements":["Public","Sub"]},{"label":"transform","comment":"Transforms members of this Map usig a MapTransformer and adds them to the new Map passed.","valuetype":"","filenamebase":"transform_Method","fqnprefix":"VoltScriptCollections.Map","qn":"transform","codesample":"%REM\nThe following code swaps key and value over\n%END REM\nClass SwapTransformer as MapTransformer\n    Function transform(kvPair as Pair) as Pair\n        Return new pair(kvPair.value, kvPair.key)\n    End Function\nEnd Class\nDim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim map2 as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)\nDim transformer as New SwapTransformer()\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nCall map.transform(transformer, map2)\nPrint CStr(map2.getNthKeyRaw(0))      &amp;apos; Prints 1","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(transformer As MapTransformer, newMap As Map)","signature":"Public Sub transform(transformer As MapTransformer, newMap As Map)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Transforms members of this Map usig a MapTransformer and adds them to the new Map passed.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Transforms members of this Map usig a MapTransformer and adds them to the new Map passed.","inlinecomment":" \t &apos; Transforms members of this Map usig a MapTransformer and adds them to the new Map passed.","parentclassname":"Map","codesamplehtml":"%REM&lt;br /&gt;The following code swaps key and value over&lt;br /&gt;%END REM&lt;br /&gt;Class SwapTransformer as MapTransformer&lt;br /&gt;    Function transform(kvPair as Pair) as Pair&lt;br /&gt;        Return new pair(kvPair.value, kvPair.key)&lt;br /&gt;    End Function&lt;br /&gt;End Class&lt;br /&gt;Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim map2 as New Map(&amp;quot;STRING&amp;quot;, Nothing, False)&lt;br /&gt;Dim transformer as New SwapTransformer()&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Call map.transform(transformer, map2)&lt;br /&gt;Print CStr(map2.getNthKeyRaw(0))      &amp;apos; Prints 1", "signatureelements":["Public","Sub"], "arguments":[{"label":"transformer","comment":"MapTrasformer to transform members","valuetype":"MapTransformer","filenamebase":"transformer_ValuedElement","fqnprefix":"VoltScriptCollectionsMaptransform","qn":"transformer","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;MapTrasformer to transform members&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"MapTrasformer to transform members","inlinecomment":" \t &apos; MapTrasformer to transform members"},{"label":"newMap","comment":"Map to load transformed members into","valuetype":"Map","filenamebase":"newMap_ValuedElement","fqnprefix":"VoltScriptCollectionsMaptransform","qn":"newMap","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Map to load transformed members into&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Map to load transformed members into","inlinecomment":" \t &apos; Map to load transformed members into"}]},{"label":"unlock","comment":"Unlocks the Map, so put, remove, replace and reverse functions can be used again","valuetype":"","filenamebase":"unlock_Method","fqnprefix":"VoltScriptCollections.Map","qn":"unlock","codesample":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.lock()\nTry\n    Call map.put(&amp;quot;Elem4&amp;quot;, 4)\nCatch\n    If Err = 403 Then Print &amp;quot;Map was locked&amp;quot;\nEnd Try\nCall map.unlock()\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)    &amp;apos; Successful","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub unlock()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Unlocks the Map, so put, remove, replace and reverse functions can be used again&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Unlocks the Map, so put, remove, replace and reverse functions can be used again","inlinecomment":" \t &apos; Unlocks the Map, so put, remove, replace and reverse functions can be used again","parentclassname":"Map","codesamplehtml":"Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.lock()&lt;br /&gt;Try&lt;br /&gt;    Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Catch&lt;br /&gt;    If Err = 403 Then Print &amp;quot;Map was locked&amp;quot;&lt;br /&gt;End Try&lt;br /&gt;Call map.unlock()&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)    &amp;apos; Successful", "signatureelements":["Public","Sub"]}]},{"classname":"MapFilter","comment":"Class for filtering elements when filtering a Map","valuetype":"","filenamebase":"MapFilter_ObjectClass","fqnprefix":"VoltScriptCollections","qn":"MapFilter","codesample":"%REM\nThe following code filters out values that are odd numbers\n%END REM\nClass EvenFilter as MapFilter\n    Function filter(kvPair as Pair) as Boolean\n        Dim value as Integer\n        value = kvPair.value\n        Return value Mod 2 = 0\n    End Function\nEnd Class\nDim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim ef as New EvenFilter\nDim map2 as Map\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nSet map2 = map.filter(ef)\nPrint map2.elementCount","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"FD17E29641C6117580258994003AF3B0","version":3,"classid":"881D17BDD6F1A9D58025899600497486","signature":"Public Class MapFilter","modifiers":"Public","classname":"MapFilter","parentclassname":"None","constructorsignature":"Public Sub New()","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class for filtering elements when filtering a Map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class for filtering elements when filtering a Map","inlinecomment":" \t &apos; Class for filtering elements when filtering a Map","codesamplehtml":"%REM&lt;br /&gt;The following code filters out values that are odd numbers&lt;br /&gt;%END REM&lt;br /&gt;Class EvenFilter as MapFilter&lt;br /&gt;    Function filter(kvPair as Pair) as Boolean&lt;br /&gt;        Dim value as Integer&lt;br /&gt;        value = kvPair.value&lt;br /&gt;        Return value Mod 2 = 0&lt;br /&gt;    End Function&lt;br /&gt;End Class&lt;br /&gt;Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim ef as New EvenFilter&lt;br /&gt;Dim map2 as Map&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Set map2 = map.filter(ef)&lt;br /&gt;Print map2.elementCount", "methods":[{"label":"filter","comment":"Function to filter a Map&amp;apos;s keys or values","valuetype":"Boolean","filenamebase":"filter_Method","fqnprefix":"VoltScriptCollections.MapFilter","qn":"filter","codesample":"%REM\nThe following code filters out values that are odd numbers\n%END REM\nClass EvenFilter as MapFilter\n    Function filter(kvPair as Pair) as Boolean\n        Dim value as Integer\n        value = kvPair.value\n        Return value Mod 2 = 0\n    End Function\nEnd Class\nDim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)\nDim ef as New EvenFilter\nDim map2 as Map\nCall map.put(&amp;quot;Elem1&amp;quot;, 1)\nCall map.put(&amp;quot;Elem2&amp;quot;, 2)\nCall map.put(&amp;quot;Elem3&amp;quot;, 3)\nCall map.put(&amp;quot;Elem4&amp;quot;, 4)\nSet map2 = map.filter(ef)\nPrint map2.elementCount","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(kvPair As Pair)","signature":"Public Function filter(kvPair As Pair) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Function to filter a Map&amp;apos;s keys or values&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Function to filter a Map&amp;apos;s keys or values","inlinecomment":" \t &apos; Function to filter a Map&amp;apos;s keys or values","parentclassname":"MapFilter","codesamplehtml":"%REM&lt;br /&gt;The following code filters out values that are odd numbers&lt;br /&gt;%END REM&lt;br /&gt;Class EvenFilter as MapFilter&lt;br /&gt;    Function filter(kvPair as Pair) as Boolean&lt;br /&gt;        Dim value as Integer&lt;br /&gt;        value = kvPair.value&lt;br /&gt;        Return value Mod 2 = 0&lt;br /&gt;    End Function&lt;br /&gt;End Class&lt;br /&gt;Dim map as New Map(&amp;quot;INTEGER&amp;quot;, Nothing, False)&lt;br /&gt;Dim ef as New EvenFilter&lt;br /&gt;Dim map2 as Map&lt;br /&gt;Call map.put(&amp;quot;Elem1&amp;quot;, 1)&lt;br /&gt;Call map.put(&amp;quot;Elem2&amp;quot;, 2)&lt;br /&gt;Call map.put(&amp;quot;Elem3&amp;quot;, 3)&lt;br /&gt;Call map.put(&amp;quot;Elem4&amp;quot;, 4)&lt;br /&gt;Set map2 = map.filter(ef)&lt;br /&gt;Print map2.elementCount", "signatureelements":["Public","Function"], "arguments":[{"label":"kvPair","comment":"Pair containg the key and value for the current element in the Map","valuetype":"Pair","filenamebase":"kvPair_ValuedElement","fqnprefix":"VoltScriptCollectionsMapFilterfilter","qn":"kvPair","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Pair containg the key and value for the current element in the Map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Pair containg the key and value for the current element in the Map","inlinecomment":" \t &apos; Pair containg the key and value for the current element in the Map"}]},{"label":"New","comment":"Constructor","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptCollections.MapFilter","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor","inlinecomment":" \t &apos; Constructor","parentclassname":"MapFilter","codesamplehtml":"", "signatureelements":["Public","Sub"]}]},{"classname":"MapTransformer","comment":"Class for transforming elements in a Map to something else","valuetype":"","filenamebase":"MapTransformer_ObjectClass","fqnprefix":"VoltScriptCollections","qn":"MapTransformer","codesample":"%REM\nThe following code filters out values that are odd numbers\n%END REM\nClass AgeIncrementer as MapTransformer\n    Function transform(kvPair as Pair) as Boolean\n        Dim person as Person\n        Set person = kvPair.value\n        person.age++\n        Return new Pair(kvPair, person)\n    End Function\nEnd Class\nDim map1 as New Map(&amp;quot;PERSON&amp;quot;, Nothing, False)\nDim map2 as Map(&amp;quot;PERSON&amp;quot;, Nothing, False)\nDim incrementer as New AgeIncrementer()\n&amp;apos;Populate map1\nCall map1.transform(incrementer, map2)","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"FD17E29641C6117580258994003AF3B0","version":3,"classid":"41BAE62232732E4D8025899F003A6B3A","signature":"Public Class MapTransformer","modifiers":"Public","classname":"MapTransformer","parentclassname":"None","constructorsignature":"Public Sub New()","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class for transforming elements in a Map to something else&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class for transforming elements in a Map to something else","inlinecomment":" \t &apos; Class for transforming elements in a Map to something else","codesamplehtml":"%REM&lt;br /&gt;The following code filters out values that are odd numbers&lt;br /&gt;%END REM&lt;br /&gt;Class AgeIncrementer as MapTransformer&lt;br /&gt;    Function transform(kvPair as Pair) as Boolean&lt;br /&gt;        Dim person as Person&lt;br /&gt;        Set person = kvPair.value&lt;br /&gt;        person.age++&lt;br /&gt;        Return new Pair(kvPair, person)&lt;br /&gt;    End Function&lt;br /&gt;End Class&lt;br /&gt;Dim map1 as New Map(&amp;quot;PERSON&amp;quot;, Nothing, False)&lt;br /&gt;Dim map2 as Map(&amp;quot;PERSON&amp;quot;, Nothing, False)&lt;br /&gt;Dim incrementer as New AgeIncrementer()&lt;br /&gt;&amp;apos;Populate map1&lt;br /&gt;Call map1.transform(incrementer, map2)", "methods":[{"label":"transform","comment":"Function to transform a member of a value. If there is no return value, the element is skipped and nothing gets added to the new Map for this element.\nThus this function can perform a filter and a transform simultaneously.","valuetype":"Pair","filenamebase":"transform_Method","fqnprefix":"VoltScriptCollections.MapTransformer","qn":"transform","codesample":"%REM\nThe following code filters out values that are odd numbers\n%END REM\nClass AgeIncrementer as MapTransformer\n    Function transform(kvPair as Pair) as Boolean\n        Dim person as Person\n        Set person = kvPair.value\n        person.age++\n        Return new Pair(kvPair, person)\n    End Function\nEnd Class\nDim map1 as New Map(&amp;quot;PERSON&amp;quot;, Nothing, False)\nDim map2 as Map(&amp;quot;PERSON&amp;quot;, Nothing, False)\nDim incrementer as New AgeIncrementer()\n&amp;apos;Populate map1\nCall map1.transform(incrementer, map2)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(kvPair As Pair)","signature":"Public Function transform(kvPair As Pair) As Pair","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Function to transform a member of a value. If there is no return value, the element is skipped and nothing gets added to the new Map for this element.&lt;br /&gt;Thus this function can perform a filter and a transform simultaneously.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Function to transform a member of a value. If there is no return value, the element is skipped and nothing gets added to the new Map for this element.&lt;br /&gt;Thus this function can perform a filter and a transform simultaneously.","inlinecomment":" \t &apos; Function to transform a member of a value. If there is no return value, the element is skipped and nothing gets added to the new Map for this element.\nThus this function can perform a filter and a transform simultaneously.","parentclassname":"MapTransformer","codesamplehtml":"%REM&lt;br /&gt;The following code filters out values that are odd numbers&lt;br /&gt;%END REM&lt;br /&gt;Class AgeIncrementer as MapTransformer&lt;br /&gt;    Function transform(kvPair as Pair) as Boolean&lt;br /&gt;        Dim person as Person&lt;br /&gt;        Set person = kvPair.value&lt;br /&gt;        person.age++&lt;br /&gt;        Return new Pair(kvPair, person)&lt;br /&gt;    End Function&lt;br /&gt;End Class&lt;br /&gt;Dim map1 as New Map(&amp;quot;PERSON&amp;quot;, Nothing, False)&lt;br /&gt;Dim map2 as Map(&amp;quot;PERSON&amp;quot;, Nothing, False)&lt;br /&gt;Dim incrementer as New AgeIncrementer()&lt;br /&gt;&amp;apos;Populate map1&lt;br /&gt;Call map1.transform(incrementer, map2)", "signatureelements":["Public","Function"], "arguments":[{"label":"kvPair","comment":"Pair containing key and value for the current element in the Map","valuetype":"Pair","filenamebase":"kvPair_ValuedElement","fqnprefix":"VoltScriptCollectionsMapTransformertransform","qn":"kvPair","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Pair containing key and value for the current element in the Map&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Pair containing key and value for the current element in the Map","inlinecomment":" \t &apos; Pair containing key and value for the current element in the Map"}]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptCollections.MapTransformer","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"MapTransformer","codesamplehtml":"", "signatureelements":["Public","Sub"]}]},{"classname":"MatchingDataTypeComparator","comment":"Class for comparing, ignoring data type check","valuetype":"Comparator","filenamebase":"MatchingDataTypeComparator_ObjectClass","fqnprefix":"VoltScriptCollections","qn":"MatchingDataTypeComparator","codesample":"Dim compar as New MatchingDataTypeComparator(False)\nDim coll as New Collection(&amp;quot;SCALAR&amp;quot;, compar, False, True)\nCall coll.add(2)\nCall coll.add(&amp;quot;1&amp;quot;)\nPrint coll.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints 1,2","signaturecode":3072,"instancecode":1024,"parentclassname":"Comparator","classtype":"Derived","classderivetype":"Comparator","projectid":"FD17E29641C6117580258994003AF3B0","version":3,"classid":"14BB30E4C3A6C87E802589960047D345","signature":"Public Class MatchingDataTypeComparator As Comparator","modifiers":"Public","classname":"MatchingDataTypeComparator","constructorsignature":"Public Sub New(isDescending As Boolean)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class for comparing, ignoring data type check&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class for comparing, ignoring data type check","inlinecomment":" \t &apos; Class for comparing, ignoring data type check","codesamplehtml":"Dim compar as New MatchingDataTypeComparator(False)&lt;br /&gt;Dim coll as New Collection(&amp;quot;SCALAR&amp;quot;, compar, False, True)&lt;br /&gt;Call coll.add(2)&lt;br /&gt;Call coll.add(&amp;quot;1&amp;quot;)&lt;br /&gt;Print coll.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints 1,2", "methods":[{"label":"compare","comment":"Overrides compare method in base class. Compare function, assuming both source and target are the same data type.","valuetype":"Integer","filenamebase":"compare_Method","fqnprefix":"VoltScriptCollections.MatchingDataTypeComparator","qn":"compare","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant, target As Variant)","signature":"Public Function compare(source As Variant, target As Variant) As Integer","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Overrides compare method in base class. Compare function, assuming both source and target are the same data type.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Overrides compare method in base class. Compare function, assuming both source and target are the same data type.","inlinecomment":" \t &apos; Overrides compare method in base class. Compare function, assuming both source and target are the same data type.","parentclassname":"MatchingDataTypeComparator","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Element being inserted","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptCollectionsMatchingDataTypeComparatorcompare","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Element being inserted&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Element being inserted","inlinecomment":" \t &apos; Element being inserted"},{"label":"target","comment":"Element at current position","valuetype":"Variant","filenamebase":"target_ValuedElement","fqnprefix":"VoltScriptCollectionsMatchingDataTypeComparatorcompare","qn":"target","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Element at current position&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Element at current position","inlinecomment":" \t &apos; Element at current position"}]},{"label":"equals","comment":"Fnction to determine if twi values are determined to be identical.\nUsed by remove, replace, and contains functions","valuetype":"Boolean","filenamebase":"equals_Method","fqnprefix":"VoltScriptCollections.MatchingDataTypeComparator","qn":"equals","codesample":"%REM\nThe following code is Collection.getIndex().\n%END REM\nForAll elem in p_content\n    If (Me.comparator.equals(checkValue, elem)) Then Return ListTag(elem)\nEnd ForAll","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As Variant, target As Variant)","signature":"Public Function equals(source As Variant, target As Variant) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Fnction to determine if twi values are determined to be identical.&lt;br /&gt;Used by remove, replace, and contains functions&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Fnction to determine if twi values are determined to be identical.&lt;br /&gt;Used by remove, replace, and contains functions","inlinecomment":" \t &apos; Fnction to determine if twi values are determined to be identical.\nUsed by remove, replace, and contains functions","parentclassname":"MatchingDataTypeComparator","codesamplehtml":"%REM&lt;br /&gt;The following code is Collection.getIndex().&lt;br /&gt;%END REM&lt;br /&gt;ForAll elem in p_content&lt;br /&gt;    If (Me.comparator.equals(checkValue, elem)) Then Return ListTag(elem)&lt;br /&gt;End ForAll", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Element being inserted","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptCollectionsMatchingDataTypeComparatorequals","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Element being inserted&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Element being inserted","inlinecomment":" \t &apos; Element being inserted"},{"label":"target","comment":"Element at current position","valuetype":"Variant","filenamebase":"target_ValuedElement","fqnprefix":"VoltScriptCollectionsMatchingDataTypeComparatorequals","qn":"target","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Element at current position&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Element at current position","inlinecomment":" \t &apos; Element at current position"}]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptCollections.MatchingDataTypeComparator","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(isDescending As Boolean)","signature":"Public Sub New(isDescending As Boolean)","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"MatchingDataTypeComparator","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"isDescending","comment":"Whether sorting should be in descending order","valuetype":"Boolean","filenamebase":"isDescending_ValuedElement","fqnprefix":"VoltScriptCollectionsMatchingDataTypeComparatorNew","qn":"isDescending","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether sorting should be in descending order&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether sorting should be in descending order","inlinecomment":" \t &apos; Whether sorting should be in descending order"}]}]},{"classname":"Pair","comment":"Base class for ky/value pair","valuetype":"","filenamebase":"Pair_ObjectClass","fqnprefix":"VoltScriptCollections","qn":"Pair","codesample":"Dim pair as New Pair(&amp;quot;myKey&amp;quot;,&amp;quot;My String Value&amp;quot;)","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"FD17E29641C6117580258994003AF3B0","version":3,"classid":"D8F7D4C77400F78480258994003B0DC2","signature":"Public Class Pair","modifiers":"Public","classname":"Pair","parentclassname":"None","constructorsignature":"Public Sub New(key As Variant, value As Variant)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base class for ky/value pair&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base class for ky/value pair","inlinecomment":" \t &apos; Base class for ky/value pair","codesamplehtml":"Dim pair as New Pair(&amp;quot;myKey&amp;quot;,&amp;quot;My String Value&amp;quot;)", "methods":[{"label":"key","comment":"Key for the pair","valuetype":"Variant","filenamebase":"key_Method","fqnprefix":"VoltScriptCollections.Pair","qn":"Get.key","codesample":"Dim pair as New Pair(&amp;quot;myKey&amp;quot;,&amp;quot;My String Value&amp;quot;)\nPrint pair.key","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get key As Variant","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Key for the pair&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Key for the pair","inlinecomment":" \t &apos; Key for the pair","parentclassname":"Pair","codesamplehtml":"Dim pair as New Pair(&amp;quot;myKey&amp;quot;,&amp;quot;My String Value&amp;quot;)&lt;br /&gt;Print pair.key", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"value","comment":"","valuetype":"Variant","filenamebase":"value_Method","fqnprefix":"VoltScriptCollections.Pair","qn":"Get.value","codesample":"Dim pair as New Pair(&amp;quot;myKey&amp;quot;,&amp;quot;My String Value&amp;quot;)\nPrint pair.value","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get value As Variant","modifiers":"Public Get","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"Pair","codesamplehtml":"Dim pair as New Pair(&amp;quot;myKey&amp;quot;,&amp;quot;My String Value&amp;quot;)&lt;br /&gt;Print pair.value", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptCollections.Pair","qn":"New","codesample":"Dim pair as New Pair(&amp;quot;myKey&amp;quot;,&amp;quot;My String Value&amp;quot;)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(key As Variant, value As Variant)","signature":"Public Sub New(key As Variant, value As Variant)","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"Pair","codesamplehtml":"Dim pair as New Pair(&amp;quot;myKey&amp;quot;,&amp;quot;My String Value&amp;quot;)", "signatureelements":["Public","Sub"], "arguments":[{"label":"key","comment":"Key for the pair. Required at initialization, cannot be changed afterwards.","valuetype":"Variant","filenamebase":"key_ValuedElement","fqnprefix":"VoltScriptCollectionsPairNew","qn":"key","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Key for the pair. Required at initialization, cannot be changed afterwards.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Key for the pair. Required at initialization, cannot be changed afterwards.","inlinecomment":" \t &apos; Key for the pair. Required at initialization, cannot be changed afterwards."},{"label":"value","comment":"Value for the pair. Required at initialization, cannot be changed afterwards.","valuetype":"Variant","filenamebase":"value_ValuedElement","fqnprefix":"VoltScriptCollectionsPairNew","qn":"value","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value for the pair. Required at initialization, cannot be changed afterwards.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value for the pair. Required at initialization, cannot be changed afterwards.","inlinecomment":" \t &apos; Value for the pair. Required at initialization, cannot be changed afterwards."}]}]},{"classname":"StringCollection","comment":"Collection that can only contain strings or scalars, which will be converted to strings","valuetype":"Collection","filenamebase":"StringCollection_ObjectClass","fqnprefix":"VoltScriptCollections","qn":"StringCollection","codesample":"Dim coll as New StringCollection(Nothing False, False)\nCall coll.add(&amp;quot;Hello&amp;quot;)\nCall coll.add(&amp;quot;World&amp;quot;)\nCall coll.add(1)         &amp;apos; Will be added as &amp;quot;1&amp;quot;\nCall coll.add(True)   &amp;apos; Will be added as &amp;quot;True&amp;quot;","signaturecode":3072,"instancecode":1024,"parentclassname":"Collection","classtype":"Derived","classderivetype":"Collection","projectid":"FD17E29641C6117580258994003AF3B0","version":3,"classid":"84DF615B3829E8888025899F003B6575","signature":"Public Class StringCollection As Collection","modifiers":"Public","classname":"StringCollection","constructorsignature":"Public Sub New(comparator As Comparator, mustBeUnique As Boolean, isSorted As Boolean)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Collection that can only contain strings or scalars, which will be converted to strings&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Collection that can only contain strings or scalars, which will be converted to strings","inlinecomment":" \t &apos; Collection that can only contain strings or scalars, which will be converted to strings","codesamplehtml":"Dim coll as New StringCollection(Nothing False, False)&lt;br /&gt;Call coll.add(&amp;quot;Hello&amp;quot;)&lt;br /&gt;Call coll.add(&amp;quot;World&amp;quot;)&lt;br /&gt;Call coll.add(1)         &amp;apos; Will be added as &amp;quot;1&amp;quot;&lt;br /&gt;Call coll.add(True)   &amp;apos; Will be added as &amp;quot;True&amp;quot;", "methods":[{"label":"add","comment":"Overrides parent method, forcing to string if possible","valuetype":"Long","filenamebase":"add_Method","fqnprefix":"VoltScriptCollections.StringCollection","qn":"add","codesample":"Dim coll as New StringCollection(Nothing False, False)\nCall coll.add(&amp;quot;Hello&amp;quot;)\nCall coll.add(&amp;quot;World&amp;quot;)\nCall coll.add(1)         &amp;apos; Will be added as &amp;quot;1&amp;quot;\nCall coll.add(True)   &amp;apos; Will be added as &amp;quot;True&amp;quot;","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As Variant)","signature":"Public Function add(source As Variant) As Long","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Overrides parent method, forcing to string if possible&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Overrides parent method, forcing to string if possible","inlinecomment":" \t &apos; Overrides parent method, forcing to string if possible","parentclassname":"StringCollection","codesamplehtml":"Dim coll as New StringCollection(Nothing False, False)&lt;br /&gt;Call coll.add(&amp;quot;Hello&amp;quot;)&lt;br /&gt;Call coll.add(&amp;quot;World&amp;quot;)&lt;br /&gt;Call coll.add(1)         &amp;apos; Will be added as &amp;quot;1&amp;quot;&lt;br /&gt;Call coll.add(True)   &amp;apos; Will be added as &amp;quot;True&amp;quot;", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"A stringable scalar value","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptCollectionsStringCollectionadd","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;A stringable scalar value&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"A stringable scalar value","inlinecomment":" \t &apos; A stringable scalar value"}]},{"label":"getNthElement","comment":"Wrapper for CStr(Collection.getNthElementRaw(index)).","valuetype":"String","filenamebase":"getNthElement_Method","fqnprefix":"VoltScriptCollections.StringCollection","qn":"getNthElement","codesample":"Dim coll as New StringCollection(Nothing False, False)\nDim retVal as String\nCall coll.add(1)\nretVal = coll.getNthElement(0)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(index As Long)","signature":"Public Function getNthElement(index As Long) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Wrapper for CStr(Collection.getNthElementRaw(index)).&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Wrapper for CStr(Collection.getNthElementRaw(index)).","inlinecomment":" \t &apos; Wrapper for CStr(Collection.getNthElementRaw(index)).","parentclassname":"StringCollection","codesamplehtml":"Dim coll as New StringCollection(Nothing False, False)&lt;br /&gt;Dim retVal as String&lt;br /&gt;Call coll.add(1)&lt;br /&gt;retVal = coll.getNthElement(0)", "signatureelements":["Public","Function"], "arguments":[{"label":"index","comment":"Index of the element to return","valuetype":"Long","filenamebase":"index_ValuedElement","fqnprefix":"VoltScriptCollectionsStringCollectiongetNthElement","qn":"index","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Index of the element to return&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Index of the element to return","inlinecomment":" \t &apos; Index of the element to return"}]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptCollections.StringCollection","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"parentconstructor":"Collection(&quot;STRING&quot;, comparator, mustBeUnique, isSorted)","argumentsuffix":"(comparator As Comparator, mustBeUnique As Boolean, isSorted As Boolean)","signature":"Public Sub New(comparator As Comparator, mustBeUnique As Boolean, isSorted As Boolean)","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"StringCollection","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"comparator","comment":"Comparator, defaulting (if Nothing) to MatchingDataTypeComparator","valuetype":"Comparator","filenamebase":"comparator_ValuedElement","fqnprefix":"VoltScriptCollectionsStringCollectionNew","qn":"comparator","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Comparator, defaulting (if Nothing) to MatchingDataTypeComparator&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Comparator, defaulting (if Nothing) to MatchingDataTypeComparator","inlinecomment":" \t &apos; Comparator, defaulting (if Nothing) to MatchingDataTypeComparator"},{"label":"mustBeUnique","comment":"Flag indicating if the elements within the Collection must be unique","valuetype":"Boolean","filenamebase":"mustBeUnique_ValuedElement","fqnprefix":"VoltScriptCollectionsStringCollectionNew","qn":"mustBeUnique","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the elements within the Collection must be unique&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the elements within the Collection must be unique","inlinecomment":" \t &apos; Flag indicating if the elements within the Collection must be unique"},{"label":"isSorted","comment":"Flag indicating if the content within the Collection should be sorted","valuetype":"Boolean","filenamebase":"isSorted_ValuedElement","fqnprefix":"VoltScriptCollectionsStringCollectionNew","qn":"isSorted","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating if the content within the Collection should be sorted&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating if the content within the Collection should be sorted","inlinecomment":" \t &apos; Flag indicating if the content within the Collection should be sorted"}]}]}]}
