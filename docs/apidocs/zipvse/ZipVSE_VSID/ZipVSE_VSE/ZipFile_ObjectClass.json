{"classname":"ZipFile","comment":"A file within a zip archive","valuetype":"","filenamebase":"ZipFile_ObjectClass","fqnprefix":"ZipVSE","qn":"ZipFile","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","classattribnewnotexposed":"UnexposedNew","projectid":"48258A08005C548085258916003F8EF3","version":3,"classid":"48258A08005C548085258916003FA0F2","lsxclassid":3,"signature":"Public Class ZipFile","modifiers":"Public","classname":"ZipFile","parentclassname":"None","constructorsignature":"Function New() As ZipFile","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;A file within a zip archive&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"A file within a zip archive","inlinecomment":" \t &apos; A file within a zip archive","codesamplehtml":"", "methods":[{"label":"ExtractFile","comment":"Extracts the file to a directory, with options to create the directory and overwrite the file.","valuetype":"Boolean","filenamebase":"ExtractFile_Method","fqnprefix":"ZipVSE.ZipFile","qn":"ExtractFile","codesample":"%REM\n    The following code Extracts top-level files only, putting them in the current directory\n%END REM\nDim zip as New ZipArchive()\nCall zip.openArchive(CurDir &amp;amp; &amp;quot;/zip1.zip&amp;quot;)\nForAll zipFile in zip\n   If Not zipFile.isDirectory Then zipFile.extractFile(CurDir, False, True)\nEnd ForAll","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DestinationDirectory As String, CreateDirectory As Boolean, OverwriteFile As Boolean)","signature":"Function ExtractFile(DestinationDirectory As String, CreateDirectory As Boolean, OverwriteFile As Boolean) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Extracts the file to a directory, with options to create the directory and overwrite the file.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Extracts the file to a directory, with options to create the directory and overwrite the file.","inlinecomment":" \t &apos; Extracts the file to a directory, with options to create the directory and overwrite the file.","parentclassname":"ZipFile","codesamplehtml":"%REM&lt;br /&gt;    The following code Extracts top-level files only, putting them in the current directory&lt;br /&gt;%END REM&lt;br /&gt;Dim zip as New ZipArchive()&lt;br /&gt;Call zip.openArchive(CurDir &amp;amp; &amp;quot;/zip1.zip&amp;quot;)&lt;br /&gt;ForAll zipFile in zip&lt;br /&gt;   If Not zipFile.isDirectory Then zipFile.extractFile(CurDir, False, True)&lt;br /&gt;End ForAll", "signatureelements":["Function"], "arguments":[{"label":"DestinationDirectory","comment":"Directory into which to extract the file","valuetype":"String","filenamebase":"DestinationDirectory_ValuedElement","fqnprefix":"ZipVSEZipFileExtractFile","qn":"DestinationDirectory","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Directory into which to extract the file&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Directory into which to extract the file","inlinecomment":" \t &apos; Directory into which to extract the file"},{"label":"CreateDirectory","comment":"Whether to create the destination directory","valuetype":"Boolean","filenamebase":"CreateDirectory_ValuedElement","fqnprefix":"ZipVSEZipFileExtractFile","qn":"CreateDirectory","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether to create the destination directory&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether to create the destination directory","inlinecomment":" \t &apos; Whether to create the destination directory", "attributes":["BY_VAL"]},{"label":"OverwriteFile","comment":"Whether to overwrite if the destination includes a file with the same name. If false, the file will not be extracted.","valuetype":"Boolean","filenamebase":"OverwriteFile_ValuedElement","fqnprefix":"ZipVSEZipFileExtractFile","qn":"OverwriteFile","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether to overwrite if the destination includes a file with the same name. If false, the file will not be extracted.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether to overwrite if the destination includes a file with the same name. If false, the file will not be extracted.","inlinecomment":" \t &apos; Whether to overwrite if the destination includes a file with the same name. If false, the file will not be extracted.", "attributes":["BY_VAL"]}]},{"label":"New","comment":"Constructor, not exposed","valuetype":"ZipFile","filenamebase":"New_Method","fqnprefix":"ZipVSE.ZipFile","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As ZipFile","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor, not exposed&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor, not exposed","inlinecomment":" \t &apos; Constructor, not exposed","parentclassname":"ZipFile","codesamplehtml":"", "signatureelements":["Function"]},{"label":"CompressedSize","comment":"Size of the file within the zip archive when compressed.","valuetype":"Long-Signed","filenamebase":"CompressedSize_Method","fqnprefix":"ZipVSE.ZipFile","qn":"Get.CompressedSize","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get CompressedSize As Long","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Size of the file within the zip archive when compressed.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Size of the file within the zip archive when compressed.","inlinecomment":" \t &apos; Size of the file within the zip archive when compressed.","parentclassname":"ZipFile","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"FileComment","comment":"Comment allocated to the zip file when it was added to the zip archive.","valuetype":"String","filenamebase":"FileComment_Method","fqnprefix":"ZipVSE.ZipFile","qn":"Get.FileComment","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get FileComment As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Comment allocated to the zip file when it was added to the zip archive.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Comment allocated to the zip file when it was added to the zip archive.","inlinecomment":" \t &apos; Comment allocated to the zip file when it was added to the zip archive.","parentclassname":"ZipFile","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"FileName","comment":"Name of the file.","valuetype":"String","filenamebase":"FileName_Method","fqnprefix":"ZipVSE.ZipFile","qn":"Get.FileName","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get FileName As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the file.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the file.","inlinecomment":" \t &apos; Name of the file.","parentclassname":"ZipFile","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"IsDirectory","comment":"Whether this &amp;quot;file&amp;quot; in the zip archive is a directory, which could contain files and / or directories.","valuetype":"Boolean","filenamebase":"IsDirectory_Method","fqnprefix":"ZipVSE.ZipFile","qn":"Get.IsDirectory","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get IsDirectory As Boolean","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether this &amp;quot;file&amp;quot; in the zip archive is a directory, which could contain files and / or directories.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether this &amp;quot;file&amp;quot; in the zip archive is a directory, which could contain files and / or directories.","inlinecomment":" \t &apos; Whether this &amp;quot;file&amp;quot; in the zip archive is a directory, which could contain files and / or directories.","parentclassname":"ZipFile","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"ParentArchive","comment":"The zip archive this file is in.","valuetype":"ZipArchive","filenamebase":"ParentArchive_Method","fqnprefix":"ZipVSE.ZipFile","qn":"Get.ParentArchive","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ParentArchive As ZipArchive","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;The zip archive this file is in.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"The zip archive this file is in.","inlinecomment":" \t &apos; The zip archive this file is in.","parentclassname":"ZipFile","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"UncompressedSize","comment":"Size of the file within the zip archive when uncompressed.","valuetype":"Long-Signed","filenamebase":"UncompressedSize_Method","fqnprefix":"ZipVSE.ZipFile","qn":"Get.UncompressedSize","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get UncompressedSize As Long","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Size of the file within the zip archive when uncompressed.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Size of the file within the zip archive when uncompressed.","inlinecomment":" \t &apos; Size of the file within the zip archive when uncompressed.","parentclassname":"ZipFile","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"FileComment","comment":"Comment allocated to the zip file when it was added to the zip archive.","valuetype":"String","filenamebase":"FileComment_Method","fqnprefix":"ZipVSE.ZipFile","qn":"Set.FileComment","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set FileComment As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Comment allocated to the zip file when it was added to the zip archive.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Comment allocated to the zip file when it was added to the zip archive.","inlinecomment":" \t &apos; Comment allocated to the zip file when it was added to the zip archive.","parentclassname":"ZipFile","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]}]}
