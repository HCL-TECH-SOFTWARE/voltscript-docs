{"classname":"XMLObject","comment":"Object for holding XML objects.","valuetype":"","filenamebase":"XMLObject_ObjectClass","fqnprefix":"XMLVSE","qn":"XMLObject","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"195DB5718DD416A048258AB5004BB576","version":3,"classid":"C075EF62BA42BC6548258AB5004CB455","lsxclassid":2,"signature":"Public Class XMLObject","modifiers":"Public","classname":"XMLObject","parentclassname":"None","constructorsignature":"Function New() As XMLObject","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Object for holding XML objects.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Object for holding XML objects.","inlinecomment":" \t &apos; Object for holding XML objects.","codesamplehtml":"", "methods":[{"label":"AddAttribute","comment":"Adds attribute into the current XMLObject using the provided label and value.","valuetype":"XMLObject","filenamebase":"AddAttribute_Method","fqnprefix":"XMLVSE.XMLObject","qn":"AddAttribute","codesample":"Dim Object as New XMLObject\nCall Object.AddRootTag(&amp;quot;Test&amp;quot;, &amp;quot;&amp;quot;)\nSet Object = Object.addAttribute(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;).addAttribute(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;)\nPrint Object.toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Label As String, Value As String)","signature":"Function AddAttribute(Label As String, Value As String) As XMLObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds attribute into the current XMLObject using the provided label and value.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds attribute into the current XMLObject using the provided label and value.","inlinecomment":" \t &apos; Adds attribute into the current XMLObject using the provided label and value.","parentclassname":"XMLObject","codesamplehtml":"Dim Object as New XMLObject&lt;br /&gt;Call Object.AddRootTag(&amp;quot;Test&amp;quot;, &amp;quot;&amp;quot;)&lt;br /&gt;Set Object = Object.addAttribute(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;).addAttribute(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;)&lt;br /&gt;Print Object.toString(True)", "signatureelements":["Function"], "arguments":[{"label":"Label","comment":"","valuetype":"String","filenamebase":"Label_ValuedElement","fqnprefix":"XMLVSEXMLObjectAddAttribute","qn":"Label","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""},{"label":"Value","comment":"","valuetype":"String","filenamebase":"Value_ValuedElement","fqnprefix":"XMLVSEXMLObjectAddAttribute","qn":"Value","argumentindex":2,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"AddChild","comment":"Creates a new child in the current XMLObject using the provided label and value.","valuetype":"XMLObject","filenamebase":"AddChild_Method","fqnprefix":"XMLVSE.XMLObject","qn":"AddChild","codesample":"Dim Object as New XMLObject\nCall Object.AddRootTag(&amp;quot;Test&amp;quot;, &amp;quot;&amp;quot;)\nSet Object = Object.addChild(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;).addChild(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;)\nPrint Object.toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Label, Value)","signature":"Function AddChild(Label, Value) As XMLObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a new child in the current XMLObject using the provided label and value.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a new child in the current XMLObject using the provided label and value.","inlinecomment":" \t &apos; Creates a new child in the current XMLObject using the provided label and value.","parentclassname":"XMLObject","codesamplehtml":"Dim Object as New XMLObject&lt;br /&gt;Call Object.AddRootTag(&amp;quot;Test&amp;quot;, &amp;quot;&amp;quot;)&lt;br /&gt;Set Object = Object.addChild(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;).addChild(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;)&lt;br /&gt;Print Object.toString(True)", "signatureelements":["Function"], "arguments":[{"label":"Label","comment":"","valuetype":"","filenamebase":"Label_ValuedElement","fqnprefix":"XMLVSEXMLObjectAddChild","qn":"Label","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""},{"label":"Value","comment":"","valuetype":"","filenamebase":"Value_ValuedElement","fqnprefix":"XMLVSEXMLObjectAddChild","qn":"Value","argumentindex":2,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"AddChildObject","comment":"Adds a child to the current XMLObject using the provided XMLObject.","valuetype":"XMLObject","filenamebase":"AddChildObject_Method","fqnprefix":"XMLVSE.XMLObject","qn":"AddChildObject","codesample":"Dim Object as New XMLObject\nCall Object.AddRootTag(&amp;quot;Test&amp;quot;, &amp;quot;&amp;quot;)\nDim child as New XMLObject\nCall child.AddRootTag(&amp;quot;Hello&amp;quot;, &amp;quot;World&amp;quot;)\nSet Object = Object.addChildObject(child)\nPrint Object.toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Object As XMLObject)","signature":"Function AddChildObject(Object As XMLObject) As XMLObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds a child to the current XMLObject using the provided XMLObject.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds a child to the current XMLObject using the provided XMLObject.","inlinecomment":" \t &apos; Adds a child to the current XMLObject using the provided XMLObject.","parentclassname":"XMLObject","codesamplehtml":"Dim Object as New XMLObject&lt;br /&gt;Call Object.AddRootTag(&amp;quot;Test&amp;quot;, &amp;quot;&amp;quot;)&lt;br /&gt;Dim child as New XMLObject&lt;br /&gt;Call child.AddRootTag(&amp;quot;Hello&amp;quot;, &amp;quot;World&amp;quot;)&lt;br /&gt;Set Object = Object.addChildObject(child)&lt;br /&gt;Print Object.toString(True)", "signatureelements":["Function"], "arguments":[{"label":"Object","comment":"","valuetype":"XMLObject","filenamebase":"Object_ValuedElement","fqnprefix":"XMLVSEXMLObjectAddChildObject","qn":"Object","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"AddRootTag","comment":"Inserts a root tag/element and value. Raises an error if this XMLObject already has a primary tag.","valuetype":"Boolean","filenamebase":"AddRootTag_Method","fqnprefix":"XMLVSE.XMLObject","qn":"AddRootTag","codesample":"Dim Object as New XMLObject\nCall Object.AddRootTag(&amp;quot;Hello&amp;quot;, &amp;quot;World&amp;quot;)\nPrint Object.toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(Label As String, Value As String)","signature":"Function AddRootTag(Label As String, Value As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Inserts a root tag/element and value. Raises an error if this XMLObject already has a primary tag.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Inserts a root tag/element and value. Raises an error if this XMLObject already has a primary tag.","inlinecomment":" \t &apos; Inserts a root tag/element and value. Raises an error if this XMLObject already has a primary tag.","parentclassname":"XMLObject","codesamplehtml":"Dim Object as New XMLObject&lt;br /&gt;Call Object.AddRootTag(&amp;quot;Hello&amp;quot;, &amp;quot;World&amp;quot;)&lt;br /&gt;Print Object.toString(True)", "signatureelements":["Function"], "arguments":[{"label":"Label","comment":"","valuetype":"String","filenamebase":"Label_ValuedElement","fqnprefix":"XMLVSEXMLObjectAddRootTag","qn":"Label","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""},{"label":"Value","comment":"","valuetype":"String","filenamebase":"Value_ValuedElement","fqnprefix":"XMLVSEXMLObjectAddRootTag","qn":"Value","argumentindex":2,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"FindObjectByPath","comment":"Finds an XMLObject within the current XMLObject using an array of labels to navigate down the hierarchy.","valuetype":"XMLObject","filenamebase":"FindObjectByPath_Method","fqnprefix":"XMLVSE.XMLObject","qn":"FindObjectByPath","codesample":"%REM\n    The following example loads a string of XML and finds the element &amp;lt;John&amp;gt;\n%END REM\nDim parser as New XMLParser\nDim object as XMLObject\nDim childObj as XMLObject\nDim path(2) as String\nCall parser.loadFromXML(&amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;&amp;lt;John&amp;gt;Doe&amp;lt;/John&amp;gt;&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;)\nSet object = parser.getRootXML()\npath(0) = &amp;quot;Profile&amp;quot;\npath(1) = &amp;quot;Employee&amp;quot;\npath(2) = &amp;quot;John&amp;quot;\nSet childObj = object.findObjectByPath(path)\nPrint childObj.toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Labels)","signature":"Function FindObjectByPath(Labels) As XMLObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Finds an XMLObject within the current XMLObject using an array of labels to navigate down the hierarchy.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Finds an XMLObject within the current XMLObject using an array of labels to navigate down the hierarchy.","inlinecomment":" \t &apos; Finds an XMLObject within the current XMLObject using an array of labels to navigate down the hierarchy.","parentclassname":"XMLObject","codesamplehtml":"%REM&lt;br /&gt;    The following example loads a string of XML and finds the element &amp;lt;John&amp;gt;&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New XMLParser&lt;br /&gt;Dim object as XMLObject&lt;br /&gt;Dim childObj as XMLObject&lt;br /&gt;Dim path(2) as String&lt;br /&gt;Call parser.loadFromXML(&amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;&amp;lt;John&amp;gt;Doe&amp;lt;/John&amp;gt;&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;)&lt;br /&gt;Set object = parser.getRootXML()&lt;br /&gt;path(0) = &amp;quot;Profile&amp;quot;&lt;br /&gt;path(1) = &amp;quot;Employee&amp;quot;&lt;br /&gt;path(2) = &amp;quot;John&amp;quot;&lt;br /&gt;Set childObj = object.findObjectByPath(path)&lt;br /&gt;Print childObj.toString(True)", "signatureelements":["Function"], "arguments":[{"label":"Labels","comment":"Array of labels to use to find the XMLObject","valuetype":"","filenamebase":"Labels_ValuedElement","fqnprefix":"XMLVSEXMLObjectFindObjectByPath","qn":"Labels","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array of labels to use to find the XMLObject&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array of labels to use to find the XMLObject","inlinecomment":" \t &apos; Array of labels to use to find the XMLObject", "attributes":["Array"]}]},{"label":"GetAttributeValue","comment":"Retrieves the attribute&amp;apos;s value using the provided attribute label.","valuetype":"String","filenamebase":"GetAttributeValue_Method","fqnprefix":"XMLVSE.XMLObject","qn":"GetAttributeValue","codesample":"Dim parser as New XMLParser\nDIm object as New XMLObject\nDim helloWorld as String\nhelloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;\nCall parser.loadFromXML(helloWorld)\nSet object = parser.getRootXML()\nForAll attr in object.Attributes()\nPrint attr &amp;amp; &amp;quot;: &amp;quot; &amp;amp; object.GetAttributeValue(attr)\nEnd ForAll","signaturecode":64,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(Label As String)","signature":"Function GetAttributeValue(Label As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Retrieves the attribute&amp;apos;s value using the provided attribute label.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Retrieves the attribute&amp;apos;s value using the provided attribute label.","inlinecomment":" \t &apos; Retrieves the attribute&amp;apos;s value using the provided attribute label.","parentclassname":"XMLObject","codesamplehtml":"Dim parser as New XMLParser&lt;br /&gt;DIm object as New XMLObject&lt;br /&gt;Dim helloWorld as String&lt;br /&gt;helloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;&lt;br /&gt;Call parser.loadFromXML(helloWorld)&lt;br /&gt;Set object = parser.getRootXML()&lt;br /&gt;ForAll attr in object.Attributes()&lt;br /&gt;Print attr &amp;amp; &amp;quot;: &amp;quot; &amp;amp; object.GetAttributeValue(attr)&lt;br /&gt;End ForAll", "signatureelements":["Function"], "arguments":[{"label":"Label","comment":"","valuetype":"String","filenamebase":"Label_ValuedElement","fqnprefix":"XMLVSEXMLObjectGetAttributeValue","qn":"Label","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"GetChild","comment":"Returns the child XMLObject using the provided label. Raises an error if the specified child cannot be found.","valuetype":"XMLObject","filenamebase":"GetChild_Method","fqnprefix":"XMLVSE.XMLObject","qn":"GetChild","codesample":"Dim parser as New XMLParser\nDIm object as New XMLObject\nDim helloWorld as String\nhelloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;\nCall parser.loadFromXML(helloWorld)\nSet object = parser.getRootXML()\nDIm child as New XMLObject\nSet child = object.getChild(&amp;quot;Employee&amp;quot;)\nPrint child.toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Label As String)","signature":"Function GetChild(Label As String) As XMLObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns the child XMLObject using the provided label. Raises an error if the specified child cannot be found.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns the child XMLObject using the provided label. Raises an error if the specified child cannot be found.","inlinecomment":" \t &apos; Returns the child XMLObject using the provided label. Raises an error if the specified child cannot be found.","parentclassname":"XMLObject","codesamplehtml":"Dim parser as New XMLParser&lt;br /&gt;DIm object as New XMLObject&lt;br /&gt;Dim helloWorld as String&lt;br /&gt;helloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;&lt;br /&gt;Call parser.loadFromXML(helloWorld)&lt;br /&gt;Set object = parser.getRootXML()&lt;br /&gt;DIm child as New XMLObject&lt;br /&gt;Set child = object.getChild(&amp;quot;Employee&amp;quot;)&lt;br /&gt;Print child.toString(True)", "signatureelements":["Function"], "arguments":[{"label":"Label","comment":"","valuetype":"String","filenamebase":"Label_ValuedElement","fqnprefix":"XMLVSEXMLObjectGetChild","qn":"Label","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"GetChildren","comment":"Returns an array of all the child XMLObjects. Rasies an error if this object has no children.","valuetype":"XMLObject","filenamebase":"GetChildren_Method","fqnprefix":"XMLVSE.XMLObject","qn":"GetChildren","codesample":"Dim parser as New XMLParser\nDIm object as New XMLObject\nDim helloWorld as String\nhelloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;Employee&amp;gt;Jane Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;\nCall parser.loadFromXML(helloWorld)\nSet object = parser.getRootXML()\nDim childObject as New XMLObject\nForAll child in object.getChildren()         \nSet childObject = child\nPrint childObject.Tag() &amp;amp; &amp;quot; - &amp;quot; &amp;amp; childObject.Value()\nEnd ForAll","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function GetChildren() As XMLObject Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns an array of all the child XMLObjects. Rasies an error if this object has no children.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns an array of all the child XMLObjects. Rasies an error if this object has no children.","inlinecomment":" \t &apos; Returns an array of all the child XMLObjects. Rasies an error if this object has no children.","parentclassname":"XMLObject","codesamplehtml":"Dim parser as New XMLParser&lt;br /&gt;DIm object as New XMLObject&lt;br /&gt;Dim helloWorld as String&lt;br /&gt;helloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;Employee&amp;gt;Jane Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;&lt;br /&gt;Call parser.loadFromXML(helloWorld)&lt;br /&gt;Set object = parser.getRootXML()&lt;br /&gt;Dim childObject as New XMLObject&lt;br /&gt;ForAll child in object.getChildren()         &lt;br /&gt;Set childObject = child&lt;br /&gt;Print childObject.Tag() &amp;amp; &amp;quot; - &amp;quot; &amp;amp; childObject.Value()&lt;br /&gt;End ForAll", "attributes":["Array"], "signatureelements":["Function"]},{"label":"GetChildValue","comment":"Returns the value of the XML child with the provided label. Raises an error if the child does not exist or does not have a value.","valuetype":"String","filenamebase":"GetChildValue_Method","fqnprefix":"XMLVSE.XMLObject","qn":"GetChildValue","codesample":"Dim parser as New XMLParser\nDIm object as New XMLObject\nDim helloWorld as String\nhelloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;\nCall parser.loadFromXML(helloWorld)\nSet object = parser.getRootXML()\nPrint object.getChildValue(&amp;quot;Employee&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(Label As String)","signature":"Function GetChildValue(Label As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns the value of the XML child with the provided label. Raises an error if the child does not exist or does not have a value.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns the value of the XML child with the provided label. Raises an error if the child does not exist or does not have a value.","inlinecomment":" \t &apos; Returns the value of the XML child with the provided label. Raises an error if the child does not exist or does not have a value.","parentclassname":"XMLObject","codesamplehtml":"Dim parser as New XMLParser&lt;br /&gt;DIm object as New XMLObject&lt;br /&gt;Dim helloWorld as String&lt;br /&gt;helloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;&lt;br /&gt;Call parser.loadFromXML(helloWorld)&lt;br /&gt;Set object = parser.getRootXML()&lt;br /&gt;Print object.getChildValue(&amp;quot;Employee&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"Label","comment":"","valuetype":"String","filenamebase":"Label_ValuedElement","fqnprefix":"XMLVSEXMLObjectGetChildValue","qn":"Label","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"GetParent","comment":"Returns the parent XMLObject of this XMLObject. Returns itself if this does not have a parent. Raises an error if this XMLObject is empty.","valuetype":"XMLObject","filenamebase":"GetParent_Method","fqnprefix":"XMLVSE.XMLObject","qn":"GetParent","codesample":"Dim parser as New XMLParser\nDIm object as New XMLObject\nDim helloWorld as String\nhelloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;\nCall parser.loadFromXML(helloWorld)\nSet object = parser.getRootXML()\nDIm child as New XMLObject\nSet child = object.getChild(&amp;quot;Employee&amp;quot;)\nPrint child.toString(True)\nSet child = object.getParent()\nPrint child.toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function GetParent() As XMLObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns the parent XMLObject of this XMLObject. Returns itself if this does not have a parent. Raises an error if this XMLObject is empty.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns the parent XMLObject of this XMLObject. Returns itself if this does not have a parent. Raises an error if this XMLObject is empty.","inlinecomment":" \t &apos; Returns the parent XMLObject of this XMLObject. Returns itself if this does not have a parent. Raises an error if this XMLObject is empty.","parentclassname":"XMLObject","codesamplehtml":"Dim parser as New XMLParser&lt;br /&gt;DIm object as New XMLObject&lt;br /&gt;Dim helloWorld as String&lt;br /&gt;helloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;&lt;br /&gt;Call parser.loadFromXML(helloWorld)&lt;br /&gt;Set object = parser.getRootXML()&lt;br /&gt;DIm child as New XMLObject&lt;br /&gt;Set child = object.getChild(&amp;quot;Employee&amp;quot;)&lt;br /&gt;Print child.toString(True)&lt;br /&gt;Set child = object.getParent()&lt;br /&gt;Print child.toString(True)", "signatureelements":["Function"]},{"label":"IsDescendant","comment":"Checks the elements within the current XMLObject if it exists using an array of labels to navigate down the hierarchy.","valuetype":"Boolean","filenamebase":"IsDescendant_Method","fqnprefix":"XMLVSE.XMLObject","qn":"IsDescendant","codesample":"%REM\n    The following code loads a string of XML and checks whether descendants exist.\n%END REM\nDim parser as New XMLParser\nDim object as XMLObject\nDim path(2) as String\nCall parser.loadFromXML(&amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;&amp;lt;John&amp;gt;Doe&amp;lt;/John&amp;gt;&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;)\nSet object = parser.getRootXML()\npath(0) = &amp;quot;Profile&amp;quot;\npath(1) = &amp;quot;Employee&amp;quot;\npath(2) = &amp;quot;Jane&amp;quot;\nPrint &amp;quot;is &amp;lt;Jane&amp;gt; a Descendant? : &amp;quot; &amp;amp; object.isDescendant(path)  &amp;apos; False\npath(2) = &amp;quot;John&amp;quot;\nPrint &amp;quot;is &amp;lt;John&amp;gt; a Descendant? : &amp;quot; &amp;amp; object.isDescendant(path) &amp;amp; chr(10) &amp;apos; True","signaturecode":64,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(Path As String Array)","signature":"Function IsDescendant(Path As String Array) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks the elements within the current XMLObject if it exists using an array of labels to navigate down the hierarchy.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks the elements within the current XMLObject if it exists using an array of labels to navigate down the hierarchy.","inlinecomment":" \t &apos; Checks the elements within the current XMLObject if it exists using an array of labels to navigate down the hierarchy.","parentclassname":"XMLObject","codesamplehtml":"%REM&lt;br /&gt;    The following code loads a string of XML and checks whether descendants exist.&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New XMLParser&lt;br /&gt;Dim object as XMLObject&lt;br /&gt;Dim path(2) as String&lt;br /&gt;Call parser.loadFromXML(&amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;&amp;lt;John&amp;gt;Doe&amp;lt;/John&amp;gt;&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;)&lt;br /&gt;Set object = parser.getRootXML()&lt;br /&gt;path(0) = &amp;quot;Profile&amp;quot;&lt;br /&gt;path(1) = &amp;quot;Employee&amp;quot;&lt;br /&gt;path(2) = &amp;quot;Jane&amp;quot;&lt;br /&gt;Print &amp;quot;is &amp;lt;Jane&amp;gt; a Descendant? : &amp;quot; &amp;amp; object.isDescendant(path)  &amp;apos; False&lt;br /&gt;path(2) = &amp;quot;John&amp;quot;&lt;br /&gt;Print &amp;quot;is &amp;lt;John&amp;gt; a Descendant? : &amp;quot; &amp;amp; object.isDescendant(path) &amp;amp; chr(10) &amp;apos; True", "signatureelements":["Function"], "arguments":[{"label":"Path","comment":"","valuetype":"String","filenamebase":"Path_ValuedElement","fqnprefix":"XMLVSEXMLObjectIsDescendant","qn":"Path","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":"", "attributes":["Array"]}]},{"label":"IsEmpty","comment":"Checks if the current XMLObject is empty.","valuetype":"Boolean","filenamebase":"IsEmpty_Method","fqnprefix":"XMLVSE.XMLObject","qn":"IsEmpty","codesample":"Dim parser as New XMLParser\nDIm object as New XMLObject\nDim helloWorld as String\nhelloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;\nCall parser.loadFromXML(helloWorld)\nSet object = parser.getRootXML()\nIf object.isEmpty() Then \n    Print &amp;quot;Empty&amp;quot; \nElse \n    Print &amp;quot;Not Empty&amp;quot;\nEnd if","signaturecode":64,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"()","signature":"Function IsEmpty() As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks if the current XMLObject is empty.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks if the current XMLObject is empty.","inlinecomment":" \t &apos; Checks if the current XMLObject is empty.","parentclassname":"XMLObject","codesamplehtml":"Dim parser as New XMLParser&lt;br /&gt;DIm object as New XMLObject&lt;br /&gt;Dim helloWorld as String&lt;br /&gt;helloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;&lt;br /&gt;Call parser.loadFromXML(helloWorld)&lt;br /&gt;Set object = parser.getRootXML()&lt;br /&gt;If object.isEmpty() Then &lt;br /&gt;    Print &amp;quot;Empty&amp;quot; &lt;br /&gt;Else &lt;br /&gt;    Print &amp;quot;Not Empty&amp;quot;&lt;br /&gt;End if", "signatureelements":["Function"]},{"label":"New","comment":"","valuetype":"XMLObject","filenamebase":"New_Method","fqnprefix":"XMLVSE.XMLObject","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As XMLObject","modifiers":"","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"XMLObject","codesamplehtml":"", "signatureelements":["Function"]},{"label":"RemoveAttribute","comment":"Deletes the XML attribute using the provided attribute tag/label.","valuetype":"XMLObject","filenamebase":"RemoveAttribute_Method","fqnprefix":"XMLVSE.XMLObject","qn":"RemoveAttribute","codesample":"Dim parser as New XMLParser\nDIm object as New XMLObject\nDim helloWorld as String\nhelloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;\nCall parser.loadFromXML(helloWorld)\nSet object = parser.getRootXML()\nSet object = object.removeAttribute(&amp;quot;version&amp;quot;).removeAttribute(&amp;quot;publish&amp;quot;)\nPrint object.toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Label As String)","signature":"Function RemoveAttribute(Label As String) As XMLObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Deletes the XML attribute using the provided attribute tag/label.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Deletes the XML attribute using the provided attribute tag/label.","inlinecomment":" \t &apos; Deletes the XML attribute using the provided attribute tag/label.","parentclassname":"XMLObject","codesamplehtml":"Dim parser as New XMLParser&lt;br /&gt;DIm object as New XMLObject&lt;br /&gt;Dim helloWorld as String&lt;br /&gt;helloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;&lt;br /&gt;Call parser.loadFromXML(helloWorld)&lt;br /&gt;Set object = parser.getRootXML()&lt;br /&gt;Set object = object.removeAttribute(&amp;quot;version&amp;quot;).removeAttribute(&amp;quot;publish&amp;quot;)&lt;br /&gt;Print object.toString(True)", "signatureelements":["Function"], "arguments":[{"label":"Label","comment":"","valuetype":"String","filenamebase":"Label_ValuedElement","fqnprefix":"XMLVSEXMLObjectRemoveAttribute","qn":"Label","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"RemoveChild","comment":"Removes the child XML object using the provided XML tag.","valuetype":"XMLObject","filenamebase":"RemoveChild_Method","fqnprefix":"XMLVSE.XMLObject","qn":"RemoveChild","codesample":"Dim parser as New XMLParser\nDIm object as New XMLObject\nDim helloWorld as String\nhelloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;\nCall parser.loadFromXML(helloWorld)\nSet object = parser.getRootXML()\nSet object = object.removeChild(&amp;quot;Employee&amp;quot;)\nPrint object.toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Tag As String)","signature":"Function RemoveChild(Tag As String) As XMLObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Removes the child XML object using the provided XML tag.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Removes the child XML object using the provided XML tag.","inlinecomment":" \t &apos; Removes the child XML object using the provided XML tag.","parentclassname":"XMLObject","codesamplehtml":"Dim parser as New XMLParser&lt;br /&gt;DIm object as New XMLObject&lt;br /&gt;Dim helloWorld as String&lt;br /&gt;helloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;&lt;br /&gt;Call parser.loadFromXML(helloWorld)&lt;br /&gt;Set object = parser.getRootXML()&lt;br /&gt;Set object = object.removeChild(&amp;quot;Employee&amp;quot;)&lt;br /&gt;Print object.toString(True)", "signatureelements":["Function"], "arguments":[{"label":"Tag","comment":"","valuetype":"String","filenamebase":"Tag_ValuedElement","fqnprefix":"XMLVSEXMLObjectRemoveChild","qn":"Tag","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"RemoveChildObject","comment":"Removes the the provided XMLObject from this XMLObject. Use the getChild() method first to get the exact child XMLObject you wish to remove.","valuetype":"XMLObject","filenamebase":"RemoveChildObject_Method","fqnprefix":"XMLVSE.XMLObject","qn":"RemoveChildObject","codesample":"Dim parser as New XMLParser\nDIm object as New XMLObject\nDim helloWorld as String\nhelloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;\nCall parser.loadFromXML(helloWorld)\nSet object = parser.getRootXML()\nDIm child as New XMLObject\nSet child = object.getChild(&amp;quot;Employee&amp;quot;)\nSet object = object.removeChildObject(child)\nPrint object.toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Object As XMLObject)","signature":"Function RemoveChildObject(Object As XMLObject) As XMLObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Removes the the provided XMLObject from this XMLObject. Use the getChild() method first to get the exact child XMLObject you wish to remove.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Removes the the provided XMLObject from this XMLObject. Use the getChild() method first to get the exact child XMLObject you wish to remove.","inlinecomment":" \t &apos; Removes the the provided XMLObject from this XMLObject. Use the getChild() method first to get the exact child XMLObject you wish to remove.","parentclassname":"XMLObject","codesamplehtml":"Dim parser as New XMLParser&lt;br /&gt;DIm object as New XMLObject&lt;br /&gt;Dim helloWorld as String&lt;br /&gt;helloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;&lt;br /&gt;Call parser.loadFromXML(helloWorld)&lt;br /&gt;Set object = parser.getRootXML()&lt;br /&gt;DIm child as New XMLObject&lt;br /&gt;Set child = object.getChild(&amp;quot;Employee&amp;quot;)&lt;br /&gt;Set object = object.removeChildObject(child)&lt;br /&gt;Print object.toString(True)", "signatureelements":["Function"], "arguments":[{"label":"Object","comment":"","valuetype":"XMLObject","filenamebase":"Object_ValuedElement","fqnprefix":"XMLVSEXMLObjectRemoveChildObject","qn":"Object","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"ReplaceChildObject","comment":"Replaces the first Child Object argument from the current XMLObject using the second Child Object argument.","valuetype":"XMLObject","filenamebase":"ReplaceChildObject_Method","fqnprefix":"XMLVSE.XMLObject","qn":"ReplaceChildObject","codesample":"%REM\n    The following example loads a string of XML and replaces the element &amp;lt;Employee&amp;gt; to &amp;lt;Foo&amp;gt;\n%END REM\nDIm object as New XMLObject\nDim parser as New XMLParser\nCall parser.loadFromXML(&amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;)\nSet object = parser.getRootXML()\nDIm OldChild as New XMLObject, NewChild as New XMLObject\nSet OldChild = object.getChild(&amp;quot;Employee&amp;quot;)\nCall NewChild.addRootTag(&amp;quot;Foo&amp;quot;,&amp;quot;Bar&amp;quot;)\nCall object.ReplaceChildObject(OldChild,NewChild)\nPrint object.toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(FirstObject As XMLObject, SecondObject As XMLObject)","signature":"Function ReplaceChildObject(FirstObject As XMLObject, SecondObject As XMLObject) As XMLObject","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Replaces the first Child Object argument from the current XMLObject using the second Child Object argument.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Replaces the first Child Object argument from the current XMLObject using the second Child Object argument.","inlinecomment":" \t &apos; Replaces the first Child Object argument from the current XMLObject using the second Child Object argument.","parentclassname":"XMLObject","codesamplehtml":"%REM&lt;br /&gt;    The following example loads a string of XML and replaces the element &amp;lt;Employee&amp;gt; to &amp;lt;Foo&amp;gt;&lt;br /&gt;%END REM&lt;br /&gt;DIm object as New XMLObject&lt;br /&gt;Dim parser as New XMLParser&lt;br /&gt;Call parser.loadFromXML(&amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;)&lt;br /&gt;Set object = parser.getRootXML()&lt;br /&gt;DIm OldChild as New XMLObject, NewChild as New XMLObject&lt;br /&gt;Set OldChild = object.getChild(&amp;quot;Employee&amp;quot;)&lt;br /&gt;Call NewChild.addRootTag(&amp;quot;Foo&amp;quot;,&amp;quot;Bar&amp;quot;)&lt;br /&gt;Call object.ReplaceChildObject(OldChild,NewChild)&lt;br /&gt;Print object.toString(True)", "signatureelements":["Function"], "arguments":[{"label":"FirstObject","comment":"","valuetype":"XMLObject","filenamebase":"FirstObject_ValuedElement","fqnprefix":"XMLVSEXMLObjectReplaceChildObject","qn":"FirstObject","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""},{"label":"SecondObject","comment":"","valuetype":"XMLObject","filenamebase":"SecondObject_ValuedElement","fqnprefix":"XMLVSEXMLObjectReplaceChildObject","qn":"SecondObject","argumentindex":2,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"ToString","comment":"Converts this XMLObject to a string, either pretty-printed or as raw format.","valuetype":"String","filenamebase":"ToString_Method","fqnprefix":"XMLVSE.XMLObject","qn":"ToString","codesample":"Dim parser as New XMLParser\nDIm object as New XMLObject\nDim helloWorld as String\nhelloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;\nCall parser.loadFromXML(helloWorld)\nSet object = parser.getRootXML()\nPrint object.toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(PrettyPrint As Boolean)","signature":"Function ToString(PrettyPrint As Boolean) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Converts this XMLObject to a string, either pretty-printed or as raw format.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Converts this XMLObject to a string, either pretty-printed or as raw format.","inlinecomment":" \t &apos; Converts this XMLObject to a string, either pretty-printed or as raw format.","parentclassname":"XMLObject","codesamplehtml":"Dim parser as New XMLParser&lt;br /&gt;DIm object as New XMLObject&lt;br /&gt;Dim helloWorld as String&lt;br /&gt;helloWorld = &amp;quot;&amp;lt;Profile version=&amp;apos;1&amp;apos; publish=&amp;apos;2024&amp;apos;&amp;gt;&amp;lt;Employee&amp;gt;John Doe&amp;lt;/Employee&amp;gt;&amp;lt;/Profile&amp;gt;&amp;quot;&lt;br /&gt;Call parser.loadFromXML(helloWorld)&lt;br /&gt;Set object = parser.getRootXML()&lt;br /&gt;Print object.toString(True)", "signatureelements":["Function"], "arguments":[{"label":"PrettyPrint","comment":"Whether or not to pretty-print the XML","valuetype":"Boolean","filenamebase":"PrettyPrint_ValuedElement","fqnprefix":"XMLVSEXMLObjectToString","qn":"PrettyPrint","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether or not to pretty-print the XML&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether or not to pretty-print the XML","inlinecomment":" \t &apos; Whether or not to pretty-print the XML", "attributes":["BY_VAL"]}]},{"label":"Attributes","comment":"A String array of all the attributes this XMLObject has.","valuetype":"String","filenamebase":"Attributes_Method","fqnprefix":"XMLVSE.XMLObject","qn":"Get.Attributes","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Attributes As String Array","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;A String array of all the attributes this XMLObject has.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"A String array of all the attributes this XMLObject has.","inlinecomment":" \t &apos; A String array of all the attributes this XMLObject has.","parentclassname":"XMLObject","codesamplehtml":"", "attributes":["READ_ONLY","Array"], "signatureelements":["Property","Get"]},{"label":"ChildCount","comment":"Number of child elements this XMLObject has.","valuetype":"Integer-Unsigned","filenamebase":"ChildCount_Method","fqnprefix":"XMLVSE.XMLObject","qn":"Get.ChildCount","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get ChildCount As Integer","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Number of child elements this XMLObject has.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Number of child elements this XMLObject has.","inlinecomment":" \t &apos; Number of child elements this XMLObject has.","parentclassname":"XMLObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"Tag","comment":"Represents the root or primary tag of this XMLObject.","valuetype":"String","filenamebase":"Tag_Method","fqnprefix":"XMLVSE.XMLObject","qn":"Get.Tag","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Tag As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Represents the root or primary tag of this XMLObject.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Represents the root or primary tag of this XMLObject.","inlinecomment":" \t &apos; Represents the root or primary tag of this XMLObject.","parentclassname":"XMLObject","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Value","comment":"Represents the value of this XMLObject, returns empty if this is a parent.","valuetype":"String","filenamebase":"Value_Method","fqnprefix":"XMLVSE.XMLObject","qn":"Get.Value","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Value As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Represents the value of this XMLObject, returns empty if this is a parent.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Represents the value of this XMLObject, returns empty if this is a parent.","inlinecomment":" \t &apos; Represents the value of this XMLObject, returns empty if this is a parent.","parentclassname":"XMLObject","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Tag","comment":"Represents the root or primary tag of this XMLObject.","valuetype":"String","filenamebase":"Tag_Method","fqnprefix":"XMLVSE.XMLObject","qn":"Set.Tag","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set Tag As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Represents the root or primary tag of this XMLObject.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Represents the root or primary tag of this XMLObject.","inlinecomment":" \t &apos; Represents the root or primary tag of this XMLObject.","parentclassname":"XMLObject","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"Value","comment":"Represents the value of this XMLObject, returns empty if this is a parent.","valuetype":"String","filenamebase":"Value_Method","fqnprefix":"XMLVSE.XMLObject","qn":"Set.Value","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set Value As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Represents the value of this XMLObject, returns empty if this is a parent.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Represents the value of this XMLObject, returns empty if this is a parent.","inlinecomment":" \t &apos; Represents the value of this XMLObject, returns empty if this is a parent.","parentclassname":"XMLObject","codesamplehtml":"", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]}]}
