{"classname":"CouchServer","comment":"Class for connecting to and interacting with a CouchDB Server.  Provides methods for getting and setting configuration information. ","valuetype":"","filenamebase":"CouchServer_ObjectClass","fqnprefix":"CouchVSE","qn":"CouchServer","codesample":"Option Public\nOption Declare\nUseVSE &amp;quot;*CouchVSE&amp;quot;\n \nFunction loginCouchDbServer(server as CouchServer, user As String, password As String, url As String, certificatepath As String) As Boolean \n    Dim loginResult as String \n \n    Try \n       If (server is Nothing) Then Set server = new CouchServer() \n \n        server.User = user\n        server.Password = password \n        server.URL = url \n \n        If (Len(FullTrim(certificatepath)) &amp;gt; 0) Then server.CertificatePath = certificatepath &amp;apos; only set certificate path if not blank\n \n        loginResult = server.Login() \n        Print &amp;quot;Login server: &amp;quot; &amp;amp; loginResult, &amp;quot;VSE Toolkit, Not Dead Yet, baby!&amp;quot;\n        Print &amp;quot;CouchDB version: &amp;quot; &amp;amp; server.Version \n \n        return True \n \n    Catch \n        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() \n        return False \n    End Try \nEnd Function","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","projectid":"85258A0A005BFF7B85258714004ECA02","version":3,"classid":"85258A0A005BFF7B8525871400748E38","lsxclassid":2,"signature":"Public Class CouchServer","modifiers":"Public","classname":"CouchServer","parentclassname":"None","constructorsignature":"Function New() As CouchServer","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class for connecting to and interacting with a CouchDB Server.  Provides methods for getting and setting configuration information. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class for connecting to and interacting with a CouchDB Server.  Provides methods for getting and setting configuration information. ","inlinecomment":" \t &apos; Class for connecting to and interacting with a CouchDB Server.  Provides methods for getting and setting configuration information. ","codesamplehtml":"Option Public&lt;br /&gt;Option Declare&lt;br /&gt;UseVSE &amp;quot;*CouchVSE&amp;quot;&lt;br /&gt; &lt;br /&gt;Function loginCouchDbServer(server as CouchServer, user As String, password As String, url As String, certificatepath As String) As Boolean &lt;br /&gt;    Dim loginResult as String &lt;br /&gt; &lt;br /&gt;    Try &lt;br /&gt;       If (server is Nothing) Then Set server = new CouchServer() &lt;br /&gt; &lt;br /&gt;        server.User = user&lt;br /&gt;        server.Password = password &lt;br /&gt;        server.URL = url &lt;br /&gt; &lt;br /&gt;        If (Len(FullTrim(certificatepath)) &amp;gt; 0) Then server.CertificatePath = certificatepath &amp;apos; only set certificate path if not blank&lt;br /&gt; &lt;br /&gt;        loginResult = server.Login() &lt;br /&gt;        Print &amp;quot;Login server: &amp;quot; &amp;amp; loginResult, &amp;quot;VSE Toolkit, Not Dead Yet, baby!&amp;quot;&lt;br /&gt;        Print &amp;quot;CouchDB version: &amp;quot; &amp;amp; server.Version &lt;br /&gt; &lt;br /&gt;        return True &lt;br /&gt; &lt;br /&gt;    Catch &lt;br /&gt;        Print |Error | &amp;amp; Err() &amp;amp; |: | &amp;amp; Error() &amp;amp; | at Line | &amp;amp; Erl() &lt;br /&gt;        return False &lt;br /&gt;    End Try &lt;br /&gt;End Function", "methods":[{"label":"CreateDb","comment":"Creates a database using the specified name ","valuetype":"CouchDatabase","filenamebase":"CreateDb_Method","fqnprefix":"CouchVSE.CouchServer","qn":"CreateDb","codesample":"Function createCouchDbDatabase(server As CouchServer, dbName As String) As CouchDatabase \n    return server.CreateDb(dbName)\nEnd Funct","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String)","signature":"Function CreateDb(Name As String) As CouchDatabase","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a database using the specified name &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a database using the specified name ","inlinecomment":" \t &apos; Creates a database using the specified name ","parentclassname":"CouchServer","codesamplehtml":"Function createCouchDbDatabase(server As CouchServer, dbName As String) As CouchDatabase &lt;br /&gt;    return server.CreateDb(dbName)&lt;br /&gt;End Funct", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchServerCreateDb","qn":"Name","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"DeleteDb","comment":"Deletes the specified database from the CouchDB Server ","valuetype":"Boolean","filenamebase":"DeleteDb_Method","fqnprefix":"CouchVSE.CouchServer","qn":"DeleteDb","codesample":"Function deleteRecipesDatabase(server As CouchServer) As Boolean  \n    Dim db As CouchDatabase \n \n    If server.IsDatabase(&amp;quot;recipes&amp;quot;) Then \n        Set db = server.GetDb(&amp;quot;recipes&amp;quot;)\n        Return server.DeleteDb(db) \n    Else \n        Return False \n    End If \nEnd Function ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Database As CouchDatabase)","signature":"Function DeleteDb(Database As CouchDatabase) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Deletes the specified database from the CouchDB Server &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Deletes the specified database from the CouchDB Server ","inlinecomment":" \t &apos; Deletes the specified database from the CouchDB Server ","parentclassname":"CouchServer","codesamplehtml":"Function deleteRecipesDatabase(server As CouchServer) As Boolean  &lt;br /&gt;    Dim db As CouchDatabase &lt;br /&gt; &lt;br /&gt;    If server.IsDatabase(&amp;quot;recipes&amp;quot;) Then &lt;br /&gt;        Set db = server.GetDb(&amp;quot;recipes&amp;quot;)&lt;br /&gt;        Return server.DeleteDb(db) &lt;br /&gt;    Else &lt;br /&gt;        Return False &lt;br /&gt;    End If &lt;br /&gt;End Function ", "signatureelements":["Function"], "arguments":[{"label":"Database","comment":"","valuetype":"CouchDatabase","filenamebase":"Database_ValuedElement","fqnprefix":"CouchVSECouchServerDeleteDb","qn":"Database","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"GetDb","comment":"Gets the specified database (if it exists) ","valuetype":"CouchDatabase","filenamebase":"GetDb_Method","fqnprefix":"CouchVSE.CouchServer","qn":"GetDb","codesample":"Function getCouchDbDatabase(server As CouchServer, dbName As String) As CouchDatabase \n    return server.GetDb(dbName) \nEnd Function ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Name As String)","signature":"Function GetDb(Name As String) As CouchDatabase","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the specified database (if it exists) &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the specified database (if it exists) ","inlinecomment":" \t &apos; Gets the specified database (if it exists) ","parentclassname":"CouchServer","codesamplehtml":"Function getCouchDbDatabase(server As CouchServer, dbName As String) As CouchDatabase &lt;br /&gt;    return server.GetDb(dbName) &lt;br /&gt;End Function ", "signatureelements":["Function"], "arguments":[{"label":"Name","comment":"","valuetype":"String","filenamebase":"Name_ValuedElement","fqnprefix":"CouchVSECouchServerGetDb","qn":"Name","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"GetUUID","comment":"Gets a Universally Unique Identifier (UUID) from the CouchDb server instance ","valuetype":"String","filenamebase":"GetUUID_Method","fqnprefix":"CouchVSE.CouchServer","qn":"GetUUID","codesample":"Function getCouchDbUUID(server As CouchServer) As String \n    return server.getUUID()\nEnd Function","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function GetUUID() As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets a Universally Unique Identifier (UUID) from the CouchDb server instance &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets a Universally Unique Identifier (UUID) from the CouchDb server instance ","inlinecomment":" \t &apos; Gets a Universally Unique Identifier (UUID) from the CouchDb server instance ","parentclassname":"CouchServer","codesamplehtml":"Function getCouchDbUUID(server As CouchServer) As String &lt;br /&gt;    return server.getUUID()&lt;br /&gt;End Function", "signatureelements":["Function"]},{"label":"IsDatabase","comment":"Boolean flag indicating if a database matching the specified DbName exists. ","valuetype":"Boolean","filenamebase":"IsDatabase_Method","fqnprefix":"CouchVSE.CouchServer","qn":"IsDatabase","codesample":"Function couchDbExists(server As CouchServer, dbName As String) As Boolean \n    return server.IsDatabase(dbName) \nEnd Function ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DbName As String)","signature":"Function IsDatabase(DbName As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Boolean flag indicating if a database matching the specified DbName exists. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Boolean flag indicating if a database matching the specified DbName exists. ","inlinecomment":" \t &apos; Boolean flag indicating if a database matching the specified DbName exists. ","parentclassname":"CouchServer","codesamplehtml":"Function couchDbExists(server As CouchServer, dbName As String) As Boolean &lt;br /&gt;    return server.IsDatabase(dbName) &lt;br /&gt;End Function ", "signatureelements":["Function"], "arguments":[{"label":"DbName","comment":"","valuetype":"String","filenamebase":"DbName_ValuedElement","fqnprefix":"CouchVSECouchServerIsDatabase","qn":"DbName","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]},{"label":"Login","comment":"Logs into the CouchDB Server using the previously set credentials and URL","valuetype":"String","filenamebase":"Login_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Login","codesample":"Dim server As New CouchServer() \n \nserver.User = |Your CouchDB User ID|\nserver.Password = |Your CouchDB Password|\nserver.URL = |URL to your CouchDB Server| \nCall server.Login() ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function Login() As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Logs into the CouchDB Server using the previously set credentials and URL&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Logs into the CouchDB Server using the previously set credentials and URL","inlinecomment":" \t &apos; Logs into the CouchDB Server using the previously set credentials and URL","parentclassname":"CouchServer","codesamplehtml":"Dim server As New CouchServer() &lt;br /&gt; &lt;br /&gt;server.User = |Your CouchDB User ID|&lt;br /&gt;server.Password = |Your CouchDB Password|&lt;br /&gt;server.URL = |URL to your CouchDB Server| &lt;br /&gt;Call server.Login() ", "signatureelements":["Function"]},{"label":"New","comment":"Constructor method for a CouchServer object. ","valuetype":"CouchServer","filenamebase":"New_Method","fqnprefix":"CouchVSE.CouchServer","qn":"New","codesample":"Dim server1 as New CouchServer() \n&amp;apos; or \nDim server2 as CouchServer \nSet server2 = New CouchServer() ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As CouchServer","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor method for a CouchServer object. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor method for a CouchServer object. ","inlinecomment":" \t &apos; Constructor method for a CouchServer object. ","parentclassname":"CouchServer","codesamplehtml":"Dim server1 as New CouchServer() &lt;br /&gt;&amp;apos; or &lt;br /&gt;Dim server2 as CouchServer &lt;br /&gt;Set server2 = New CouchServer() ", "signatureelements":["Function"]},{"label":"RegisterVSEPath","comment":"INTERNAL METHOD used to register the VSE with the operating system.  Not needed by application developers.","valuetype":"Boolean","filenamebase":"RegisterVSEPath_Method","fqnprefix":"CouchVSE.CouchServer","qn":"RegisterVSEPath","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function RegisterVSEPath() As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;INTERNAL METHOD used to register the VSE with the operating system.  Not needed by application developers.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"INTERNAL METHOD used to register the VSE with the operating system.  Not needed by application developers.","inlinecomment":" \t &apos; INTERNAL METHOD used to register the VSE with the operating system.  Not needed by application developers.","parentclassname":"CouchServer","codesamplehtml":"", "signatureelements":["Function"]},{"label":"CertificatePath","comment":"Path to a .crt file containing certificates for the server to connect to, if not on the PATH.  This should only be necessary for self-signed certificates.  \nIf the server requires SSL verification and there is no valid certificate or this is False then login will fail.","valuetype":"String","filenamebase":"CertificatePath_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.CertificatePath","codesample":"Dim server As New CouchServer() \n \nserver.CertificatePath = &amp;quot;filepath to your certificate&amp;quot; ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get CertificatePath As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to a .crt file containing certificates for the server to connect to, if not on the PATH.  This should only be necessary for self-signed certificates.  &lt;br /&gt;If the server requires SSL verification and there is no valid certificate or this is False then login will fail.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to a .crt file containing certificates for the server to connect to, if not on the PATH.  This should only be necessary for self-signed certificates.  &lt;br /&gt;If the server requires SSL verification and there is no valid certificate or this is False then login will fail.","inlinecomment":" \t &apos; Path to a .crt file containing certificates for the server to connect to, if not on the PATH.  This should only be necessary for self-signed certificates.  \nIf the server requires SSL verification and there is no valid certificate or this is False then login will fail.","parentclassname":"CouchServer","codesamplehtml":"Dim server As New CouchServer() &lt;br /&gt; &lt;br /&gt;server.CertificatePath = &amp;quot;filepath to your certificate&amp;quot; ", "attributes":["SET_CONST"], "signatureelements":["Property","Get"]},{"label":"CouchVersion","comment":"Version of CouchDB being used by the connected CouchServer","valuetype":"String","filenamebase":"CouchVersion_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.CouchVersion","codesample":"&amp;apos; Sample code assumes previously created and logged in server As CouchServer object \n \nPrint |CouchServer.CouchVersion: | &amp;amp; server.CouchVersion ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get CouchVersion As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Version of CouchDB being used by the connected CouchServer&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Version of CouchDB being used by the connected CouchServer","inlinecomment":" \t &apos; Version of CouchDB being used by the connected CouchServer","parentclassname":"CouchServer","codesamplehtml":"&amp;apos; Sample code assumes previously created and logged in server As CouchServer object &lt;br /&gt; &lt;br /&gt;Print |CouchServer.CouchVersion: | &amp;amp; server.CouchVersion ", "attributes":["READ_ONLY","GET_CONST","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"DatabaseNames","comment":"String array containing the names of all databases for a couch server.","valuetype":"String","filenamebase":"DatabaseNames_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.DatabaseNames","codesample":"Function getCouchDbDatabaseNames(server as CouchServer) as Variant \n    Dim result as Variant \n    Dim i as Integer \n \n    result = server.DatabaseNames\n \n    i = Ubound(result) - Lbound(result)\n    If (Len(FullTrim(result(i))) &amp;gt; 0) Then i++\n    Print &amp;quot;There are &amp;quot; &amp;amp; i &amp;amp; &amp;quot; DatabaseNames: &amp;quot;, join(result, |, |)\n \n    Return result \nEnd Function ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get DatabaseNames As String Array","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String array containing the names of all databases for a couch server.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String array containing the names of all databases for a couch server.","inlinecomment":" \t &apos; String array containing the names of all databases for a couch server.","parentclassname":"CouchServer","codesamplehtml":"Function getCouchDbDatabaseNames(server as CouchServer) as Variant &lt;br /&gt;    Dim result as Variant &lt;br /&gt;    Dim i as Integer &lt;br /&gt; &lt;br /&gt;    result = server.DatabaseNames&lt;br /&gt; &lt;br /&gt;    i = Ubound(result) - Lbound(result)&lt;br /&gt;    If (Len(FullTrim(result(i))) &amp;gt; 0) Then i++&lt;br /&gt;    Print &amp;quot;There are &amp;quot; &amp;amp; i &amp;amp; &amp;quot; DatabaseNames: &amp;quot;, join(result, |, |)&lt;br /&gt; &lt;br /&gt;    Return result &lt;br /&gt;End Function ", "attributes":["READ_ONLY","Array"], "signatureelements":["Property","Get"]},{"label":"Features","comment":"Array of Strings indicating the Features (such as &amp;quot;access-ready&amp;quot;, &amp;quot;partitioned&amp;quot;, etc) of the CouchDB Server","valuetype":"String","filenamebase":"Features_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.Features","codesample":"Function getCouchDbFeatures(server as CouchServer) as Variant \n    Dim result as Variant \n    Dim i as Integer \n \n    result = server.Features\n \n    i = Ubound(result) - Lbound(result)\n    If (Len(FullTrim(result(i))) &amp;gt; 0) Then i++\n    Print &amp;quot;There are &amp;quot; &amp;amp; i &amp;amp; &amp;quot; Features: &amp;quot;, join(result, |, |)\n \n    Return result \nEnd Function","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Features As String Array","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array of Strings indicating the Features (such as &amp;quot;access-ready&amp;quot;, &amp;quot;partitioned&amp;quot;, etc) of the CouchDB Server&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array of Strings indicating the Features (such as &amp;quot;access-ready&amp;quot;, &amp;quot;partitioned&amp;quot;, etc) of the CouchDB Server","inlinecomment":" \t &apos; Array of Strings indicating the Features (such as &amp;quot;access-ready&amp;quot;, &amp;quot;partitioned&amp;quot;, etc) of the CouchDB Server","parentclassname":"CouchServer","codesamplehtml":"Function getCouchDbFeatures(server as CouchServer) as Variant &lt;br /&gt;    Dim result as Variant &lt;br /&gt;    Dim i as Integer &lt;br /&gt; &lt;br /&gt;    result = server.Features&lt;br /&gt; &lt;br /&gt;    i = Ubound(result) - Lbound(result)&lt;br /&gt;    If (Len(FullTrim(result(i))) &amp;gt; 0) Then i++&lt;br /&gt;    Print &amp;quot;There are &amp;quot; &amp;amp; i &amp;amp; &amp;quot; Features: &amp;quot;, join(result, |, |)&lt;br /&gt; &lt;br /&gt;    Return result &lt;br /&gt;End Function", "attributes":["READ_ONLY","SET_CONST","Array"], "signatureelements":["Property","Get"]},{"label":"LibCurlVersion","comment":"The version of Libcurl used by this vse","valuetype":"String","filenamebase":"LibCurlVersion_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.LibCurlVersion","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get LibCurlVersion As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;The version of Libcurl used by this vse&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"The version of Libcurl used by this vse","inlinecomment":" \t &apos; The version of Libcurl used by this vse","parentclassname":"CouchServer","codesamplehtml":"", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"Password","comment":"Password used when logging into a CouchDB Server ","valuetype":"String","filenamebase":"Password_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.Password","codesample":"Dim server As New CouchServer() \nserver.Password = |Your CouchDB Password|","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Password As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Password used when logging into a CouchDB Server &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Password used when logging into a CouchDB Server ","inlinecomment":" \t &apos; Password used when logging into a CouchDB Server ","parentclassname":"CouchServer","codesamplehtml":"Dim server As New CouchServer() &lt;br /&gt;server.Password = |Your CouchDB Password|", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"SSLHostValidationOn","comment":"Turn on or off SSL host validation. If the server requires SSL verification and there is no valid certificate or this is False then login will fail.\n \nSettng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.\nDefault value is True.","valuetype":"Boolean","filenamebase":"SSLHostValidationOn_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.SSLHostValidationOn","codesample":"Dim server as new CouchServer() \nserver.SSLHostValidationOn = True ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get SSLHostValidationOn As Boolean","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Turn on or off SSL host validation. If the server requires SSL verification and there is no valid certificate or this is False then login will fail.&lt;br /&gt; &lt;br /&gt;Settng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.&lt;br /&gt;Default value is True.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Turn on or off SSL host validation. If the server requires SSL verification and there is no valid certificate or this is False then login will fail.&lt;br /&gt; &lt;br /&gt;Settng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.&lt;br /&gt;Default value is True.","inlinecomment":" \t &apos; Turn on or off SSL host validation. If the server requires SSL verification and there is no valid certificate or this is False then login will fail.\n \nSettng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.\nDefault value is True.","parentclassname":"CouchServer","codesamplehtml":"Dim server as new CouchServer() &lt;br /&gt;server.SSLHostValidationOn = True ", "signatureelements":["Property","Get"]},{"label":"URL","comment":"URL Used to access the CouchDB Server","valuetype":"String","filenamebase":"URL_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.URL","codesample":"Dim server As New CouchServer() \nserver.URL = |URL for your CouchDB Server|","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get URL As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;URL Used to access the CouchDB Server&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"URL Used to access the CouchDB Server","inlinecomment":" \t &apos; URL Used to access the CouchDB Server","parentclassname":"CouchServer","codesamplehtml":"Dim server As New CouchServer() &lt;br /&gt;server.URL = |URL for your CouchDB Server|", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"User","comment":"User name used when logging into a CouchDB Server","valuetype":"String","filenamebase":"User_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.User","codesample":"Dim server As New CouchServer() \nserver.User = |Your CouchDB User Name|","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get User As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;User name used when logging into a CouchDB Server&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"User name used when logging into a CouchDB Server","inlinecomment":" \t &apos; User name used when logging into a CouchDB Server","parentclassname":"CouchServer","codesamplehtml":"Dim server As New CouchServer() &lt;br /&gt;server.User = |Your CouchDB User Name|", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"VerboseLogging","comment":"Whether this CouchServer should create a .log file with verbose logging output from libcurl when a request is made. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","valuetype":"Boolean","filenamebase":"VerboseLogging_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.VerboseLogging","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get VerboseLogging As Boolean","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether this CouchServer should create a .log file with verbose logging output from libcurl when a request is made. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether this CouchServer should create a .log file with verbose logging output from libcurl when a request is made. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","inlinecomment":" \t &apos; Whether this CouchServer should create a .log file with verbose logging output from libcurl when a request is made. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","parentclassname":"CouchServer","codesamplehtml":"", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"VSEVersion","comment":"Represents the Version of the CouchVSE VoltScript extension in use. ","valuetype":"String","filenamebase":"VSEVersion_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Get.VSEVersion","codesample":"&amp;apos; Sample code assumes previously created and logged in server As CouchServer object \n \nPrint |CouchServer.VSEVersion: | &amp;amp; server.VSEVersion ","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get VSEVersion As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Represents the Version of the CouchVSE VoltScript extension in use. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Represents the Version of the CouchVSE VoltScript extension in use. ","inlinecomment":" \t &apos; Represents the Version of the CouchVSE VoltScript extension in use. ","parentclassname":"CouchServer","codesamplehtml":"&amp;apos; Sample code assumes previously created and logged in server As CouchServer object &lt;br /&gt; &lt;br /&gt;Print |CouchServer.VSEVersion: | &amp;amp; server.VSEVersion ", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"CertificatePath","comment":"Path to a .crt file containing certificates for the server to connect to, if not on the PATH.  This should only be necessary for self-signed certificates.  \nIf the server requires SSL verification and there is no valid certificate or this is False then login will fail.","valuetype":"String","filenamebase":"CertificatePath_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Set.CertificatePath","codesample":"Dim server As New CouchServer() \n \nserver.CertificatePath = &amp;quot;filepath to your certificate&amp;quot; ","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set CertificatePath As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to a .crt file containing certificates for the server to connect to, if not on the PATH.  This should only be necessary for self-signed certificates.  &lt;br /&gt;If the server requires SSL verification and there is no valid certificate or this is False then login will fail.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to a .crt file containing certificates for the server to connect to, if not on the PATH.  This should only be necessary for self-signed certificates.  &lt;br /&gt;If the server requires SSL verification and there is no valid certificate or this is False then login will fail.","inlinecomment":" \t &apos; Path to a .crt file containing certificates for the server to connect to, if not on the PATH.  This should only be necessary for self-signed certificates.  \nIf the server requires SSL verification and there is no valid certificate or this is False then login will fail.","parentclassname":"CouchServer","codesamplehtml":"Dim server As New CouchServer() &lt;br /&gt; &lt;br /&gt;server.CertificatePath = &amp;quot;filepath to your certificate&amp;quot; ", "attributes":["SET_CONST"], "signatureelements":["Property","Set"]},{"label":"Password","comment":"Password used when logging into a CouchDB Server ","valuetype":"String","filenamebase":"Password_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Set.Password","codesample":"Dim server As New CouchServer() \nserver.Password = |Your CouchDB Password|","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set Password As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Password used when logging into a CouchDB Server &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Password used when logging into a CouchDB Server ","inlinecomment":" \t &apos; Password used when logging into a CouchDB Server ","parentclassname":"CouchServer","codesamplehtml":"Dim server As New CouchServer() &lt;br /&gt;server.Password = |Your CouchDB Password|", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Set"]},{"label":"SSLHostValidationOn","comment":"Turn on or off SSL host validation. If the server requires SSL verification and there is no valid certificate or this is False then login will fail.\n \nSettng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.\nDefault value is True.","valuetype":"Boolean","filenamebase":"SSLHostValidationOn_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Set.SSLHostValidationOn","codesample":"Dim server as new CouchServer() \nserver.SSLHostValidationOn = True ","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set SSLHostValidationOn As Boolean","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Turn on or off SSL host validation. If the server requires SSL verification and there is no valid certificate or this is False then login will fail.&lt;br /&gt; &lt;br /&gt;Settng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.&lt;br /&gt;Default value is True.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Turn on or off SSL host validation. If the server requires SSL verification and there is no valid certificate or this is False then login will fail.&lt;br /&gt; &lt;br /&gt;Settng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.&lt;br /&gt;Default value is True.","inlinecomment":" \t &apos; Turn on or off SSL host validation. If the server requires SSL verification and there is no valid certificate or this is False then login will fail.\n \nSettng SSLHostValidationOn to false can be used for internal HTTPS URLs on servers with self-signed certs.\nDefault value is True.","parentclassname":"CouchServer","codesamplehtml":"Dim server as new CouchServer() &lt;br /&gt;server.SSLHostValidationOn = True ", "signatureelements":["Property","Set"]},{"label":"URL","comment":"URL Used to access the CouchDB Server","valuetype":"String","filenamebase":"URL_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Set.URL","codesample":"Dim server As New CouchServer() \nserver.URL = |URL for your CouchDB Server|","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set URL As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;URL Used to access the CouchDB Server&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"URL Used to access the CouchDB Server","inlinecomment":" \t &apos; URL Used to access the CouchDB Server","parentclassname":"CouchServer","codesamplehtml":"Dim server As New CouchServer() &lt;br /&gt;server.URL = |URL for your CouchDB Server|", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Set"]},{"label":"User","comment":"User name used when logging into a CouchDB Server","valuetype":"String","filenamebase":"User_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Set.User","codesample":"Dim server As New CouchServer() \nserver.User = |Your CouchDB User Name|","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set User As String","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;User name used when logging into a CouchDB Server&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"User name used when logging into a CouchDB Server","inlinecomment":" \t &apos; User name used when logging into a CouchDB Server","parentclassname":"CouchServer","codesamplehtml":"Dim server As New CouchServer() &lt;br /&gt;server.User = |Your CouchDB User Name|", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Set"]},{"label":"VerboseLogging","comment":"Whether this CouchServer should create a .log file with verbose logging output from libcurl when a request is made. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","valuetype":"Boolean","filenamebase":"VerboseLogging_Method","fqnprefix":"CouchVSE.CouchServer","qn":"Set.VerboseLogging","codesample":"","signaturecode":260,"instancecode":256,"argumentsuffix":"","signature":"Property Set VerboseLogging As Boolean","modifiers":"Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether this CouchServer should create a .log file with verbose logging output from libcurl when a request is made. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether this CouchServer should create a .log file with verbose logging output from libcurl when a request is made. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","inlinecomment":" \t &apos; Whether this CouchServer should create a .log file with verbose logging output from libcurl when a request is made. This is helpful when debugging networking issues related to VPN&amp;apos;s, proxies, self-signed SSL certificates, etc.","parentclassname":"CouchServer","codesamplehtml":"", "attributes":["GET_CONST","SET_CONST"], "signatureelements":["Property","Set"]}]}
