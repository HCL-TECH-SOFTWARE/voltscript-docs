{"VSIDname":"OSUtilsVSE","comment":"","valuetype":"","filenamebase":"OSUtilsVSE_VSID","fqnprefix":"","qn":"OSUtilsVSE","codesample":"","signaturecode":131072,"instancecode":131072,"signature":"VSID OSUtilsVSE","modifiers":"","vsidname":"OSUtilsVSE","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "lsxs":[{"lsxname":"OSUtilsVSE","comment":"LSX for interacting with file system in a way that requires less arcane knowledge","valuetype":"","filenamebase":"OSUtilsVSE_VSE","fqnprefix":"OSUtilsVSE","qn":"OSUtilsVSE","codesample":"","signaturecode":32768,"instancecode":32768,"description":"","codesamplehtml":"","baseid":300,"baseguid":"F6077A93-8A83-4A51-AE44-05464542E9C6","characterset":"UNICODE","lsxcreator":"Paul Withers","signature":"VSE OSUtilsVSE","modifiers":"","lsxname":"OSUtilsVSE","summary":"LSX for interacting with file system in a way that requires less arcane knowledge","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;LSX for interacting with file system in a way that requires less arcane knowledge&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"LSX for interacting with file system in a way that requires less arcane knowledge","inlinecomment":" \t &apos; LSX for interacting with file system in a way that requires less arcane knowledge", "classes":[{"classname":"OSUtils","comment":"Class for interacting with OS elements.\nA &amp;quot;~&amp;quot; at the start of a path will be treated as the current user&amp;apos;s home directory.","valuetype":"","filenamebase":"OSUtils_ObjectClass","fqnprefix":"OSUtilsVSE","qn":"OSUtils","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","projectid":"85258A090061F374862589090039B351","version":3,"classid":"85258A090061F374862589090039D370","lsxclassid":2,"signature":"Public Class OSUtils","modifiers":"Public","classname":"OSUtils","parentclassname":"None","constructorsignature":"Function New() As OSUtils","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class for interacting with OS elements.&lt;br /&gt;A &amp;quot;~&amp;quot; at the start of a path will be treated as the current user&amp;apos;s home directory.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class for interacting with OS elements.&lt;br /&gt;A &amp;quot;~&amp;quot; at the start of a path will be treated as the current user&amp;apos;s home directory.","inlinecomment":" \t &apos; Class for interacting with OS elements.\nA &amp;quot;~&amp;quot; at the start of a path will be treated as the current user&amp;apos;s home directory.","codesamplehtml":"", "methods":[{"label":"GetEnvironment","comment":"Gets an environment variable. OSUtils uses a snapshot of environment variables that is separate to the snapshot used by the core runtime. \nSo if you set an environment variable using OSUtils, you must use OSUtils to retrieve the updated value.","valuetype":"String","filenamebase":"GetEnvironment_Method","fqnprefix":"OSUtilsVSE.OSUtils","qn":"GetEnvironment","codesample":"%REM\n    Getting the home directory the &amp;quot;harder&amp;quot; way. Just use OSutils.homeDir\n%END REM\nDim OSUtils as New OSUtils()\nDim platform as String\nDim envVar as String\nDim homeDir as String\n \nplatform = OSUtils.platform\nSelect Case platform\nCase &amp;quot;Windows64&amp;quot;:\n    envVar = &amp;quot;USERPROFILE&amp;quot;\nCase &amp;quot;LINUX&amp;quot;:\n    envVar = &amp;quot;HOME&amp;quot;\nCase Else\n    Error 1001, &amp;quot;Unexpected platform - &amp;quot; &amp;amp; platform\nEnd Select\n \nPrint OSUtils.getEnvironment(envVar)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(EnvVar As String)","signature":"Function GetEnvironment(EnvVar As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets an environment variable. OSUtils uses a snapshot of environment variables that is separate to the snapshot used by the core runtime. &lt;br /&gt;So if you set an environment variable using OSUtils, you must use OSUtils to retrieve the updated value.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets an environment variable. OSUtils uses a snapshot of environment variables that is separate to the snapshot used by the core runtime. &lt;br /&gt;So if you set an environment variable using OSUtils, you must use OSUtils to retrieve the updated value.","inlinecomment":" \t &apos; Gets an environment variable. OSUtils uses a snapshot of environment variables that is separate to the snapshot used by the core runtime. \nSo if you set an environment variable using OSUtils, you must use OSUtils to retrieve the updated value.","parentclassname":"OSUtils","codesamplehtml":"%REM&lt;br /&gt;    Getting the home directory the &amp;quot;harder&amp;quot; way. Just use OSutils.homeDir&lt;br /&gt;%END REM&lt;br /&gt;Dim OSUtils as New OSUtils()&lt;br /&gt;Dim platform as String&lt;br /&gt;Dim envVar as String&lt;br /&gt;Dim homeDir as String&lt;br /&gt; &lt;br /&gt;platform = OSUtils.platform&lt;br /&gt;Select Case platform&lt;br /&gt;Case &amp;quot;Windows64&amp;quot;:&lt;br /&gt;    envVar = &amp;quot;USERPROFILE&amp;quot;&lt;br /&gt;Case &amp;quot;LINUX&amp;quot;:&lt;br /&gt;    envVar = &amp;quot;HOME&amp;quot;&lt;br /&gt;Case Else&lt;br /&gt;    Error 1001, &amp;quot;Unexpected platform - &amp;quot; &amp;amp; platform&lt;br /&gt;End Select&lt;br /&gt; &lt;br /&gt;Print OSUtils.getEnvironment(envVar)", "signatureelements":["Function"], "arguments":[{"label":"EnvVar","comment":"Environment variable","valuetype":"String","filenamebase":"EnvVar_ValuedElement","fqnprefix":"OSUtilsVSEOSUtilsGetEnvironment","qn":"EnvVar","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Environment variable&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Environment variable","inlinecomment":" \t &apos; Environment variable"}]},{"label":"GetFilesInDir","comment":"Used for standard files only, simple functionality. Dir can loop through files using additional calls to Dir(), \nbut won&amp;apos;t work if you make a call within the loop to Dir() with a different path - i.e. to check a file exists.","valuetype":"String","filenamebase":"GetFilesInDir_Method","fqnprefix":"OSUtilsVSE.OSUtils","qn":"GetFilesInDir","codesample":"%REM\n    The following code gets arrays of files in two different directories, for navigating both at the same time.\n%END REM\nDim OSUtils as New OSUtils()\nDim mainFiles as Variant\nDim childFiles as Variant\nmainFiles = OSUtils.getFilesInDir(CurDir &amp;amp; &amp;quot;/foo&amp;quot;)\nchildFiles = OSUtils.getFilesInDir(CurDir &amp;amp; &amp;quot;/foo/bar&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(DirPath As String, FileSpec As String)","signature":"Function GetFilesInDir(DirPath As String, FileSpec As String) As String Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Used for standard files only, simple functionality. Dir can loop through files using additional calls to Dir(), &lt;br /&gt;but won&amp;apos;t work if you make a call within the loop to Dir() with a different path - i.e. to check a file exists.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Used for standard files only, simple functionality. Dir can loop through files using additional calls to Dir(), &lt;br /&gt;but won&amp;apos;t work if you make a call within the loop to Dir() with a different path - i.e. to check a file exists.","inlinecomment":" \t &apos; Used for standard files only, simple functionality. Dir can loop through files using additional calls to Dir(), \nbut won&amp;apos;t work if you make a call within the loop to Dir() with a different path - i.e. to check a file exists.","parentclassname":"OSUtils","codesamplehtml":"%REM&lt;br /&gt;    The following code gets arrays of files in two different directories, for navigating both at the same time.&lt;br /&gt;%END REM&lt;br /&gt;Dim OSUtils as New OSUtils()&lt;br /&gt;Dim mainFiles as Variant&lt;br /&gt;Dim childFiles as Variant&lt;br /&gt;mainFiles = OSUtils.getFilesInDir(CurDir &amp;amp; &amp;quot;/foo&amp;quot;)&lt;br /&gt;childFiles = OSUtils.getFilesInDir(CurDir &amp;amp; &amp;quot;/foo/bar&amp;quot;)", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"DirPath","comment":"Path to directory, e.g. /temp/foo","valuetype":"String","filenamebase":"DirPath_ValuedElement","fqnprefix":"OSUtilsVSEOSUtilsGetFilesInDir","qn":"DirPath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to directory, e.g. /temp/foo&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to directory, e.g. /temp/foo","inlinecomment":" \t &apos; Path to directory, e.g. /temp/foo"},{"label":"FileSpec","comment":"Mask to match filenames. Asterisk (*) for either the filename or extension designates all files with any character in that position. Question mark (?) designates a single character in that position.","valuetype":"String","filenamebase":"FileSpec_ValuedElement","fqnprefix":"OSUtilsVSEOSUtilsGetFilesInDir","qn":"FileSpec","argumentindex":2,"optionalvalue":"LIT_STR(&quot;&quot;)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Mask to match filenames. Asterisk (*) for either the filename or extension designates all files with any character in that position. Question mark (?) designates a single character in that position.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Mask to match filenames. Asterisk (*) for either the filename or extension designates all files with any character in that position. Question mark (?) designates a single character in that position.","inlinecomment":" \t &apos; Mask to match filenames. Asterisk (*) for either the filename or extension designates all files with any character in that position. Question mark (?) designates a single character in that position.", "attributes":["CONST","OPTIONAL"]}]},{"label":"GetFileSize","comment":"Returns the size of the file, if it exists. Error if it does not exist. ","valuetype":"Double","filenamebase":"GetFileSize_Method","fqnprefix":"OSUtilsVSE.OSUtils","qn":"GetFileSize","codesample":"%REM\n    The following code gets the size of a file.\n%END REM\nDim OSUtils as New OSUtils()\nReturn OSUtils.getFileSize(CurDir &amp;amp; &amp;quot;/foo/bar.txt&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Path As String)","signature":"Function GetFileSize(Path As String) As Double","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns the size of the file, if it exists. Error if it does not exist. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns the size of the file, if it exists. Error if it does not exist. ","inlinecomment":" \t &apos; Returns the size of the file, if it exists. Error if it does not exist. ","parentclassname":"OSUtils","codesamplehtml":"%REM&lt;br /&gt;    The following code gets the size of a file.&lt;br /&gt;%END REM&lt;br /&gt;Dim OSUtils as New OSUtils()&lt;br /&gt;Return OSUtils.getFileSize(CurDir &amp;amp; &amp;quot;/foo/bar.txt&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"Path","comment":"Path to file","valuetype":"String","filenamebase":"Path_ValuedElement","fqnprefix":"OSUtilsVSEOSUtilsGetFileSize","qn":"Path","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to file&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to file","inlinecomment":" \t &apos; Path to file"}]},{"label":"IsDirectory","comment":"Checks whether a directory at the path expected","valuetype":"Boolean","filenamebase":"IsDirectory_Method","fqnprefix":"OSUtilsVSE.OSUtils","qn":"IsDirectory","codesample":"%REM\n    The following code checks if a filepath location is a directory.\n%END REM\nDim OSUtils as New OSUtils\nPrint OSUtils.isDirectory(filePath)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Path As String)","signature":"Function IsDirectory(Path As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks whether a directory at the path expected&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks whether a directory at the path expected","inlinecomment":" \t &apos; Checks whether a directory at the path expected","parentclassname":"OSUtils","codesamplehtml":"%REM&lt;br /&gt;    The following code checks if a filepath location is a directory.&lt;br /&gt;%END REM&lt;br /&gt;Dim OSUtils as New OSUtils&lt;br /&gt;Print OSUtils.isDirectory(filePath)", "signatureelements":["Function"], "arguments":[{"label":"Path","comment":"Path for directory expected, e.g. /temp/foo","valuetype":"String","filenamebase":"Path_ValuedElement","fqnprefix":"OSUtilsVSEOSUtilsIsDirectory","qn":"Path","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path for directory expected, e.g. /temp/foo&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path for directory expected, e.g. /temp/foo","inlinecomment":" \t &apos; Path for directory expected, e.g. /temp/foo"}]},{"label":"IsFile","comment":"Checks whether a file exists at the path","valuetype":"Boolean","filenamebase":"IsFile_Method","fqnprefix":"OSUtilsVSE.OSUtils","qn":"IsFile","codesample":"%REM\n    The following code checks if a filepath location is a file.\n%END REM\nDim OSUtils as New OSUtils\nPrintOSUtils.isFile(filePath)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Path As String)","signature":"Function IsFile(Path As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks whether a file exists at the path&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks whether a file exists at the path","inlinecomment":" \t &apos; Checks whether a file exists at the path","parentclassname":"OSUtils","codesamplehtml":"%REM&lt;br /&gt;    The following code checks if a filepath location is a file.&lt;br /&gt;%END REM&lt;br /&gt;Dim OSUtils as New OSUtils&lt;br /&gt;PrintOSUtils.isFile(filePath)", "signatureelements":["Function"], "arguments":[{"label":"Path","comment":"Path to file, e.g. /temp/foo/foo.bss","valuetype":"String","filenamebase":"Path_ValuedElement","fqnprefix":"OSUtilsVSEOSUtilsIsFile","qn":"Path","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to file, e.g. /temp/foo/foo.bss&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to file, e.g. /temp/foo/foo.bss","inlinecomment":" \t &apos; Path to file, e.g. /temp/foo/foo.bss"}]},{"label":"IsWritable","comment":"Checks whether current user has write permissons to a directory or file","valuetype":"Boolean","filenamebase":"IsWritable_Method","fqnprefix":"OSUtilsVSE.OSUtils","qn":"IsWritable","codesample":"%REM\n    The following code checks if a file location is writable.\n%END REM\nDim OSUtils as New OSUtils\nPrint OSUtils.isWritable(filePath)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Path As String)","signature":"Function IsWritable(Path As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks whether current user has write permissons to a directory or file&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks whether current user has write permissons to a directory or file","inlinecomment":" \t &apos; Checks whether current user has write permissons to a directory or file","parentclassname":"OSUtils","codesamplehtml":"%REM&lt;br /&gt;    The following code checks if a file location is writable.&lt;br /&gt;%END REM&lt;br /&gt;Dim OSUtils as New OSUtils&lt;br /&gt;Print OSUtils.isWritable(filePath)", "signatureelements":["Function"], "arguments":[{"label":"Path","comment":"Path for directory or file expected, e.g. /temp/foo","valuetype":"String","filenamebase":"Path_ValuedElement","fqnprefix":"OSUtilsVSEOSUtilsIsWritable","qn":"Path","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path for directory or file expected, e.g. /temp/foo&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path for directory or file expected, e.g. /temp/foo","inlinecomment":" \t &apos; Path for directory or file expected, e.g. /temp/foo"}]},{"label":"MakeDirectories","comment":"Conditionally attempts to create a directory in the filesystem.\n\t\nChecks for the existence of a directory, and if it does not exist attempts to create it.    Multiple level directories are supported. \n\t\n@return Flag indicating success / failure. True indicates either the directory already exists or was successfully created.","valuetype":"Boolean","filenamebase":"MakeDirectories_Method","fqnprefix":"OSUtilsVSE.OSUtils","qn":"MakeDirectories","codesample":"%REM\n    The following cde creates directories\n%END REM \n  Dim myOS as New OSUtils()\n  Dim myresult as Boolean\n&amp;apos; assuming directory /temp exists and contains a single subfolder &amp;quot;test1&amp;quot; \n  myresult = myOS.makeDirectories(&amp;quot;/temp/test1&amp;quot;)  \n  &amp;apos; myresult is true because  &amp;quot;test1&amp;quot; already exists within &amp;quot;temp&amp;quot;\n  myresult = myOS.makeDirectories(&amp;quot;/temp/foo/bar&amp;quot;) \n  &amp;apos; myresult is true if folder &amp;quot;foo&amp;quot; was successfully created within &amp;quot;temp&amp;quot;, AND folder &amp;quot;bar&amp;quot; was successfully created witihin &amp;quot;foo&amp;quot;.  \n  myresult = myOS.makeDirectories(&amp;quot;/temp/jabberwocky&amp;quot;) \n  &amp;apos; if a failure occurred (such as the user not having the right to create filesystem directories) then myresult would be false. \n ","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Path As String)","signature":"Function MakeDirectories(Path As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Conditionally attempts to create a directory in the filesystem.&lt;br /&gt;\t&lt;br /&gt;Checks for the existence of a directory, and if it does not exist attempts to create it.    Multiple level directories are supported. &lt;br /&gt;\t&lt;br /&gt;@return Flag indicating success / failure. True indicates either the directory already exists or was successfully created.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Conditionally attempts to create a directory in the filesystem.&lt;br /&gt;\t&lt;br /&gt;Checks for the existence of a directory, and if it does not exist attempts to create it.    Multiple level directories are supported. &lt;br /&gt;\t&lt;br /&gt;@return Flag indicating success / failure. True indicates either the directory already exists or was successfully created.","inlinecomment":" \t &apos; Conditionally attempts to create a directory in the filesystem.\n\t\nChecks for the existence of a directory, and if it does not exist attempts to create it.    Multiple level directories are supported. \n\t\n@return Flag indicating success / failure. True indicates either the directory already exists or was successfully created.","parentclassname":"OSUtils","codesamplehtml":"%REM&lt;br /&gt;    The following cde creates directories&lt;br /&gt;%END REM &lt;br /&gt;  Dim myOS as New OSUtils()&lt;br /&gt;  Dim myresult as Boolean&lt;br /&gt;&amp;apos; assuming directory /temp exists and contains a single subfolder &amp;quot;test1&amp;quot; &lt;br /&gt;  myresult = myOS.makeDirectories(&amp;quot;/temp/test1&amp;quot;)  &lt;br /&gt;  &amp;apos; myresult is true because  &amp;quot;test1&amp;quot; already exists within &amp;quot;temp&amp;quot;&lt;br /&gt;  myresult = myOS.makeDirectories(&amp;quot;/temp/foo/bar&amp;quot;) &lt;br /&gt;  &amp;apos; myresult is true if folder &amp;quot;foo&amp;quot; was successfully created within &amp;quot;temp&amp;quot;, AND folder &amp;quot;bar&amp;quot; was successfully created witihin &amp;quot;foo&amp;quot;.  &lt;br /&gt;  myresult = myOS.makeDirectories(&amp;quot;/temp/jabberwocky&amp;quot;) &lt;br /&gt;  &amp;apos; if a failure occurred (such as the user not having the right to create filesystem directories) then myresult would be false. &lt;br /&gt; ", "signatureelements":["Function"], "arguments":[{"label":"Path","comment":"Path to create directory, e.g. /temp/foo/bar.   ","valuetype":"String","filenamebase":"Path_ValuedElement","fqnprefix":"OSUtilsVSEOSUtilsMakeDirectories","qn":"Path","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to create directory, e.g. /temp/foo/bar.   &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to create directory, e.g. /temp/foo/bar.   ","inlinecomment":" \t &apos; Path to create directory, e.g. /temp/foo/bar.   "}]},{"label":"New","comment":"Constructor","valuetype":"OSUtils","filenamebase":"New_Method","fqnprefix":"OSUtilsVSE.OSUtils","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As OSUtils","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor","inlinecomment":" \t &apos; Constructor","parentclassname":"OSUtils","codesamplehtml":"", "signatureelements":["Function"]},{"label":"RegisterVSEPath","comment":"","valuetype":"Boolean","filenamebase":"RegisterVSEPath_Method","fqnprefix":"OSUtilsVSE.OSUtils","qn":"RegisterVSEPath","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function RegisterVSEPath() As Boolean","modifiers":"","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"OSUtils","codesamplehtml":"", "signatureelements":["Function"]},{"label":"RemoveDir","comment":"Removes a directory and potentially all files within it.   ","valuetype":"Boolean","filenamebase":"RemoveDir_Method","fqnprefix":"OSUtilsVSE.OSUtils","qn":"RemoveDir","codesample":"%REM\n    The following code removes directories\n%END REM\nDim OSUtils as New OSUtils()\nDim TestDir as String\nTestDir = CurDir &amp;amp; &amp;quot;/test/output/test1&amp;quot;\nPrint OSUtils.RemoveDir(TestDir)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Path As String, Force As Boolean)","signature":"Function RemoveDir(Path As String, Force As Boolean) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Removes a directory and potentially all files within it.   &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Removes a directory and potentially all files within it.   ","inlinecomment":" \t &apos; Removes a directory and potentially all files within it.   ","parentclassname":"OSUtils","codesamplehtml":"%REM&lt;br /&gt;    The following code removes directories&lt;br /&gt;%END REM&lt;br /&gt;Dim OSUtils as New OSUtils()&lt;br /&gt;Dim TestDir as String&lt;br /&gt;TestDir = CurDir &amp;amp; &amp;quot;/test/output/test1&amp;quot;&lt;br /&gt;Print OSUtils.RemoveDir(TestDir)", "signatureelements":["Function"], "arguments":[{"label":"Path","comment":"Path to directory","valuetype":"String","filenamebase":"Path_ValuedElement","fqnprefix":"OSUtilsVSEOSUtilsRemoveDir","qn":"Path","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to directory&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to directory","inlinecomment":" \t &apos; Path to directory"},{"label":"Force","comment":"Flag indicating whether to remove all files / subfolders in the directory first.  Defaults to FALSE if not included. ","valuetype":"Boolean","filenamebase":"Force_ValuedElement","fqnprefix":"OSUtilsVSEOSUtilsRemoveDir","qn":"Force","argumentindex":2,"optionalvalue":"LSXFalse","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Flag indicating whether to remove all files / subfolders in the directory first.  Defaults to FALSE if not included. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Flag indicating whether to remove all files / subfolders in the directory first.  Defaults to FALSE if not included. ","inlinecomment":" \t &apos; Flag indicating whether to remove all files / subfolders in the directory first.  Defaults to FALSE if not included. ", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"SetEnvironment","comment":"Sets an environment variable, returning success / failure. OSUtils uses a snapshot of environment variables that is separate to the snapshot used by the core runtime. \nSo if you set an environment variable using OSUtils, you must use OSUtils to retrieve the updated value.","valuetype":"Boolean","filenamebase":"SetEnvironment_Method","fqnprefix":"OSUtilsVSE.OSUtils","qn":"SetEnvironment","codesample":"%REM\n    The following code sets an environment variable for the duration of the current code run.\n%END REM\nDim OSUtils as New OSUtils()\nCall OSUtils.setEnvironment(&amp;quot;VOLTSCRIPT_HELLO&amp;quot;, &amp;quot;Hello World&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(EnvVar As String, Value As String)","signature":"Function SetEnvironment(EnvVar As String, Value As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sets an environment variable, returning success / failure. OSUtils uses a snapshot of environment variables that is separate to the snapshot used by the core runtime. &lt;br /&gt;So if you set an environment variable using OSUtils, you must use OSUtils to retrieve the updated value.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sets an environment variable, returning success / failure. OSUtils uses a snapshot of environment variables that is separate to the snapshot used by the core runtime. &lt;br /&gt;So if you set an environment variable using OSUtils, you must use OSUtils to retrieve the updated value.","inlinecomment":" \t &apos; Sets an environment variable, returning success / failure. OSUtils uses a snapshot of environment variables that is separate to the snapshot used by the core runtime. \nSo if you set an environment variable using OSUtils, you must use OSUtils to retrieve the updated value.","parentclassname":"OSUtils","codesamplehtml":"%REM&lt;br /&gt;    The following code sets an environment variable for the duration of the current code run.&lt;br /&gt;%END REM&lt;br /&gt;Dim OSUtils as New OSUtils()&lt;br /&gt;Call OSUtils.setEnvironment(&amp;quot;VOLTSCRIPT_HELLO&amp;quot;, &amp;quot;Hello World&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"EnvVar","comment":"Environment variable to set","valuetype":"String","filenamebase":"EnvVar_ValuedElement","fqnprefix":"OSUtilsVSEOSUtilsSetEnvironment","qn":"EnvVar","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Environment variable to set&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Environment variable to set","inlinecomment":" \t &apos; Environment variable to set"},{"label":"Value","comment":"Value to set for environment variable","valuetype":"String","filenamebase":"Value_ValuedElement","fqnprefix":"OSUtilsVSEOSUtilsSetEnvironment","qn":"Value","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Value to set for environment variable&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Value to set for environment variable","inlinecomment":" \t &apos; Value to set for environment variable"}]},{"label":"HomeDir","comment":"Get the user&amp;apos;s home directory, HOME environment variable on Linux, USERPROFILE on Windows.","valuetype":"String","filenamebase":"HomeDir_Method","fqnprefix":"OSUtilsVSE.OSUtils","qn":"Get.HomeDir","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get HomeDir As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Get the user&amp;apos;s home directory, HOME environment variable on Linux, USERPROFILE on Windows.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Get the user&amp;apos;s home directory, HOME environment variable on Linux, USERPROFILE on Windows.","inlinecomment":" \t &apos; Get the user&amp;apos;s home directory, HOME environment variable on Linux, USERPROFILE on Windows.","parentclassname":"OSUtils","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"Platform","comment":"&amp;quot;W64&amp;quot; or &amp;quot;LINX&amp;quot;, calling and returning the value from getThreadInfo(13).","valuetype":"String","filenamebase":"Platform_Method","fqnprefix":"OSUtilsVSE.OSUtils","qn":"Get.Platform","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get Platform As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;&amp;quot;W64&amp;quot; or &amp;quot;LINX&amp;quot;, calling and returning the value from getThreadInfo(13).&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"&amp;quot;W64&amp;quot; or &amp;quot;LINX&amp;quot;, calling and returning the value from getThreadInfo(13).","inlinecomment":" \t &apos; &amp;quot;W64&amp;quot; or &amp;quot;LINX&amp;quot;, calling and returning the value from getThreadInfo(13).","parentclassname":"OSUtils","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"TempDir","comment":"Gets the temp directory for the operating system.","valuetype":"String","filenamebase":"TempDir_Method","fqnprefix":"OSUtilsVSE.OSUtils","qn":"Get.TempDir","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get TempDir As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets the temp directory for the operating system.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets the temp directory for the operating system.","inlinecomment":" \t &apos; Gets the temp directory for the operating system.","parentclassname":"OSUtils","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]}]},{"classname":"PathUtils","comment":"Class for building up and returning paths.","valuetype":"","filenamebase":"PathUtils_ObjectClass","fqnprefix":"OSUtilsVSE","qn":"PathUtils","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","projectid":"85258A090061F374862589090039B351","version":3,"classid":"85258A090061F37486258909003D5E04","lsxclassid":3,"signature":"Public Class PathUtils","modifiers":"Public","classname":"PathUtils","parentclassname":"None","constructorsignature":"Function New() As PathUtils","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class for building up and returning paths.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class for building up and returning paths.","inlinecomment":" \t &apos; Class for building up and returning paths.","codesamplehtml":"", "methods":[{"label":"AddToPath","comment":"Adds a single directory or a path to the end of the existing Path object. Returns itself for fluid coding","valuetype":"PathUtils","filenamebase":"AddToPath_Method","fqnprefix":"OSUtilsVSE.PathUtils","qn":"AddToPath","codesample":"Dim pathUtils as New PathUtils()\nCall pathUtils.addToPath(CurDir)\nCall pathUtils.addToPath(&amp;quot;temp&amp;quot;)\nCall pathUtils.addToPath(&amp;quot;test&amp;quot;)\nPrint pathUtils.toString()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Path As String)","signature":"Function AddToPath(Path As String) As PathUtils","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds a single directory or a path to the end of the existing Path object. Returns itself for fluid coding&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds a single directory or a path to the end of the existing Path object. Returns itself for fluid coding","inlinecomment":" \t &apos; Adds a single directory or a path to the end of the existing Path object. Returns itself for fluid coding","parentclassname":"PathUtils","codesamplehtml":"Dim pathUtils as New PathUtils()&lt;br /&gt;Call pathUtils.addToPath(CurDir)&lt;br /&gt;Call pathUtils.addToPath(&amp;quot;temp&amp;quot;)&lt;br /&gt;Call pathUtils.addToPath(&amp;quot;test&amp;quot;)&lt;br /&gt;Print pathUtils.toString()", "signatureelements":["Function"], "arguments":[{"label":"Path","comment":"String for path to add, e.g. /temp/foo, or directory, e.g. foo","valuetype":"String","filenamebase":"Path_ValuedElement","fqnprefix":"OSUtilsVSEPathUtilsAddToPath","qn":"Path","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String for path to add, e.g. /temp/foo, or directory, e.g. foo&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String for path to add, e.g. /temp/foo, or directory, e.g. foo","inlinecomment":" \t &apos; String for path to add, e.g. /temp/foo, or directory, e.g. foo"}]},{"label":"GetDirectories","comment":"Retrieves an array where each element is a directory","valuetype":"String","filenamebase":"GetDirectories_Method","fqnprefix":"OSUtilsVSE.PathUtils","qn":"GetDirectories","codesample":"Dim pathUtils as New PathUtils()\nDim dirs as Variant\nCall pathUtils.addToPath(CurDir)\ndirs = pathUtils.getDirectories()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function GetDirectories() As String Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Retrieves an array where each element is a directory&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Retrieves an array where each element is a directory","inlinecomment":" \t &apos; Retrieves an array where each element is a directory","parentclassname":"PathUtils","codesamplehtml":"Dim pathUtils as New PathUtils()&lt;br /&gt;Dim dirs as Variant&lt;br /&gt;Call pathUtils.addToPath(CurDir)&lt;br /&gt;dirs = pathUtils.getDirectories()", "attributes":["Array"], "signatureelements":["Function"]},{"label":"New","comment":"Constructor","valuetype":"PathUtils","filenamebase":"New_Method","fqnprefix":"OSUtilsVSE.PathUtils","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As PathUtils","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor","inlinecomment":" \t &apos; Constructor","parentclassname":"PathUtils","codesamplehtml":"", "signatureelements":["Function"]},{"label":"ToString","comment":"Builds the elements into a string, using the path separator as defined in the current OS","valuetype":"String","filenamebase":"ToString_Method","fqnprefix":"OSUtilsVSE.PathUtils","qn":"ToString","codesample":"Dim pathUtils as New PathUtils()\nCall pathUtils.addToPath(CurDir)\nCall pathUtils.addToPath(&amp;quot;temp&amp;quot;)\nCall pathUtils.addToPath(&amp;quot;test&amp;quot;)\nPrint pathUtils.toString()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function ToString() As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Builds the elements into a string, using the path separator as defined in the current OS&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Builds the elements into a string, using the path separator as defined in the current OS","inlinecomment":" \t &apos; Builds the elements into a string, using the path separator as defined in the current OS","parentclassname":"PathUtils","codesamplehtml":"Dim pathUtils as New PathUtils()&lt;br /&gt;Call pathUtils.addToPath(CurDir)&lt;br /&gt;Call pathUtils.addToPath(&amp;quot;temp&amp;quot;)&lt;br /&gt;Call pathUtils.addToPath(&amp;quot;test&amp;quot;)&lt;br /&gt;Print pathUtils.toString()", "signatureelements":["Function"]}]}], "platforms":["LINUX","W64"]}]}
