{"VSIDname":"HashVSE","comment":"","valuetype":"","filenamebase":"HashVSE_VSID","fqnprefix":"","qn":"HashVSE","codesample":"","signaturecode":131072,"instancecode":131072,"signature":"VSID HashVSE","modifiers":"","vsidname":"HashVSE","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "lsxs":[{"lsxname":"HashVSE","comment":"","valuetype":"","filenamebase":"HashVSE_VSE","fqnprefix":"HashVSE","qn":"HashVSE","codesample":"","signaturecode":32768,"instancecode":32768,"description":"","codesamplehtml":"","baseid":300,"baseguid":"1E75725C-29AA-448D-9764-41521703F0EB","characterset":"UNICODE","lsxcreator":"Bob Balaban","signature":"VSE HashVSE","modifiers":"","lsxname":"HashVSE","summary":"","commentblock":"","commenthtml":"","inlinecomment":"", "classes":[{"classname":"CryptoUtilities","comment":"Utility class to create AES keys and encrypt / decrypt files","valuetype":"","filenamebase":"CryptoUtilities_ObjectClass","fqnprefix":"HashVSE","qn":"CryptoUtilities","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","projectid":"48258A080063683D8525894900502705","version":3,"classid":"48258A080063683D8525894E0071B9B3","lsxclassid":3,"signature":"Public Class CryptoUtilities","modifiers":"Public","classname":"CryptoUtilities","parentclassname":"None","constructorsignature":"Function New() As CryptoUtilities","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Utility class to create AES keys and encrypt / decrypt files&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Utility class to create AES keys and encrypt / decrypt files","inlinecomment":" \t &apos; Utility class to create AES keys and encrypt / decrypt files","codesamplehtml":"", "methods":[{"label":"BytesToText","comment":"Convert byte array to string","valuetype":"String","filenamebase":"BytesToText_Method","fqnprefix":"HashVSE.CryptoUtilities","qn":"BytesToText","codesample":"&amp;apos; Decrypts an encrypted byte array and converts the resulting clear byte array to a string\nDim cu as New CryptoUtilities()\nDim publicKeyBytes as Variant\nDim clearBytes as Variant\nDim encryptedBytes as Variant\nDim loremString as String\n&amp;apos; encryptedBytes loaded from somewhere\npublicKeyBytes = cu.PKCIReadPublicKeyFile(CurDir &amp;amp; &amp;quot;user-id.pub&amp;quot;)\nclearBytes = cu.PKCIDecryptBuffer(publicKeyBytes, encryptedBytes)\nloremString = BytesToText(clearBytes)","signaturecode":64,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(Bytes As Variant)","signature":"Function BytesToText(Bytes As Variant) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Convert byte array to string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Convert byte array to string","inlinecomment":" \t &apos; Convert byte array to string","parentclassname":"CryptoUtilities","codesamplehtml":"&amp;apos; Decrypts an encrypted byte array and converts the resulting clear byte array to a string&lt;br /&gt;Dim cu as New CryptoUtilities()&lt;br /&gt;Dim publicKeyBytes as Variant&lt;br /&gt;Dim clearBytes as Variant&lt;br /&gt;Dim encryptedBytes as Variant&lt;br /&gt;Dim loremString as String&lt;br /&gt;&amp;apos; encryptedBytes loaded from somewhere&lt;br /&gt;publicKeyBytes = cu.PKCIReadPublicKeyFile(CurDir &amp;amp; &amp;quot;user-id.pub&amp;quot;)&lt;br /&gt;clearBytes = cu.PKCIDecryptBuffer(publicKeyBytes, encryptedBytes)&lt;br /&gt;loremString = BytesToText(clearBytes)", "signatureelements":["Function"], "arguments":[{"label":"Bytes","comment":"Byte array","valuetype":"Variant","filenamebase":"Bytes_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesBytesToText","qn":"Bytes","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Byte array","inlinecomment":" \t &apos; Byte array"}]},{"label":"CreateAES128Key","comment":"Creates a 128-bit AES key. ","valuetype":"Byte","filenamebase":"CreateAES128Key_Method","fqnprefix":"HashVSE.CryptoUtilities","qn":"CreateAES128Key","codesample":"%REM\n    The following code creates an initialization vector and AES 128-bit key, then encrypts a file with them.\n%END REM\nDim cu as New CryptoUtilities()\nDim iv as Variant\nDim key as Variant\niv = cu.createAESIV()\nkey = cu.createAES128Key()\nCall cu.fileEncryptAES(&amp;quot;test.txt&amp;quot;, &amp;quot;test_out.txt&amp;quot;, iv, key, True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function CreateAES128Key() As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a 128-bit AES key. &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a 128-bit AES key. ","inlinecomment":" \t &apos; Creates a 128-bit AES key. ","parentclassname":"CryptoUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates an initialization vector and AES 128-bit key, then encrypts a file with them.&lt;br /&gt;%END REM&lt;br /&gt;Dim cu as New CryptoUtilities()&lt;br /&gt;Dim iv as Variant&lt;br /&gt;Dim key as Variant&lt;br /&gt;iv = cu.createAESIV()&lt;br /&gt;key = cu.createAES128Key()&lt;br /&gt;Call cu.fileEncryptAES(&amp;quot;test.txt&amp;quot;, &amp;quot;test_out.txt&amp;quot;, iv, key, True)", "attributes":["Array"], "signatureelements":["Function"]},{"label":"CreateAES256Key","comment":"Creates a 256-bit AES key.","valuetype":"Byte","filenamebase":"CreateAES256Key_Method","fqnprefix":"HashVSE.CryptoUtilities","qn":"CreateAES256Key","codesample":"%REM\n    The following code creates an initialization vector and AES 256-bit key, then encrypts a file with them.\n%END REM\nDim cu as New CryptoUtilities()\nDim iv as Variant\nDim key as Variant\niv = cu.createAESIV()\nkey = cu.createAES256Key()\nCall cu.fileEncryptAES(&amp;quot;test.txt&amp;quot;, &amp;quot;test_out.txt&amp;quot;, iv, key, True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function CreateAES256Key() As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a 256-bit AES key.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a 256-bit AES key.","inlinecomment":" \t &apos; Creates a 256-bit AES key.","parentclassname":"CryptoUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates an initialization vector and AES 256-bit key, then encrypts a file with them.&lt;br /&gt;%END REM&lt;br /&gt;Dim cu as New CryptoUtilities()&lt;br /&gt;Dim iv as Variant&lt;br /&gt;Dim key as Variant&lt;br /&gt;iv = cu.createAESIV()&lt;br /&gt;key = cu.createAES256Key()&lt;br /&gt;Call cu.fileEncryptAES(&amp;quot;test.txt&amp;quot;, &amp;quot;test_out.txt&amp;quot;, iv, key, True)", "attributes":["Array"], "signatureelements":["Function"]},{"label":"CreateAESIV","comment":"Creates an AES initialization vector, required for encryption / decryption.","valuetype":"Byte","filenamebase":"CreateAESIV_Method","fqnprefix":"HashVSE.CryptoUtilities","qn":"CreateAESIV","codesample":"%REM\n    The following code creates an initialization vector and AES 256-bit key, then encrypts a file with them.\n%END REM\nDim cu as New CryptoUtilities()\nDim iv as Variant\nDim key as Variant\niv = cu.createAESIV()\nkey = cu.createAES256Key()\nCall cu.fileEncryptAES(&amp;quot;test.txt&amp;quot;, &amp;quot;test_out.txt&amp;quot;, iv, key, True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function CreateAESIV() As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates an AES initialization vector, required for encryption / decryption.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates an AES initialization vector, required for encryption / decryption.","inlinecomment":" \t &apos; Creates an AES initialization vector, required for encryption / decryption.","parentclassname":"CryptoUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates an initialization vector and AES 256-bit key, then encrypts a file with them.&lt;br /&gt;%END REM&lt;br /&gt;Dim cu as New CryptoUtilities()&lt;br /&gt;Dim iv as Variant&lt;br /&gt;Dim key as Variant&lt;br /&gt;iv = cu.createAESIV()&lt;br /&gt;key = cu.createAES256Key()&lt;br /&gt;Call cu.fileEncryptAES(&amp;quot;test.txt&amp;quot;, &amp;quot;test_out.txt&amp;quot;, iv, key, True)", "attributes":["Array"], "signatureelements":["Function"]},{"label":"CreatePKCIKey","comment":"Creates a PKCI public and private key pair, used for encrypting files.","valuetype":"Boolean","filenamebase":"CreatePKCIKey_Method","fqnprefix":"HashVSE.CryptoUtilities","qn":"CreatePKCIKey","codesample":"&amp;apos; Creates a new private and public key pair, passing success / failure to result variable\nDim result as boolean\nDim cu as New CryptoUtilities()\nresult = cu.createPKCIKey(CurDir &amp;amp; &amp;quot;user-id&amp;quot;, CurDir &amp;amp; &amp;quot;user-id.pub&amp;quot;, &amp;quot;SuperSecretPa$$word&amp;quot;, 4096)","signaturecode":64,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(PrivateKeyPath As String, PublicKeyPath As String, Password As String, BitLength As Integer)","signature":"Function CreatePKCIKey(PrivateKeyPath As String, PublicKeyPath As String, Password As String, BitLength As Integer) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a PKCI public and private key pair, used for encrypting files.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a PKCI public and private key pair, used for encrypting files.","inlinecomment":" \t &apos; Creates a PKCI public and private key pair, used for encrypting files.","parentclassname":"CryptoUtilities","codesamplehtml":"&amp;apos; Creates a new private and public key pair, passing success / failure to result variable&lt;br /&gt;Dim result as boolean&lt;br /&gt;Dim cu as New CryptoUtilities()&lt;br /&gt;result = cu.createPKCIKey(CurDir &amp;amp; &amp;quot;user-id&amp;quot;, CurDir &amp;amp; &amp;quot;user-id.pub&amp;quot;, &amp;quot;SuperSecretPa$$word&amp;quot;, 4096)", "signatureelements":["Function"], "arguments":[{"label":"PrivateKeyPath","comment":"Output file for private key","valuetype":"String","filenamebase":"PrivateKeyPath_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesCreatePKCIKey","qn":"PrivateKeyPath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Output file for private key&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Output file for private key","inlinecomment":" \t &apos; Output file for private key"},{"label":"PublicKeyPath","comment":"Output file for public key","valuetype":"String","filenamebase":"PublicKeyPath_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesCreatePKCIKey","qn":"PublicKeyPath","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Output file for public key&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Output file for public key","inlinecomment":" \t &apos; Output file for public key"},{"label":"Password","comment":"Optional key file password","valuetype":"String","filenamebase":"Password_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesCreatePKCIKey","qn":"Password","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Optional key file password&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Optional key file password","inlinecomment":" \t &apos; Optional key file password", "attributes":["CONST","OPTIONAL"]},{"label":"BitLength","comment":"Optional size of key","valuetype":"Integer-Unsigned","filenamebase":"BitLength_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesCreatePKCIKey","qn":"BitLength","argumentindex":4,"optionalvalue":4096,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Optional size of key&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Optional size of key","inlinecomment":" \t &apos; Optional size of key", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"FileDecryptAES","comment":"Takes a file at a source location and creates an AES decrypted version at a target location, using a passed AES initialization vector and key, \noptionally overwriting any file at the target location. You will need to use the same initialization vector and key with which the file was encrypted.","valuetype":"Boolean","filenamebase":"FileDecryptAES_Method","fqnprefix":"HashVSE.CryptoUtilities","qn":"FileDecryptAES","codesample":"%REM\n    The following code decrypts a file with an initialization vector and key provided by the person who encrypted the file.\n%END REM\nDim hu as New HashUtilities()\nDim cu as New CryptoUtilities()\nDim iv as Variant\nDim key as Variant\niv = hu.stringToBytes(passedIv)    &amp;apos; Using the initialization vector received from whoever encrypted the file\nkey = hu.stringToBytes(passedKey)  &amp;apos; Using the key received from whoever encrypted the file\nCall cu.fileDecryptAES(&amp;quot;test_enc.txt&amp;quot;, &amp;quot;test_dec.txt&amp;quot;, iv, key, True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(InputFile As String, OutputFile As String, AESIV As Variant, AESKey As Variant, Overwrite As Boolean)","signature":"Function FileDecryptAES(InputFile As String, OutputFile As String, AESIV As Variant, AESKey As Variant, Overwrite As Boolean) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Takes a file at a source location and creates an AES decrypted version at a target location, using a passed AES initialization vector and key, &lt;br /&gt;optionally overwriting any file at the target location. You will need to use the same initialization vector and key with which the file was encrypted.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Takes a file at a source location and creates an AES decrypted version at a target location, using a passed AES initialization vector and key, &lt;br /&gt;optionally overwriting any file at the target location. You will need to use the same initialization vector and key with which the file was encrypted.","inlinecomment":" \t &apos; Takes a file at a source location and creates an AES decrypted version at a target location, using a passed AES initialization vector and key, \noptionally overwriting any file at the target location. You will need to use the same initialization vector and key with which the file was encrypted.","parentclassname":"CryptoUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code decrypts a file with an initialization vector and key provided by the person who encrypted the file.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim cu as New CryptoUtilities()&lt;br /&gt;Dim iv as Variant&lt;br /&gt;Dim key as Variant&lt;br /&gt;iv = hu.stringToBytes(passedIv)    &amp;apos; Using the initialization vector received from whoever encrypted the file&lt;br /&gt;key = hu.stringToBytes(passedKey)  &amp;apos; Using the key received from whoever encrypted the file&lt;br /&gt;Call cu.fileDecryptAES(&amp;quot;test_enc.txt&amp;quot;, &amp;quot;test_dec.txt&amp;quot;, iv, key, True)", "signatureelements":["Function"], "arguments":[{"label":"InputFile","comment":"Source file location","valuetype":"String","filenamebase":"InputFile_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesFileDecryptAES","qn":"InputFile","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Source file location&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Source file location","inlinecomment":" \t &apos; Source file location"},{"label":"OutputFile","comment":"Target file location","valuetype":"String","filenamebase":"OutputFile_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesFileDecryptAES","qn":"OutputFile","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Target file location&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Target file location","inlinecomment":" \t &apos; Target file location"},{"label":"AESIV","comment":"AES initialization vector as byte array","valuetype":"Variant","filenamebase":"AESIV_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesFileDecryptAES","qn":"AESIV","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;AES initialization vector as byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"AES initialization vector as byte array","inlinecomment":" \t &apos; AES initialization vector as byte array"},{"label":"AESKey","comment":"AES key as byte array","valuetype":"Variant","filenamebase":"AESKey_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesFileDecryptAES","qn":"AESKey","argumentindex":4,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;AES key as byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"AES key as byte array","inlinecomment":" \t &apos; AES key as byte array"},{"label":"Overwrite","comment":"Whether or not to overwrite any existin file at the target location, default value is false","valuetype":"Boolean","filenamebase":"Overwrite_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesFileDecryptAES","qn":"Overwrite","argumentindex":5,"optionalvalue":"LSXFalse","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether or not to overwrite any existin file at the target location, default value is false&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether or not to overwrite any existin file at the target location, default value is false","inlinecomment":" \t &apos; Whether or not to overwrite any existin file at the target location, default value is false", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"FileEncryptAES","comment":"Takes a file at a source location and creates an AES encrypted version at a target location, using a passed AES initialization vector and key, \noptionally overwriting any file at the target location. Anyone trying to decrypt the file will need the same initialization vector and key with which the file was encrypted.","valuetype":"Boolean","filenamebase":"FileEncryptAES_Method","fqnprefix":"HashVSE.CryptoUtilities","qn":"FileEncryptAES","codesample":"%REM\n    The following code creates an initialization vector and AES 256-bit key, then encrypts a file with them.\n%END REM\nDim cu as New CryptoUtilities()\nDim iv as Variant\nDim key as Variant\niv = cu.createAESIV()\nkey = cu.createAES256Key()\nCall cu.fileEncryptAES(&amp;quot;test.txt&amp;quot;, &amp;quot;test_out.txt&amp;quot;, iv, key, True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(InputFile As String, OutputFile As String, AESIV As Variant, AESKey As Variant, Overwrite As Boolean)","signature":"Function FileEncryptAES(InputFile As String, OutputFile As String, AESIV As Variant, AESKey As Variant, Overwrite As Boolean) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Takes a file at a source location and creates an AES encrypted version at a target location, using a passed AES initialization vector and key, &lt;br /&gt;optionally overwriting any file at the target location. Anyone trying to decrypt the file will need the same initialization vector and key with which the file was encrypted.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Takes a file at a source location and creates an AES encrypted version at a target location, using a passed AES initialization vector and key, &lt;br /&gt;optionally overwriting any file at the target location. Anyone trying to decrypt the file will need the same initialization vector and key with which the file was encrypted.","inlinecomment":" \t &apos; Takes a file at a source location and creates an AES encrypted version at a target location, using a passed AES initialization vector and key, \noptionally overwriting any file at the target location. Anyone trying to decrypt the file will need the same initialization vector and key with which the file was encrypted.","parentclassname":"CryptoUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates an initialization vector and AES 256-bit key, then encrypts a file with them.&lt;br /&gt;%END REM&lt;br /&gt;Dim cu as New CryptoUtilities()&lt;br /&gt;Dim iv as Variant&lt;br /&gt;Dim key as Variant&lt;br /&gt;iv = cu.createAESIV()&lt;br /&gt;key = cu.createAES256Key()&lt;br /&gt;Call cu.fileEncryptAES(&amp;quot;test.txt&amp;quot;, &amp;quot;test_out.txt&amp;quot;, iv, key, True)", "signatureelements":["Function"], "arguments":[{"label":"InputFile","comment":"Source file location","valuetype":"String","filenamebase":"InputFile_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesFileEncryptAES","qn":"InputFile","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Source file location&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Source file location","inlinecomment":" \t &apos; Source file location"},{"label":"OutputFile","comment":"Target file location","valuetype":"String","filenamebase":"OutputFile_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesFileEncryptAES","qn":"OutputFile","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Target file location&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Target file location","inlinecomment":" \t &apos; Target file location"},{"label":"AESIV","comment":"AES initialization vector as byte array","valuetype":"Variant","filenamebase":"AESIV_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesFileEncryptAES","qn":"AESIV","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;AES initialization vector as byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"AES initialization vector as byte array","inlinecomment":" \t &apos; AES initialization vector as byte array"},{"label":"AESKey","comment":"AES key as byte array","valuetype":"Variant","filenamebase":"AESKey_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesFileEncryptAES","qn":"AESKey","argumentindex":4,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;AES key as byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"AES key as byte array","inlinecomment":" \t &apos; AES key as byte array"},{"label":"Overwrite","comment":"Whether or not to overwrite any existin file at the target location, default value is false","valuetype":"Boolean","filenamebase":"Overwrite_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesFileEncryptAES","qn":"Overwrite","argumentindex":5,"optionalvalue":"LSXFalse","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether or not to overwrite any existin file at the target location, default value is false&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether or not to overwrite any existin file at the target location, default value is false","inlinecomment":" \t &apos; Whether or not to overwrite any existin file at the target location, default value is false", "attributes":["OPTIONAL","BY_VAL"]}]},{"label":"New","comment":"Contructor","valuetype":"CryptoUtilities","filenamebase":"New_Method","fqnprefix":"HashVSE.CryptoUtilities","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As CryptoUtilities","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Contructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Contructor","inlinecomment":" \t &apos; Contructor","parentclassname":"CryptoUtilities","codesamplehtml":"", "signatureelements":["Function"]},{"label":"PKCIDecryptBuffer","comment":"Decrypts a byte array using a key","valuetype":"Byte","filenamebase":"PKCIDecryptBuffer_Method","fqnprefix":"HashVSE.CryptoUtilities","qn":"PKCIDecryptBuffer","codesample":"&amp;apos; Decrypts an encrypted byte array using the relevant key and returns the decrypted byte array converted back to a string\nDim cu as New CryptoUtilities()\nDim publicKeyBytes as Variant\nDim clearBytes as Variant\nDim encryptedBytes as Variant\nDim loremString as String\n&amp;apos; encryptedBytes loaded from somewhere\npublicKeyBytes = cu.PKCIReadPublicKeyFile(CurDir &amp;amp; &amp;quot;user-id.pub&amp;quot;)\nclearBytes = cu.PKCIDecryptBuffer(publicKeyBytes, encryptedBytes)\nloremString = BytesToText(clearBytes)\nReturn loremString","signaturecode":64,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(Key As Variant, InputData As Variant)","signature":"Function PKCIDecryptBuffer(Key As Variant, InputData As Variant) As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Decrypts a byte array using a key&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Decrypts a byte array using a key","inlinecomment":" \t &apos; Decrypts a byte array using a key","parentclassname":"CryptoUtilities","codesamplehtml":"&amp;apos; Decrypts an encrypted byte array using the relevant key and returns the decrypted byte array converted back to a string&lt;br /&gt;Dim cu as New CryptoUtilities()&lt;br /&gt;Dim publicKeyBytes as Variant&lt;br /&gt;Dim clearBytes as Variant&lt;br /&gt;Dim encryptedBytes as Variant&lt;br /&gt;Dim loremString as String&lt;br /&gt;&amp;apos; encryptedBytes loaded from somewhere&lt;br /&gt;publicKeyBytes = cu.PKCIReadPublicKeyFile(CurDir &amp;amp; &amp;quot;user-id.pub&amp;quot;)&lt;br /&gt;clearBytes = cu.PKCIDecryptBuffer(publicKeyBytes, encryptedBytes)&lt;br /&gt;loremString = BytesToText(clearBytes)&lt;br /&gt;Return loremString", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"Key","comment":"Byte array","valuetype":"Variant","filenamebase":"Key_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesPKCIDecryptBuffer","qn":"Key","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Byte array","inlinecomment":" \t &apos; Byte array"},{"label":"InputData","comment":"Byte array","valuetype":"Variant","filenamebase":"InputData_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesPKCIDecryptBuffer","qn":"InputData","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Byte array","inlinecomment":" \t &apos; Byte array"}]},{"label":"PKCIDecryptFile","comment":"Decrypts a file with a PKCI key file","valuetype":"Boolean","filenamebase":"PKCIDecryptFile_Method","fqnprefix":"HashVSE.CryptoUtilities","qn":"PKCIDecryptFile","codesample":"&amp;apos; Decrypts a file with a private key file\nDim cu as New CryptoUtilities()\nCall cu.PKCIDecryptFile(CurDir &amp;amp; &amp;quot;user-id&amp;quot;, CurDir &amp;amp; &amp;quot;superSecretFile&amp;quot;, CurDir &amp;amp; &amp;quot;clearFile&amp;quot;, True, &amp;quot;SuperSecretPa$$word&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(KeyFilePath As String, InputFilePath As String, OutputFilePath As String, ForceWrite As Boolean, Password As String)","signature":"Function PKCIDecryptFile(KeyFilePath As String, InputFilePath As String, OutputFilePath As String, ForceWrite As Boolean, Password As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Decrypts a file with a PKCI key file&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Decrypts a file with a PKCI key file","inlinecomment":" \t &apos; Decrypts a file with a PKCI key file","parentclassname":"CryptoUtilities","codesamplehtml":"&amp;apos; Decrypts a file with a private key file&lt;br /&gt;Dim cu as New CryptoUtilities()&lt;br /&gt;Call cu.PKCIDecryptFile(CurDir &amp;amp; &amp;quot;user-id&amp;quot;, CurDir &amp;amp; &amp;quot;superSecretFile&amp;quot;, CurDir &amp;amp; &amp;quot;clearFile&amp;quot;, True, &amp;quot;SuperSecretPa$$word&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"KeyFilePath","comment":"Must be private key","valuetype":"String","filenamebase":"KeyFilePath_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesPKCIDecryptFile","qn":"KeyFilePath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Must be private key&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Must be private key","inlinecomment":" \t &apos; Must be private key"},{"label":"InputFilePath","comment":"Path to the file to decrypt","valuetype":"String","filenamebase":"InputFilePath_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesPKCIDecryptFile","qn":"InputFilePath","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to the file to decrypt&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to the file to decrypt","inlinecomment":" \t &apos; Path to the file to decrypt"},{"label":"OutputFilePath","comment":"Path to write the decrypted file","valuetype":"String","filenamebase":"OutputFilePath_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesPKCIDecryptFile","qn":"OutputFilePath","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to write the decrypted file&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to write the decrypted file","inlinecomment":" \t &apos; Path to write the decrypted file"},{"label":"ForceWrite","comment":"Whether to overwrite, if a file exists at the output location","valuetype":"Boolean","filenamebase":"ForceWrite_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesPKCIDecryptFile","qn":"ForceWrite","argumentindex":4,"optionalvalue":"LSXFalse","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether to overwrite, if a file exists at the output location&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether to overwrite, if a file exists at the output location","inlinecomment":" \t &apos; Whether to overwrite, if a file exists at the output location", "attributes":["CONST","OPTIONAL","BY_VAL"]},{"label":"Password","comment":"Password for the key file, if it was generated with a password","valuetype":"String","filenamebase":"Password_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesPKCIDecryptFile","qn":"Password","argumentindex":5,"optionalvalue":"LIT_STR(&quot;&quot;)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Password for the key file, if it was generated with a password&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Password for the key file, if it was generated with a password","inlinecomment":" \t &apos; Password for the key file, if it was generated with a password", "attributes":["CONST","OPTIONAL"]}]},{"label":"PKCIEncryptBuffer","comment":"Encrypts a byte array with the byte array of a key that is either private or public","valuetype":"Byte","filenamebase":"PKCIEncryptBuffer_Method","fqnprefix":"HashVSE.CryptoUtilities","qn":"PKCIEncryptBuffer","codesample":"&amp;apos; Encrypts lorem ipsum string with a private key, returning the byte array of encrypted data\nDim cu as New CryptoUtilities()\nDim publicKeyBytes as Variant\nDim clearBytes as Variant\nDim encryptedBytes as Variant\npublicKeyBytes = cu.PKCIReadPublicKeyFile(CurDir &amp;amp; &amp;quot;user-id.pub&amp;quot;)\nclearBytes = cu.textToBytes(&amp;quot;Lorem ipsum dolor sit amet&amp;quot;)\nencryptedBytes = cu.PKCIEncryptBuffer(publicKeyBytes, false, clearBytes)\nReturn encryptedBytes","signaturecode":64,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(Key As Variant, KeyIsPrivate As Boolean, InputData As Variant)","signature":"Function PKCIEncryptBuffer(Key As Variant, KeyIsPrivate As Boolean, InputData As Variant) As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Encrypts a byte array with the byte array of a key that is either private or public&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Encrypts a byte array with the byte array of a key that is either private or public","inlinecomment":" \t &apos; Encrypts a byte array with the byte array of a key that is either private or public","parentclassname":"CryptoUtilities","codesamplehtml":"&amp;apos; Encrypts lorem ipsum string with a private key, returning the byte array of encrypted data&lt;br /&gt;Dim cu as New CryptoUtilities()&lt;br /&gt;Dim publicKeyBytes as Variant&lt;br /&gt;Dim clearBytes as Variant&lt;br /&gt;Dim encryptedBytes as Variant&lt;br /&gt;publicKeyBytes = cu.PKCIReadPublicKeyFile(CurDir &amp;amp; &amp;quot;user-id.pub&amp;quot;)&lt;br /&gt;clearBytes = cu.textToBytes(&amp;quot;Lorem ipsum dolor sit amet&amp;quot;)&lt;br /&gt;encryptedBytes = cu.PKCIEncryptBuffer(publicKeyBytes, false, clearBytes)&lt;br /&gt;Return encryptedBytes", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"Key","comment":"Byte array","valuetype":"Variant","filenamebase":"Key_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesPKCIEncryptBuffer","qn":"Key","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Byte array","inlinecomment":" \t &apos; Byte array"},{"label":"KeyIsPrivate","comment":"","valuetype":"Boolean","filenamebase":"KeyIsPrivate_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesPKCIEncryptBuffer","qn":"KeyIsPrivate","argumentindex":2,"commentblock":"","commenthtml":"","inlinecomment":"", "attributes":["BY_VAL"]},{"label":"InputData","comment":"Byte array","valuetype":"Variant","filenamebase":"InputData_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesPKCIEncryptBuffer","qn":"InputData","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Byte array","inlinecomment":" \t &apos; Byte array"}]},{"label":"PKCIEncryptFile","comment":"Encrypts a file ","valuetype":"Boolean","filenamebase":"PKCIEncryptFile_Method","fqnprefix":"HashVSE.CryptoUtilities","qn":"PKCIEncryptFile","codesample":"&amp;apos; Encrypts a file with a private key file\nDim cu as New CryptoUtilities()\nCall cu.createPKCIKey(CurDir &amp;amp; &amp;quot;user-id&amp;quot;, CurDir &amp;amp; &amp;quot;user-id.pub&amp;quot;, &amp;quot;SuperSecretPa$$word&amp;quot;, 4096)\nCall cu.PKCIEncryptFile(CurDir &amp;amp; &amp;quot;user-id&amp;quot;, True, CurDir &amp;amp; &amp;quot;clearFile&amp;quot;, CurDir &amp;amp; &amp;quot;superSecretFile&amp;quot;, True, &amp;quot;SuperSecretPa$$word&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(KeyFilePath As String, KeyIsPrivate As Boolean, InputFilePath As String, OutputFilePath As String, ForceWrite As Boolean, Password As String)","signature":"Function PKCIEncryptFile(KeyFilePath As String, KeyIsPrivate As Boolean, InputFilePath As String, OutputFilePath As String, ForceWrite As Boolean, Password As String) As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Encrypts a file &lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Encrypts a file ","inlinecomment":" \t &apos; Encrypts a file ","parentclassname":"CryptoUtilities","codesamplehtml":"&amp;apos; Encrypts a file with a private key file&lt;br /&gt;Dim cu as New CryptoUtilities()&lt;br /&gt;Call cu.createPKCIKey(CurDir &amp;amp; &amp;quot;user-id&amp;quot;, CurDir &amp;amp; &amp;quot;user-id.pub&amp;quot;, &amp;quot;SuperSecretPa$$word&amp;quot;, 4096)&lt;br /&gt;Call cu.PKCIEncryptFile(CurDir &amp;amp; &amp;quot;user-id&amp;quot;, True, CurDir &amp;amp; &amp;quot;clearFile&amp;quot;, CurDir &amp;amp; &amp;quot;superSecretFile&amp;quot;, True, &amp;quot;SuperSecretPa$$word&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"KeyFilePath","comment":"Path to the PKCI key file","valuetype":"String","filenamebase":"KeyFilePath_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesPKCIEncryptFile","qn":"KeyFilePath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to the PKCI key file&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to the PKCI key file","inlinecomment":" \t &apos; Path to the PKCI key file"},{"label":"KeyIsPrivate","comment":"Whether the PKCI key file is private or public","valuetype":"Boolean","filenamebase":"KeyIsPrivate_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesPKCIEncryptFile","qn":"KeyIsPrivate","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether the PKCI key file is private or public&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether the PKCI key file is private or public","inlinecomment":" \t &apos; Whether the PKCI key file is private or public", "attributes":["BY_VAL"]},{"label":"InputFilePath","comment":"Path to the file to encrypt","valuetype":"String","filenamebase":"InputFilePath_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesPKCIEncryptFile","qn":"InputFilePath","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to the file to encrypt&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to the file to encrypt","inlinecomment":" \t &apos; Path to the file to encrypt"},{"label":"OutputFilePath","comment":"Path to write the encrypted file","valuetype":"String","filenamebase":"OutputFilePath_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesPKCIEncryptFile","qn":"OutputFilePath","argumentindex":4,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to write the encrypted file&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to write the encrypted file","inlinecomment":" \t &apos; Path to write the encrypted file"},{"label":"ForceWrite","comment":"Whether to overwrite, if a file exists at the output location","valuetype":"Boolean","filenamebase":"ForceWrite_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesPKCIEncryptFile","qn":"ForceWrite","argumentindex":5,"optionalvalue":"LSXFalse","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether to overwrite, if a file exists at the output location&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether to overwrite, if a file exists at the output location","inlinecomment":" \t &apos; Whether to overwrite, if a file exists at the output location", "attributes":["CONST","OPTIONAL","BY_VAL"]},{"label":"Password","comment":"Password for the key file, if it was generated with a password","valuetype":"String","filenamebase":"Password_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesPKCIEncryptFile","qn":"Password","argumentindex":6,"optionalvalue":"LIT_STR(&quot;&quot;)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Password for the key file, if it was generated with a password&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Password for the key file, if it was generated with a password","inlinecomment":" \t &apos; Password for the key file, if it was generated with a password", "attributes":["CONST","OPTIONAL"]}]},{"label":"PKCIReadPrivateKeyFile","comment":"Convert an RSA private key file on disk to a VoltScript byte array.  Optional password is used to decrypt a password protected key file.","valuetype":"Byte","filenamebase":"PKCIReadPrivateKeyFile_Method","fqnprefix":"HashVSE.CryptoUtilities","qn":"PKCIReadPrivateKeyFile","codesample":"&amp;apos; Decrypts a private key file using the password it was generated with, and passes the decrypted byte array into a variable\nDim cu as new CryptoUtilities()\nDim privateKey as Variant\nprivateKey = cu.PKCIReadPublicKeyFile(CurDir &amp;amp; &amp;quot;user-id&amp;quot;, &amp;quot;SuperSecretPa$$word&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(KeyFilePath As String, Password As String)","signature":"Function PKCIReadPrivateKeyFile(KeyFilePath As String, Password As String) As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Convert an RSA private key file on disk to a VoltScript byte array.  Optional password is used to decrypt a password protected key file.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Convert an RSA private key file on disk to a VoltScript byte array.  Optional password is used to decrypt a password protected key file.","inlinecomment":" \t &apos; Convert an RSA private key file on disk to a VoltScript byte array.  Optional password is used to decrypt a password protected key file.","parentclassname":"CryptoUtilities","codesamplehtml":"&amp;apos; Decrypts a private key file using the password it was generated with, and passes the decrypted byte array into a variable&lt;br /&gt;Dim cu as new CryptoUtilities()&lt;br /&gt;Dim privateKey as Variant&lt;br /&gt;privateKey = cu.PKCIReadPublicKeyFile(CurDir &amp;amp; &amp;quot;user-id&amp;quot;, &amp;quot;SuperSecretPa$$word&amp;quot;)", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"KeyFilePath","comment":"Path to private key file","valuetype":"String","filenamebase":"KeyFilePath_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesPKCIReadPrivateKeyFile","qn":"KeyFilePath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to private key file&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to private key file","inlinecomment":" \t &apos; Path to private key file"},{"label":"Password","comment":"Password file was encrypted with","valuetype":"String","filenamebase":"Password_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesPKCIReadPrivateKeyFile","qn":"Password","argumentindex":2,"optionalvalue":"LIT_STR(&quot;&quot;)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Password file was encrypted with&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Password file was encrypted with","inlinecomment":" \t &apos; Password file was encrypted with", "attributes":["CONST","OPTIONAL"]}]},{"label":"PKCIReadPublicKeyFile","comment":"Convert an RSA public key file on disk to a VoltScript byte array. Public key files are never encrypted, so this is a convenience method.","valuetype":"Byte","filenamebase":"PKCIReadPublicKeyFile_Method","fqnprefix":"HashVSE.CryptoUtilities","qn":"PKCIReadPublicKeyFile","codesample":"&amp;apos; Reads a public key file and passes the corresponding byte array to publicKey variable\nDim cu as new CryptoUtilities()\nDim publicKey as Variant\npublicKey = cu.PKCIReadPublicKeyFile(CurDir &amp;amp; &amp;quot;user-id.pub&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(KeyFilePath As String)","signature":"Function PKCIReadPublicKeyFile(KeyFilePath As String) As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Convert an RSA public key file on disk to a VoltScript byte array. Public key files are never encrypted, so this is a convenience method.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Convert an RSA public key file on disk to a VoltScript byte array. Public key files are never encrypted, so this is a convenience method.","inlinecomment":" \t &apos; Convert an RSA public key file on disk to a VoltScript byte array. Public key files are never encrypted, so this is a convenience method.","parentclassname":"CryptoUtilities","codesamplehtml":"&amp;apos; Reads a public key file and passes the corresponding byte array to publicKey variable&lt;br /&gt;Dim cu as new CryptoUtilities()&lt;br /&gt;Dim publicKey as Variant&lt;br /&gt;publicKey = cu.PKCIReadPublicKeyFile(CurDir &amp;amp; &amp;quot;user-id.pub&amp;quot;)", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"KeyFilePath","comment":"Path to public key file","valuetype":"String","filenamebase":"KeyFilePath_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesPKCIReadPublicKeyFile","qn":"KeyFilePath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path to public key file&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path to public key file","inlinecomment":" \t &apos; Path to public key file"}]},{"label":"TextToBytes","comment":"Convert text string to byte array","valuetype":"Byte","filenamebase":"TextToBytes_Method","fqnprefix":"HashVSE.CryptoUtilities","qn":"TextToBytes","codesample":"&amp;apos; Converts a string to a byte array\nDim cu as New CryptoUtilities()\nDim clearBytes as Variant\nclearBytes = cu.textToBytes(&amp;quot;Lorem ipsum dolor sit amet&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(StringInput As String)","signature":"Function TextToBytes(StringInput As String) As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Convert text string to byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Convert text string to byte array","inlinecomment":" \t &apos; Convert text string to byte array","parentclassname":"CryptoUtilities","codesamplehtml":"&amp;apos; Converts a string to a byte array&lt;br /&gt;Dim cu as New CryptoUtilities()&lt;br /&gt;Dim clearBytes as Variant&lt;br /&gt;clearBytes = cu.textToBytes(&amp;quot;Lorem ipsum dolor sit amet&amp;quot;)", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"StringInput","comment":"","valuetype":"String","filenamebase":"StringInput_ValuedElement","fqnprefix":"HashVSECryptoUtilitiesTextToBytes","qn":"StringInput","argumentindex":1,"commentblock":"","commenthtml":"","inlinecomment":""}]}]},{"classname":"HashUtilities","comment":"Utility class to create hashes, encode and decode Base64, and convert bytes to and from strings","valuetype":"","filenamebase":"HashUtilities_ObjectClass","fqnprefix":"HashVSE","qn":"HashUtilities","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","projectid":"48258A080063683D8525894900502705","version":3,"classid":"48258A080063683D8525894900503567","lsxclassid":2,"signature":"Public Class HashUtilities","modifiers":"Public","classname":"HashUtilities","parentclassname":"None","constructorsignature":"Function New() As HashUtilities","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Utility class to create hashes, encode and decode Base64, and convert bytes to and from strings&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Utility class to create hashes, encode and decode Base64, and convert bytes to and from strings","inlinecomment":" \t &apos; Utility class to create hashes, encode and decode Base64, and convert bytes to and from strings","codesamplehtml":"", "methods":[{"label":"Base64Decode","comment":"Decodes a base64-encoded string, returning a string","valuetype":"String","filenamebase":"Base64Decode_Method","fqnprefix":"HashVSE.HashUtilities","qn":"Base64Decode","codesample":"%REM\n    The following code decodes a base64-encoded string.\n%END REM\nDim hu as New HashUtilities()\nDim testStr as String\ntestStr = hu.base64Encode(&amp;quot;This is a test string&amp;quot;)\nPrint hu.base64Decode(testStr)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function Base64Decode(Input As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Decodes a base64-encoded string, returning a string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Decodes a base64-encoded string, returning a string","inlinecomment":" \t &apos; Decodes a base64-encoded string, returning a string","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code decodes a base64-encoded string.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim testStr as String&lt;br /&gt;testStr = hu.base64Encode(&amp;quot;This is a test string&amp;quot;)&lt;br /&gt;Print hu.base64Decode(testStr)", "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"Base64 encoded string","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"HashVSEHashUtilitiesBase64Decode","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base64 encoded string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base64 encoded string","inlinecomment":" \t &apos; Base64 encoded string"}]},{"label":"Base64DecodeB","comment":"Decodes a base64-encoded string, returning a byte array","valuetype":"Byte","filenamebase":"Base64DecodeB_Method","fqnprefix":"HashVSE.HashUtilities","qn":"Base64DecodeB","codesample":"%REM\n    The following code decodes a base64-encoded string and returns a byte array.\n%END REM\nDim hu as New HashUtilities()\nDim tempVal as Variant\nDim retVal as Variant    &amp;apos; Will be an Array of Bytes\nDim testStr as String\ntempVal = hu.randomBytes(10)\ntestStr = hu.base64EncodeB(tempVal)\nretVal = hu.base64DecodeB(testStr)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function Base64DecodeB(Input As String) As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Decodes a base64-encoded string, returning a byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Decodes a base64-encoded string, returning a byte array","inlinecomment":" \t &apos; Decodes a base64-encoded string, returning a byte array","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code decodes a base64-encoded string and returns a byte array.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim tempVal as Variant&lt;br /&gt;Dim retVal as Variant    &amp;apos; Will be an Array of Bytes&lt;br /&gt;Dim testStr as String&lt;br /&gt;tempVal = hu.randomBytes(10)&lt;br /&gt;testStr = hu.base64EncodeB(tempVal)&lt;br /&gt;retVal = hu.base64DecodeB(testStr)", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"Base64-encoded string","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"HashVSEHashUtilitiesBase64DecodeB","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base64-encoded string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base64-encoded string","inlinecomment":" \t &apos; Base64-encoded string"}]},{"label":"Base64Encode","comment":"Base64-encodes a string","valuetype":"String","filenamebase":"Base64Encode_Method","fqnprefix":"HashVSE.HashUtilities","qn":"Base64Encode","codesample":"%REM\n    The following code base64-encodes a string.\n%END REM\nDim hu as New HashUtilities()\nDim testStr as String\ntestStr = hu.base64Encode(&amp;quot;This is a test string&amp;quot;)\nPrint hu.base64Decode(testStr)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function Base64Encode(Input As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base64-encodes a string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base64-encodes a string","inlinecomment":" \t &apos; Base64-encodes a string","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code base64-encodes a string.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim testStr as String&lt;br /&gt;testStr = hu.base64Encode(&amp;quot;This is a test string&amp;quot;)&lt;br /&gt;Print hu.base64Decode(testStr)", "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"String to encode","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"HashVSEHashUtilitiesBase64Encode","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to encode&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to encode","inlinecomment":" \t &apos; String to encode"}]},{"label":"Base64EncodeB","comment":"Base64-encodes a byte array as a string","valuetype":"String","filenamebase":"Base64EncodeB_Method","fqnprefix":"HashVSE.HashUtilities","qn":"Base64EncodeB","codesample":"%REM\n    The following code base64-encodes a byte array.\n%END REM\nDim hu as New HashUtilities()\nDim tempVal as Variant\nDim retVal as Variant    &amp;apos; Will be an Array of Bytes\nDim testStr as String\ntempVal = hu.randomBytes(10)\ntestStr = hu.base64EncodeB(tempVal)\nretVal = hu.base64DecodeB(testStr)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Bytes As Variant)","signature":"Function Base64EncodeB(Bytes As Variant) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base64-encodes a byte array as a string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base64-encodes a byte array as a string","inlinecomment":" \t &apos; Base64-encodes a byte array as a string","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code base64-encodes a byte array.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim tempVal as Variant&lt;br /&gt;Dim retVal as Variant    &amp;apos; Will be an Array of Bytes&lt;br /&gt;Dim testStr as String&lt;br /&gt;tempVal = hu.randomBytes(10)&lt;br /&gt;testStr = hu.base64EncodeB(tempVal)&lt;br /&gt;retVal = hu.base64DecodeB(testStr)", "signatureelements":["Function"], "arguments":[{"label":"Bytes","comment":"Array of bytes to encode","valuetype":"Variant","filenamebase":"Bytes_ValuedElement","fqnprefix":"HashVSEHashUtilitiesBase64EncodeB","qn":"Bytes","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array of bytes to encode&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array of bytes to encode","inlinecomment":" \t &apos; Array of bytes to encode"}]},{"label":"BytesToString","comment":"Converts a byte array to a string, optionally hexifying the string","valuetype":"String","filenamebase":"BytesToString_Method","fqnprefix":"HashVSE.HashUtilities","qn":"BytesToString","codesample":"%REM\n    The following code converts a byte array to a string without hexifying the string.\n%END REM\nDim hu as New HashUtilities()\nDim tempVal as Variant\ntempVal = hu.randomBytes(10)\nPrint hu.bytesToString(tempVal, False)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Bytes As Variant, Hexify As Boolean)","signature":"Function BytesToString(Bytes As Variant, Hexify As Boolean) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Converts a byte array to a string, optionally hexifying the string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Converts a byte array to a string, optionally hexifying the string","inlinecomment":" \t &apos; Converts a byte array to a string, optionally hexifying the string","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code converts a byte array to a string without hexifying the string.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim tempVal as Variant&lt;br /&gt;tempVal = hu.randomBytes(10)&lt;br /&gt;Print hu.bytesToString(tempVal, False)", "signatureelements":["Function"], "arguments":[{"label":"Bytes","comment":"Array of bytes to convert","valuetype":"Variant","filenamebase":"Bytes_ValuedElement","fqnprefix":"HashVSEHashUtilitiesBytesToString","qn":"Bytes","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array of bytes to convert&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array of bytes to convert","inlinecomment":" \t &apos; Array of bytes to convert"},{"label":"Hexify","comment":"Whether or not to hex the string","valuetype":"Boolean","filenamebase":"Hexify_ValuedElement","fqnprefix":"HashVSEHashUtilitiesBytesToString","qn":"Hexify","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether or not to hex the string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether or not to hex the string","inlinecomment":" \t &apos; Whether or not to hex the string", "attributes":["BY_VAL"]}]},{"label":"FileMD5","comment":"Creates an MD5 hash of a file at a given filepath","valuetype":"String","filenamebase":"FileMD5_Method","fqnprefix":"HashVSE.HashUtilities","qn":"FileMD5","codesample":"%REM\n    The following code creates an MD5 hash of a file, returning a string.\n%END REM\nDim hu as New HashUtilities()\nPrint hu.FileMD5(&amp;quot;samples/lorem.txt&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(FilePath As String)","signature":"Function FileMD5(FilePath As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates an MD5 hash of a file at a given filepath&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates an MD5 hash of a file at a given filepath","inlinecomment":" \t &apos; Creates an MD5 hash of a file at a given filepath","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates an MD5 hash of a file, returning a string.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Print hu.FileMD5(&amp;quot;samples/lorem.txt&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"FilePath","comment":"Path of file for which to create an MD5","valuetype":"String","filenamebase":"FilePath_ValuedElement","fqnprefix":"HashVSEHashUtilitiesFileMD5","qn":"FilePath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path of file for which to create an MD5&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path of file for which to create an MD5","inlinecomment":" \t &apos; Path of file for which to create an MD5"}]},{"label":"FileMD5B","comment":"Creates a byte array of an MD5 hash for a file at a given location","valuetype":"Byte","filenamebase":"FileMD5B_Method","fqnprefix":"HashVSE.HashUtilities","qn":"FileMD5B","codesample":"%REM\n    The following code creates an MD5 hash of a file, returning a byte array.\n%END REM\nDim hu as New HashUtilities()\nDim md5 as Variant   &amp;apos; Will be array of Bytes\nmd5 = hu.FileMD5B(CurDir &amp;amp; &amp;quot;/samples/lorem.txt&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(FilePath As String)","signature":"Function FileMD5B(FilePath As String) As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a byte array of an MD5 hash for a file at a given location&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a byte array of an MD5 hash for a file at a given location","inlinecomment":" \t &apos; Creates a byte array of an MD5 hash for a file at a given location","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates an MD5 hash of a file, returning a byte array.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim md5 as Variant   &amp;apos; Will be array of Bytes&lt;br /&gt;md5 = hu.FileMD5B(CurDir &amp;amp; &amp;quot;/samples/lorem.txt&amp;quot;)", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"FilePath","comment":"Path of file for which to create an MD5","valuetype":"String","filenamebase":"FilePath_ValuedElement","fqnprefix":"HashVSEHashUtilitiesFileMD5B","qn":"FilePath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path of file for which to create an MD5&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path of file for which to create an MD5","inlinecomment":" \t &apos; Path of file for which to create an MD5"}]},{"label":"MD5","comment":"Creates an MD5 hash for a given string","valuetype":"String","filenamebase":"MD5_Method","fqnprefix":"HashVSE.HashUtilities","qn":"MD5","codesample":"%REM\n    The following code creates an MD5 hash of a string, returning a string.\n%END REM\nDim hu as New HashUtilities()\nPrint hu.MD5(&amp;quot;Hello world&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function MD5(Input As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates an MD5 hash for a given string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates an MD5 hash for a given string","inlinecomment":" \t &apos; Creates an MD5 hash for a given string","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates an MD5 hash of a string, returning a string.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Print hu.MD5(&amp;quot;Hello world&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"String to hash","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"HashVSEHashUtilitiesMD5","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to hash&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to hash","inlinecomment":" \t &apos; String to hash"}]},{"label":"MD5B","comment":"Creates an MD5 hash as a byte array for a given byte array","valuetype":"Byte","filenamebase":"MD5B_Method","fqnprefix":"HashVSE.HashUtilities","qn":"MD5B","codesample":"%REM\n    The following code creates an MD5 hash of a byte array, returning a byte array.\n%END REM\nDim hu as New HashUtilities()\nDim helloBytes as Variant\nDim helloMD5 as Variant\nhelloBytes = hu.stringToBytes(&amp;quot;Hello world&amp;quot;)\nhelloMD5 = hu.MD5B(helloBytes)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Bytes As Variant)","signature":"Function MD5B(Bytes As Variant) As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates an MD5 hash as a byte array for a given byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates an MD5 hash as a byte array for a given byte array","inlinecomment":" \t &apos; Creates an MD5 hash as a byte array for a given byte array","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates an MD5 hash of a byte array, returning a byte array.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim helloBytes as Variant&lt;br /&gt;Dim helloMD5 as Variant&lt;br /&gt;helloBytes = hu.stringToBytes(&amp;quot;Hello world&amp;quot;)&lt;br /&gt;helloMD5 = hu.MD5B(helloBytes)", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"Bytes","comment":"Array of bytes to hash","valuetype":"Variant","filenamebase":"Bytes_ValuedElement","fqnprefix":"HashVSEHashUtilitiesMD5B","qn":"Bytes","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array of bytes to hash&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array of bytes to hash","inlinecomment":" \t &apos; Array of bytes to hash"}]},{"label":"New","comment":"Constructor","valuetype":"HashUtilities","filenamebase":"New_Method","fqnprefix":"HashVSE.HashUtilities","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As HashUtilities","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor","inlinecomment":" \t &apos; Constructor","parentclassname":"HashUtilities","codesamplehtml":"", "signatureelements":["Function"]},{"label":"RegisterLSXPath","comment":"Internal method used to register the VSE with the runtime registry.","valuetype":"Boolean","filenamebase":"RegisterLSXPath_Method","fqnprefix":"HashVSE.HashUtilities","qn":"RegisterLSXPath","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function RegisterLSXPath() As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Internal method used to register the VSE with the runtime registry.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Internal method used to register the VSE with the runtime registry.","inlinecomment":" \t &apos; Internal method used to register the VSE with the runtime registry.","parentclassname":"HashUtilities","codesamplehtml":"", "signatureelements":["Function"]},{"label":"SHA1","comment":"Creates a SHA-1 hash of a string","valuetype":"String","filenamebase":"SHA1_Method","fqnprefix":"HashVSE.HashUtilities","qn":"SHA1","codesample":"%REM\n    The following code creates a SHA1 hash of a string, returning a string.\n%END REM\nDim hu as New HashUtilities()\nPrint hu.SHA1(&amp;quot;Hello world&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function SHA1(Input As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a SHA-1 hash of a string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a SHA-1 hash of a string","inlinecomment":" \t &apos; Creates a SHA-1 hash of a string","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a SHA1 hash of a string, returning a string.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Print hu.SHA1(&amp;quot;Hello world&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"String to hash","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"HashVSEHashUtilitiesSHA1","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to hash&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to hash","inlinecomment":" \t &apos; String to hash"}]},{"label":"SHA1B","comment":"Creates a SHA-1 hashed byte array of a passed byte array","valuetype":"Byte","filenamebase":"SHA1B_Method","fqnprefix":"HashVSE.HashUtilities","qn":"SHA1B","codesample":"%REM\n    The following code creates a SHA1 hash of a byte array, returning a byte array.\n%END REM\nDim hu as New HashUtilities()\nDim input as String\nDim output as Variant   &amp;apos; Variant array of bytes\ninput = hu.stringToBytes(&amp;quot;Hello world&amp;quot;)\noutput = hu.SHA1B(input)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Bytes As Variant)","signature":"Function SHA1B(Bytes As Variant) As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a SHA-1 hashed byte array of a passed byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a SHA-1 hashed byte array of a passed byte array","inlinecomment":" \t &apos; Creates a SHA-1 hashed byte array of a passed byte array","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a SHA1 hash of a byte array, returning a byte array.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim input as String&lt;br /&gt;Dim output as Variant   &amp;apos; Variant array of bytes&lt;br /&gt;input = hu.stringToBytes(&amp;quot;Hello world&amp;quot;)&lt;br /&gt;output = hu.SHA1B(input)", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"Bytes","comment":"Byte array to hash","valuetype":"Variant","filenamebase":"Bytes_ValuedElement","fqnprefix":"HashVSEHashUtilitiesSHA1B","qn":"Bytes","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Byte array to hash&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Byte array to hash","inlinecomment":" \t &apos; Byte array to hash"}]},{"label":"SHA256","comment":"Creates a SHA-256 hash of a string","valuetype":"String","filenamebase":"SHA256_Method","fqnprefix":"HashVSE.HashUtilities","qn":"SHA256","codesample":"%REM\n    The following code creates a SHA256 hash of a string, returning a string.\n%END REM\nDim hu as New HashUtilities()\nPrint hu.SHA256(&amp;quot;Hello world&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function SHA256(Input As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a SHA-256 hash of a string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a SHA-256 hash of a string","inlinecomment":" \t &apos; Creates a SHA-256 hash of a string","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a SHA256 hash of a string, returning a string.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Print hu.SHA256(&amp;quot;Hello world&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"String to hash","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"HashVSEHashUtilitiesSHA256","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to hash&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to hash","inlinecomment":" \t &apos; String to hash"}]},{"label":"SHA256B","comment":"Creates a SHA-256 hashed byte array of a passed byte array","valuetype":"Byte","filenamebase":"SHA256B_Method","fqnprefix":"HashVSE.HashUtilities","qn":"SHA256B","codesample":"%REM\n    The following code creates a SHA256 hash of a byte array, returning a byte array.\n%END REM\nDim hu as New HashUtilities()\nDim input as String\nDim output as Variant   &amp;apos; Variant array of bytes\ninput = hu.stringToBytes(&amp;quot;Hello world&amp;quot;)\noutput = hu.SHA256B(input)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Bytes As Variant)","signature":"Function SHA256B(Bytes As Variant) As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a SHA-256 hashed byte array of a passed byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a SHA-256 hashed byte array of a passed byte array","inlinecomment":" \t &apos; Creates a SHA-256 hashed byte array of a passed byte array","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a SHA256 hash of a byte array, returning a byte array.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim input as String&lt;br /&gt;Dim output as Variant   &amp;apos; Variant array of bytes&lt;br /&gt;input = hu.stringToBytes(&amp;quot;Hello world&amp;quot;)&lt;br /&gt;output = hu.SHA256B(input)", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"Bytes","comment":"Byte array to hash","valuetype":"Variant","filenamebase":"Bytes_ValuedElement","fqnprefix":"HashVSEHashUtilitiesSHA256B","qn":"Bytes","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Byte array to hash&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Byte array to hash","inlinecomment":" \t &apos; Byte array to hash"}]},{"label":"SHA512","comment":"Creates a SHA-512 hash of a string","valuetype":"String","filenamebase":"SHA512_Method","fqnprefix":"HashVSE.HashUtilities","qn":"SHA512","codesample":"%REM\n    The following code creates a SHA512 hash of a string, returning a string.\n%END REM\nDim hu as New HashUtilities()\nPrint hu.SHA512(&amp;quot;Hello world&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function SHA512(Input As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a SHA-512 hash of a string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a SHA-512 hash of a string","inlinecomment":" \t &apos; Creates a SHA-512 hash of a string","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a SHA512 hash of a string, returning a string.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Print hu.SHA512(&amp;quot;Hello world&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"String to hash","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"HashVSEHashUtilitiesSHA512","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to hash&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to hash","inlinecomment":" \t &apos; String to hash"}]},{"label":"SHA512B","comment":"Creates a SHA-512 hashed byte array of a passed byte array","valuetype":"Byte","filenamebase":"SHA512B_Method","fqnprefix":"HashVSE.HashUtilities","qn":"SHA512B","codesample":"%REM\n    The following code creates a SHA512 hash of a byte array, returning a byte array.\n%END REM\nDim hu as New HashUtilities()\nDim input as String\nDim output as Variant   &amp;apos; Variant array of bytes\ninput = hu.stringToBytes(&amp;quot;Hello world&amp;quot;)\noutput = hu.SHA512B(input)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Bytes As Variant)","signature":"Function SHA512B(Bytes As Variant) As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a SHA-512 hashed byte array of a passed byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a SHA-512 hashed byte array of a passed byte array","inlinecomment":" \t &apos; Creates a SHA-512 hashed byte array of a passed byte array","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a SHA512 hash of a byte array, returning a byte array.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim input as String&lt;br /&gt;Dim output as Variant   &amp;apos; Variant array of bytes&lt;br /&gt;input = hu.stringToBytes(&amp;quot;Hello world&amp;quot;)&lt;br /&gt;output = hu.SHA512B(input)", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"Bytes","comment":"Byte array to hash","valuetype":"Variant","filenamebase":"Bytes_ValuedElement","fqnprefix":"HashVSEHashUtilitiesSHA512B","qn":"Bytes","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Byte array to hash&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Byte array to hash","inlinecomment":" \t &apos; Byte array to hash"}]},{"label":"StringToBytes","comment":"Converts a string to a byte array","valuetype":"Byte","filenamebase":"StringToBytes_Method","fqnprefix":"HashVSE.HashUtilities","qn":"StringToBytes","codesample":"%REM\n    The following code converts a string to bytes.\n%END REM\nDim hu as New HashUtilities()\nPrint hu.stringToBytes(&amp;quot;Hello world&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function StringToBytes(Input As String) As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Converts a string to a byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Converts a string to a byte array","inlinecomment":" \t &apos; Converts a string to a byte array","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code converts a string to bytes.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Print hu.stringToBytes(&amp;quot;Hello world&amp;quot;)", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"String to convert","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"HashVSEHashUtilitiesStringToBytes","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to convert&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to convert","inlinecomment":" \t &apos; String to convert"}]},{"label":"OpenSSLVersion","comment":"the version of openssl library used by this vse","valuetype":"String","filenamebase":"OpenSSLVersion_Method","fqnprefix":"HashVSE.HashUtilities","qn":"Get.OpenSSLVersion","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get OpenSSLVersion As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;the version of openssl library used by this vse&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"the version of openssl library used by this vse","inlinecomment":" \t &apos; the version of openssl library used by this vse","parentclassname":"HashUtilities","codesamplehtml":"", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"VSEVersion","comment":"","valuetype":"String","filenamebase":"VSEVersion_Method","fqnprefix":"HashVSE.HashUtilities","qn":"Get.VSEVersion","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get VSEVersion As String","modifiers":"Get","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"HashUtilities","codesamplehtml":"", "attributes":["READ_ONLY","GET_CONST","SET_CONST"], "signatureelements":["Property","Get"]}]}], "platforms":["LINUX","W32"]}]}
