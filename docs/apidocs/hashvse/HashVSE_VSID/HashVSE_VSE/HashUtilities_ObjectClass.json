{"classname":"HashUtilities","comment":"Utility class to create hashes, encode and decode Base64, and convert bytes to and from strings","valuetype":"","filenamebase":"HashUtilities_ObjectClass","fqnprefix":"HashVSE","qn":"HashUtilities","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","colitemtype":"Boolean","colindextype":"Boolean","projectid":"48258A080063683D8525894900502705","version":3,"classid":"48258A080063683D8525894900503567","lsxclassid":2,"signature":"Public Class HashUtilities","modifiers":"Public","classname":"HashUtilities","parentclassname":"None","constructorsignature":"Function New() As HashUtilities","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Utility class to create hashes, encode and decode Base64, and convert bytes to and from strings&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Utility class to create hashes, encode and decode Base64, and convert bytes to and from strings","inlinecomment":" \t &apos; Utility class to create hashes, encode and decode Base64, and convert bytes to and from strings","codesamplehtml":"", "methods":[{"label":"Base64Decode","comment":"Decodes a base64-encoded string, returning a string","valuetype":"String","filenamebase":"Base64Decode_Method","fqnprefix":"HashVSE.HashUtilities","qn":"Base64Decode","codesample":"%REM\n    The following code decodes a base64-encoded string.\n%END REM\nDim hu as New HashUtilities()\nDim testStr as String\ntestStr = hu.base64Encode(&amp;quot;This is a test string&amp;quot;)\nPrint hu.base64Decode(testStr)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function Base64Decode(Input As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Decodes a base64-encoded string, returning a string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Decodes a base64-encoded string, returning a string","inlinecomment":" \t &apos; Decodes a base64-encoded string, returning a string","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code decodes a base64-encoded string.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim testStr as String&lt;br /&gt;testStr = hu.base64Encode(&amp;quot;This is a test string&amp;quot;)&lt;br /&gt;Print hu.base64Decode(testStr)", "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"Base64 encoded string","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"HashVSEHashUtilitiesBase64Decode","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base64 encoded string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base64 encoded string","inlinecomment":" \t &apos; Base64 encoded string"}]},{"label":"Base64DecodeB","comment":"Decodes a base64-encoded string, returning a byte array","valuetype":"Byte","filenamebase":"Base64DecodeB_Method","fqnprefix":"HashVSE.HashUtilities","qn":"Base64DecodeB","codesample":"%REM\n    The following code decodes a base64-encoded string and returns a byte array.\n%END REM\nDim hu as New HashUtilities()\nDim tempVal as Variant\nDim retVal as Variant    &amp;apos; Will be an Array of Bytes\nDim testStr as String\ntempVal = hu.randomBytes(10)\ntestStr = hu.base64EncodeB(tempVal)\nretVal = hu.base64DecodeB(testStr)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function Base64DecodeB(Input As String) As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Decodes a base64-encoded string, returning a byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Decodes a base64-encoded string, returning a byte array","inlinecomment":" \t &apos; Decodes a base64-encoded string, returning a byte array","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code decodes a base64-encoded string and returns a byte array.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim tempVal as Variant&lt;br /&gt;Dim retVal as Variant    &amp;apos; Will be an Array of Bytes&lt;br /&gt;Dim testStr as String&lt;br /&gt;tempVal = hu.randomBytes(10)&lt;br /&gt;testStr = hu.base64EncodeB(tempVal)&lt;br /&gt;retVal = hu.base64DecodeB(testStr)", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"Base64-encoded string","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"HashVSEHashUtilitiesBase64DecodeB","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base64-encoded string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base64-encoded string","inlinecomment":" \t &apos; Base64-encoded string"}]},{"label":"Base64Encode","comment":"Base64-encodes a string","valuetype":"String","filenamebase":"Base64Encode_Method","fqnprefix":"HashVSE.HashUtilities","qn":"Base64Encode","codesample":"%REM\n    The following code base64-encodes a string.\n%END REM\nDim hu as New HashUtilities()\nDim testStr as String\ntestStr = hu.base64Encode(&amp;quot;This is a test string&amp;quot;)\nPrint hu.base64Decode(testStr)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function Base64Encode(Input As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base64-encodes a string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base64-encodes a string","inlinecomment":" \t &apos; Base64-encodes a string","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code base64-encodes a string.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim testStr as String&lt;br /&gt;testStr = hu.base64Encode(&amp;quot;This is a test string&amp;quot;)&lt;br /&gt;Print hu.base64Decode(testStr)", "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"String to encode","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"HashVSEHashUtilitiesBase64Encode","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to encode&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to encode","inlinecomment":" \t &apos; String to encode"}]},{"label":"Base64EncodeB","comment":"Base64-encodes a byte array as a string","valuetype":"String","filenamebase":"Base64EncodeB_Method","fqnprefix":"HashVSE.HashUtilities","qn":"Base64EncodeB","codesample":"%REM\n    The following code base64-encodes a byte array.\n%END REM\nDim hu as New HashUtilities()\nDim tempVal as Variant\nDim retVal as Variant    &amp;apos; Will be an Array of Bytes\nDim testStr as String\ntempVal = hu.randomBytes(10)\ntestStr = hu.base64EncodeB(tempVal)\nretVal = hu.base64DecodeB(testStr)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Bytes As Variant)","signature":"Function Base64EncodeB(Bytes As Variant) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base64-encodes a byte array as a string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base64-encodes a byte array as a string","inlinecomment":" \t &apos; Base64-encodes a byte array as a string","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code base64-encodes a byte array.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim tempVal as Variant&lt;br /&gt;Dim retVal as Variant    &amp;apos; Will be an Array of Bytes&lt;br /&gt;Dim testStr as String&lt;br /&gt;tempVal = hu.randomBytes(10)&lt;br /&gt;testStr = hu.base64EncodeB(tempVal)&lt;br /&gt;retVal = hu.base64DecodeB(testStr)", "signatureelements":["Function"], "arguments":[{"label":"Bytes","comment":"Array of bytes to encode","valuetype":"Variant","filenamebase":"Bytes_ValuedElement","fqnprefix":"HashVSEHashUtilitiesBase64EncodeB","qn":"Bytes","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array of bytes to encode&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array of bytes to encode","inlinecomment":" \t &apos; Array of bytes to encode"}]},{"label":"BytesToString","comment":"Converts a byte array to a string, optionally hexifying the string","valuetype":"String","filenamebase":"BytesToString_Method","fqnprefix":"HashVSE.HashUtilities","qn":"BytesToString","codesample":"%REM\n    The following code converts a byte array to a string without hexifying the string.\n%END REM\nDim hu as New HashUtilities()\nDim tempVal as Variant\ntempVal = hu.randomBytes(10)\nPrint hu.bytesToString(tempVal, False)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Bytes As Variant, Hexify As Boolean)","signature":"Function BytesToString(Bytes As Variant, Hexify As Boolean) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Converts a byte array to a string, optionally hexifying the string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Converts a byte array to a string, optionally hexifying the string","inlinecomment":" \t &apos; Converts a byte array to a string, optionally hexifying the string","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code converts a byte array to a string without hexifying the string.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim tempVal as Variant&lt;br /&gt;tempVal = hu.randomBytes(10)&lt;br /&gt;Print hu.bytesToString(tempVal, False)", "signatureelements":["Function"], "arguments":[{"label":"Bytes","comment":"Array of bytes to convert","valuetype":"Variant","filenamebase":"Bytes_ValuedElement","fqnprefix":"HashVSEHashUtilitiesBytesToString","qn":"Bytes","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array of bytes to convert&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array of bytes to convert","inlinecomment":" \t &apos; Array of bytes to convert"},{"label":"Hexify","comment":"Whether or not to hex the string","valuetype":"Boolean","filenamebase":"Hexify_ValuedElement","fqnprefix":"HashVSEHashUtilitiesBytesToString","qn":"Hexify","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether or not to hex the string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether or not to hex the string","inlinecomment":" \t &apos; Whether or not to hex the string", "attributes":["BY_VAL"]}]},{"label":"FileMD5","comment":"Creates an MD5 hash of a file at a given filepath","valuetype":"String","filenamebase":"FileMD5_Method","fqnprefix":"HashVSE.HashUtilities","qn":"FileMD5","codesample":"%REM\n    The following code creates an MD5 hash of a file, returning a string.\n%END REM\nDim hu as New HashUtilities()\nPrint hu.FileMD5(&amp;quot;samples/lorem.txt&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(FilePath As String)","signature":"Function FileMD5(FilePath As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates an MD5 hash of a file at a given filepath&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates an MD5 hash of a file at a given filepath","inlinecomment":" \t &apos; Creates an MD5 hash of a file at a given filepath","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates an MD5 hash of a file, returning a string.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Print hu.FileMD5(&amp;quot;samples/lorem.txt&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"FilePath","comment":"Path of file for which to create an MD5","valuetype":"String","filenamebase":"FilePath_ValuedElement","fqnprefix":"HashVSEHashUtilitiesFileMD5","qn":"FilePath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path of file for which to create an MD5&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path of file for which to create an MD5","inlinecomment":" \t &apos; Path of file for which to create an MD5"}]},{"label":"FileMD5B","comment":"Creates a byte array of an MD5 hash for a file at a given location","valuetype":"Byte","filenamebase":"FileMD5B_Method","fqnprefix":"HashVSE.HashUtilities","qn":"FileMD5B","codesample":"%REM\n    The following code creates an MD5 hash of a file, returning a byte array.\n%END REM\nDim hu as New HashUtilities()\nDim md5 as Variant   &amp;apos; Will be array of Bytes\nmd5 = hu.FileMD5B(CurDir &amp;amp; &amp;quot;/samples/lorem.txt&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(FilePath As String)","signature":"Function FileMD5B(FilePath As String) As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a byte array of an MD5 hash for a file at a given location&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a byte array of an MD5 hash for a file at a given location","inlinecomment":" \t &apos; Creates a byte array of an MD5 hash for a file at a given location","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates an MD5 hash of a file, returning a byte array.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim md5 as Variant   &amp;apos; Will be array of Bytes&lt;br /&gt;md5 = hu.FileMD5B(CurDir &amp;amp; &amp;quot;/samples/lorem.txt&amp;quot;)", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"FilePath","comment":"Path of file for which to create an MD5","valuetype":"String","filenamebase":"FilePath_ValuedElement","fqnprefix":"HashVSEHashUtilitiesFileMD5B","qn":"FilePath","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Path of file for which to create an MD5&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Path of file for which to create an MD5","inlinecomment":" \t &apos; Path of file for which to create an MD5"}]},{"label":"MD5","comment":"Creates an MD5 hash for a given string","valuetype":"String","filenamebase":"MD5_Method","fqnprefix":"HashVSE.HashUtilities","qn":"MD5","codesample":"%REM\n    The following code creates an MD5 hash of a string, returning a string.\n%END REM\nDim hu as New HashUtilities()\nPrint hu.MD5(&amp;quot;Hello world&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function MD5(Input As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates an MD5 hash for a given string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates an MD5 hash for a given string","inlinecomment":" \t &apos; Creates an MD5 hash for a given string","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates an MD5 hash of a string, returning a string.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Print hu.MD5(&amp;quot;Hello world&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"String to hash","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"HashVSEHashUtilitiesMD5","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to hash&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to hash","inlinecomment":" \t &apos; String to hash"}]},{"label":"MD5B","comment":"Creates an MD5 hash as a byte array for a given byte array","valuetype":"Byte","filenamebase":"MD5B_Method","fqnprefix":"HashVSE.HashUtilities","qn":"MD5B","codesample":"%REM\n    The following code creates an MD5 hash of a byte array, returning a byte array.\n%END REM\nDim hu as New HashUtilities()\nDim helloBytes as Variant\nDim helloMD5 as Variant\nhelloBytes = hu.stringToBytes(&amp;quot;Hello world&amp;quot;)\nhelloMD5 = hu.MD5B(helloBytes)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Bytes As Variant)","signature":"Function MD5B(Bytes As Variant) As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates an MD5 hash as a byte array for a given byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates an MD5 hash as a byte array for a given byte array","inlinecomment":" \t &apos; Creates an MD5 hash as a byte array for a given byte array","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates an MD5 hash of a byte array, returning a byte array.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim helloBytes as Variant&lt;br /&gt;Dim helloMD5 as Variant&lt;br /&gt;helloBytes = hu.stringToBytes(&amp;quot;Hello world&amp;quot;)&lt;br /&gt;helloMD5 = hu.MD5B(helloBytes)", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"Bytes","comment":"Array of bytes to hash","valuetype":"Variant","filenamebase":"Bytes_ValuedElement","fqnprefix":"HashVSEHashUtilitiesMD5B","qn":"Bytes","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array of bytes to hash&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array of bytes to hash","inlinecomment":" \t &apos; Array of bytes to hash"}]},{"label":"New","comment":"Constructor","valuetype":"HashUtilities","filenamebase":"New_Method","fqnprefix":"HashVSE.HashUtilities","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function New() As HashUtilities","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor","inlinecomment":" \t &apos; Constructor","parentclassname":"HashUtilities","codesamplehtml":"", "signatureelements":["Function"]},{"label":"RegisterLSXPath","comment":"Internal method used to register the VSE with the runtime registry.","valuetype":"Boolean","filenamebase":"RegisterLSXPath_Method","fqnprefix":"HashVSE.HashUtilities","qn":"RegisterLSXPath","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Function RegisterLSXPath() As Boolean","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Internal method used to register the VSE with the runtime registry.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Internal method used to register the VSE with the runtime registry.","inlinecomment":" \t &apos; Internal method used to register the VSE with the runtime registry.","parentclassname":"HashUtilities","codesamplehtml":"", "signatureelements":["Function"]},{"label":"SHA1","comment":"Creates a SHA-1 hash of a string","valuetype":"String","filenamebase":"SHA1_Method","fqnprefix":"HashVSE.HashUtilities","qn":"SHA1","codesample":"%REM\n    The following code creates a SHA1 hash of a string, returning a string.\n%END REM\nDim hu as New HashUtilities()\nPrint hu.SHA1(&amp;quot;Hello world&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function SHA1(Input As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a SHA-1 hash of a string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a SHA-1 hash of a string","inlinecomment":" \t &apos; Creates a SHA-1 hash of a string","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a SHA1 hash of a string, returning a string.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Print hu.SHA1(&amp;quot;Hello world&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"String to hash","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"HashVSEHashUtilitiesSHA1","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to hash&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to hash","inlinecomment":" \t &apos; String to hash"}]},{"label":"SHA1B","comment":"Creates a SHA-1 hashed byte array of a passed byte array","valuetype":"Byte","filenamebase":"SHA1B_Method","fqnprefix":"HashVSE.HashUtilities","qn":"SHA1B","codesample":"%REM\n    The following code creates a SHA1 hash of a byte array, returning a byte array.\n%END REM\nDim hu as New HashUtilities()\nDim input as String\nDim output as Variant   &amp;apos; Variant array of bytes\ninput = hu.stringToBytes(&amp;quot;Hello world&amp;quot;)\noutput = hu.SHA1B(input)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Bytes As Variant)","signature":"Function SHA1B(Bytes As Variant) As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a SHA-1 hashed byte array of a passed byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a SHA-1 hashed byte array of a passed byte array","inlinecomment":" \t &apos; Creates a SHA-1 hashed byte array of a passed byte array","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a SHA1 hash of a byte array, returning a byte array.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim input as String&lt;br /&gt;Dim output as Variant   &amp;apos; Variant array of bytes&lt;br /&gt;input = hu.stringToBytes(&amp;quot;Hello world&amp;quot;)&lt;br /&gt;output = hu.SHA1B(input)", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"Bytes","comment":"Byte array to hash","valuetype":"Variant","filenamebase":"Bytes_ValuedElement","fqnprefix":"HashVSEHashUtilitiesSHA1B","qn":"Bytes","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Byte array to hash&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Byte array to hash","inlinecomment":" \t &apos; Byte array to hash"}]},{"label":"SHA256","comment":"Creates a SHA-256 hash of a string","valuetype":"String","filenamebase":"SHA256_Method","fqnprefix":"HashVSE.HashUtilities","qn":"SHA256","codesample":"%REM\n    The following code creates a SHA256 hash of a string, returning a string.\n%END REM\nDim hu as New HashUtilities()\nPrint hu.SHA256(&amp;quot;Hello world&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function SHA256(Input As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a SHA-256 hash of a string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a SHA-256 hash of a string","inlinecomment":" \t &apos; Creates a SHA-256 hash of a string","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a SHA256 hash of a string, returning a string.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Print hu.SHA256(&amp;quot;Hello world&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"String to hash","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"HashVSEHashUtilitiesSHA256","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to hash&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to hash","inlinecomment":" \t &apos; String to hash"}]},{"label":"SHA256B","comment":"Creates a SHA-256 hashed byte array of a passed byte array","valuetype":"Byte","filenamebase":"SHA256B_Method","fqnprefix":"HashVSE.HashUtilities","qn":"SHA256B","codesample":"%REM\n    The following code creates a SHA256 hash of a byte array, returning a byte array.\n%END REM\nDim hu as New HashUtilities()\nDim input as String\nDim output as Variant   &amp;apos; Variant array of bytes\ninput = hu.stringToBytes(&amp;quot;Hello world&amp;quot;)\noutput = hu.SHA256B(input)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Bytes As Variant)","signature":"Function SHA256B(Bytes As Variant) As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a SHA-256 hashed byte array of a passed byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a SHA-256 hashed byte array of a passed byte array","inlinecomment":" \t &apos; Creates a SHA-256 hashed byte array of a passed byte array","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a SHA256 hash of a byte array, returning a byte array.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim input as String&lt;br /&gt;Dim output as Variant   &amp;apos; Variant array of bytes&lt;br /&gt;input = hu.stringToBytes(&amp;quot;Hello world&amp;quot;)&lt;br /&gt;output = hu.SHA256B(input)", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"Bytes","comment":"Byte array to hash","valuetype":"Variant","filenamebase":"Bytes_ValuedElement","fqnprefix":"HashVSEHashUtilitiesSHA256B","qn":"Bytes","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Byte array to hash&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Byte array to hash","inlinecomment":" \t &apos; Byte array to hash"}]},{"label":"SHA512","comment":"Creates a SHA-512 hash of a string","valuetype":"String","filenamebase":"SHA512_Method","fqnprefix":"HashVSE.HashUtilities","qn":"SHA512","codesample":"%REM\n    The following code creates a SHA512 hash of a string, returning a string.\n%END REM\nDim hu as New HashUtilities()\nPrint hu.SHA512(&amp;quot;Hello world&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function SHA512(Input As String) As String","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a SHA-512 hash of a string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a SHA-512 hash of a string","inlinecomment":" \t &apos; Creates a SHA-512 hash of a string","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a SHA512 hash of a string, returning a string.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Print hu.SHA512(&amp;quot;Hello world&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"String to hash","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"HashVSEHashUtilitiesSHA512","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to hash&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to hash","inlinecomment":" \t &apos; String to hash"}]},{"label":"SHA512B","comment":"Creates a SHA-512 hashed byte array of a passed byte array","valuetype":"Byte","filenamebase":"SHA512B_Method","fqnprefix":"HashVSE.HashUtilities","qn":"SHA512B","codesample":"%REM\n    The following code creates a SHA512 hash of a byte array, returning a byte array.\n%END REM\nDim hu as New HashUtilities()\nDim input as String\nDim output as Variant   &amp;apos; Variant array of bytes\ninput = hu.stringToBytes(&amp;quot;Hello world&amp;quot;)\noutput = hu.SHA512B(input)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Bytes As Variant)","signature":"Function SHA512B(Bytes As Variant) As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a SHA-512 hashed byte array of a passed byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a SHA-512 hashed byte array of a passed byte array","inlinecomment":" \t &apos; Creates a SHA-512 hashed byte array of a passed byte array","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code creates a SHA512 hash of a byte array, returning a byte array.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Dim input as String&lt;br /&gt;Dim output as Variant   &amp;apos; Variant array of bytes&lt;br /&gt;input = hu.stringToBytes(&amp;quot;Hello world&amp;quot;)&lt;br /&gt;output = hu.SHA512B(input)", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"Bytes","comment":"Byte array to hash","valuetype":"Variant","filenamebase":"Bytes_ValuedElement","fqnprefix":"HashVSEHashUtilitiesSHA512B","qn":"Bytes","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Byte array to hash&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Byte array to hash","inlinecomment":" \t &apos; Byte array to hash"}]},{"label":"StringToBytes","comment":"Converts a string to a byte array","valuetype":"Byte","filenamebase":"StringToBytes_Method","fqnprefix":"HashVSE.HashUtilities","qn":"StringToBytes","codesample":"%REM\n    The following code converts a string to bytes.\n%END REM\nDim hu as New HashUtilities()\nPrint hu.stringToBytes(&amp;quot;Hello world&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(Input As String)","signature":"Function StringToBytes(Input As String) As Byte Array","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Converts a string to a byte array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Converts a string to a byte array","inlinecomment":" \t &apos; Converts a string to a byte array","parentclassname":"HashUtilities","codesamplehtml":"%REM&lt;br /&gt;    The following code converts a string to bytes.&lt;br /&gt;%END REM&lt;br /&gt;Dim hu as New HashUtilities()&lt;br /&gt;Print hu.stringToBytes(&amp;quot;Hello world&amp;quot;)", "attributes":["Array"], "signatureelements":["Function"], "arguments":[{"label":"Input","comment":"String to convert","valuetype":"String","filenamebase":"Input_ValuedElement","fqnprefix":"HashVSEHashUtilitiesStringToBytes","qn":"Input","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to convert&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to convert","inlinecomment":" \t &apos; String to convert"}]},{"label":"OpenSSLVersion","comment":"the version of openssl library used by this vse","valuetype":"String","filenamebase":"OpenSSLVersion_Method","fqnprefix":"HashVSE.HashUtilities","qn":"Get.OpenSSLVersion","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get OpenSSLVersion As String","modifiers":"Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;the version of openssl library used by this vse&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"the version of openssl library used by this vse","inlinecomment":" \t &apos; the version of openssl library used by this vse","parentclassname":"HashUtilities","codesamplehtml":"", "attributes":["READ_ONLY","SET_CONST"], "signatureelements":["Property","Get"]},{"label":"VSEVersion","comment":"","valuetype":"String","filenamebase":"VSEVersion_Method","fqnprefix":"HashVSE.HashUtilities","qn":"Get.VSEVersion","codesample":"","signaturecode":258,"instancecode":256,"argumentsuffix":"","signature":"Property Get VSEVersion As String","modifiers":"Get","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"HashUtilities","codesamplehtml":"", "attributes":["READ_ONLY","GET_CONST","SET_CONST"], "signatureelements":["Property","Get"]}]}
